From 113f145a21afbf1bb6b4d2fc44401dea57da6db3 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Fri, 11 Jul 2025 08:46:51 +1000
Subject: [PATCH] msvidc32: Support 24 bit count AVI

Partial Fix.
TODO: Fix decoding of 24 bits.

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=52278


---
 dlls/msvidc32/msvideo1.c | 122 ++++++++++++++++++++++++++++++++++++++-
 1 file changed, 120 insertions(+), 2 deletions(-)

diff --git a/dlls/msvidc32/msvideo1.c b/dlls/msvidc32/msvideo1.c
index 327882f68f2..087d4a2334b 100644
--- a/dlls/msvidc32/msvideo1.c
+++ b/dlls/msvidc32/msvideo1.c
@@ -296,6 +296,117 @@ msvideo1_decode_16bit( int width, int height, const unsigned char *buf, int buf_
     }
 }
 
+static void msvideo1_decode_24bit( int width, int height, const unsigned char *buf, int buf_size,
+                       unsigned short *pixels, int stride)
+{
+    int block_ptr, pixel_ptr;
+    int total_blocks;
+    int pixel_x, pixel_y;  /* pixel width and height iterators */
+    int block_x, block_y;  /* block width and height iterators */
+    int blocks_wide, blocks_high;  /* width and height in 4x4 blocks */
+    int block_inc;
+    int row_dec;
+
+    /* decoding parameters */
+    int stream_ptr;
+    unsigned char byte_a, byte_b;
+    unsigned short flags;
+    int skip_blocks;
+    unsigned short colors[8];
+
+    stream_ptr = 0;
+    skip_blocks = 0;
+    blocks_wide = width / 4;
+    blocks_high = height / 4;
+    total_blocks = blocks_wide * blocks_high;
+    block_inc = 4;
+
+    row_dec = - (stride - 4); /* such that -row_dec > 0 */
+
+    for (block_y = blocks_high; block_y > 0; block_y--) {
+
+        block_ptr = ((blocks_high - block_y) * 4) * stride;
+
+        for (block_x = blocks_wide; block_x > 0; block_x--) {
+            /* check if this block should be skipped */
+            if (skip_blocks) {
+                block_ptr += block_inc;
+                skip_blocks--;
+                total_blocks--;
+                continue;
+            }
+
+            pixel_ptr = block_ptr;
+
+            /* get the next two bytes in the encoded data stream */
+            CHECK_STREAM_PTR(2);
+            byte_a = buf[stream_ptr++];
+            byte_b = buf[stream_ptr++];
+
+            /* check if the decode is finished */
+            if ((byte_a == 0) && (byte_b == 0) && (total_blocks == 0)) {
+                return;
+            } else if ((byte_b & 0xFC) == 0x84) {
+                /* skip code, but don't count the current block */
+                skip_blocks = ((byte_b - 0x84) << 8) + byte_a - 1;
+            } else if (byte_b < 0x80) {
+                /* 2- or 8-color encoding modes */
+                flags = (byte_b << 8) | byte_a;
+
+                CHECK_STREAM_PTR(4);
+                colors[0] = LE_16(&buf[stream_ptr]);
+                stream_ptr += 2;
+                colors[1] = LE_16(&buf[stream_ptr]);
+                stream_ptr += 2;
+
+                if (colors[0] & 0x8000) {
+                    /* 8-color encoding */
+                    CHECK_STREAM_PTR(12);
+                    colors[2] = LE_16(&buf[stream_ptr]);
+                    stream_ptr += 2;
+                    colors[3] = LE_16(&buf[stream_ptr]);
+                    stream_ptr += 2;
+                    colors[4] = LE_16(&buf[stream_ptr]);
+                    stream_ptr += 2;
+                    colors[5] = LE_16(&buf[stream_ptr]);
+                    stream_ptr += 2;
+                    colors[6] = LE_16(&buf[stream_ptr]);
+                    stream_ptr += 2;
+                    colors[7] = LE_16(&buf[stream_ptr]);
+                    stream_ptr += 2;
+
+                    for (pixel_y = 0; pixel_y < 4; pixel_y++) {
+                        for (pixel_x = 0; pixel_x < 4; pixel_x++, flags >>= 1)
+                            pixels[pixel_ptr++] =
+                                colors[((pixel_y & 0x2) << 1) +
+                                    (pixel_x & 0x2) + ((flags & 0x1) ^ 1)];
+                        pixel_ptr -= row_dec;
+                    }
+                } else {
+                    /* 2-color encoding */
+                    for (pixel_y = 0; pixel_y < 4; pixel_y++) {
+                        for (pixel_x = 0; pixel_x < 4; pixel_x++, flags >>= 1)
+                            pixels[pixel_ptr++] = colors[(flags & 0x1) ^ 1];
+                        pixel_ptr -= row_dec;
+                    }
+                }
+            } else {
+                /* otherwise, it's a 1-color block */
+                colors[0] = (byte_b << 8) | byte_a;
+
+                for (pixel_y = 0; pixel_y < 4; pixel_y++) {
+                    for (pixel_x = 0; pixel_x < 4; pixel_x++)
+                        pixels[pixel_ptr++] = colors[0];
+                    pixel_ptr -= row_dec;
+                }
+            }
+
+            block_ptr += block_inc;
+            total_blocks--;
+        }
+    }
+}
+
 static LRESULT
 CRAM_DecompressQuery( Msvideo1Context *info, LPBITMAPINFO in, LPBITMAPINFO out )
 {
@@ -367,7 +478,7 @@ CRAM_DecompressGetFormat( Msvideo1Context *info, LPBITMAPINFO in, LPBITMAPINFO o
     if (in->bmiHeader.biBitCount <= 8)
         size += in->bmiHeader.biClrUsed * sizeof(RGBQUAD);
 
-    if (in->bmiHeader.biBitCount != 8 && in->bmiHeader.biBitCount != 16)
+    if (in->bmiHeader.biBitCount != 8 && in->bmiHeader.biBitCount != 16 && in->bmiHeader.biBitCount != 24)
         return ICERR_BADFORMAT;
 
     if( out )
@@ -396,6 +507,8 @@ static LRESULT CRAM_DecompressBegin( Msvideo1Context *info, LPBITMAPINFO in, LPB
         info->depth = 8;
     else if( in->bmiHeader.biBitCount == 16 )
         info->depth = 16;
+    else if( in->bmiHeader.biBitCount == 24 )
+        info->depth = 24;
     else
     {
         info->depth = 0;
@@ -469,12 +582,17 @@ static LRESULT CRAM_Decompress( Msvideo1Context *info, ICDECOMPRESS *icd, DWORD
         msvideo1_decode_8bit( width, height, icd->lpInput, sz,
                               output, stride );
     }
-    else
+    else if (info->depth == 16)
     {
         stride = get_stride(width, 16) / 2;
         msvideo1_decode_16bit( width, height, icd->lpInput, sz,
                                output, stride );
     }
+    else if (info->depth == 24)
+    {
+        stride = get_stride(width, info->depth) / 3;
+        msvideo1_decode_24bit( width, height, icd->lpInput, sz, output, stride );
+    }
 
     if (icd->lpbiOutput->biBitCount != info->depth)
     {
-- 
2.47.2

