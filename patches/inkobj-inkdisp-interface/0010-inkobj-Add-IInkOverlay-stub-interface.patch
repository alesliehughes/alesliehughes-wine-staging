From 09dd90d3afb81c833eb60eb851dc0c3eee4db46f Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Sun, 14 Sep 2025 21:18:16 +1000
Subject: [PATCH] inkobj: Add IInkOverlay stub interface

---
 dlls/inkobj/inkobj.c | 639 ++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 626 insertions(+), 13 deletions(-)

diff --git a/dlls/inkobj/inkobj.c b/dlls/inkobj/inkobj.c
index a9a93f3e1a8..71309de1ec3 100644
--- a/dlls/inkobj/inkobj.c
+++ b/dlls/inkobj/inkobj.c
@@ -25,11 +25,23 @@ struct ink_disp
     LONG ref;
 };
 
+struct inkoverlay
+{
+    IInkOverlay IInkOverlay_iface;
+    LONG ref;
+};
+
 static inline struct ink_disp *impl_from_IInkDisp( IInkDisp *iface )
 {
     return CONTAINING_RECORD( iface, struct ink_disp, IInkDisp_iface );
 }
 
+static inline struct inkoverlay *impl_from_IInkOverlay( IInkOverlay *iface )
+{
+    return CONTAINING_RECORD( iface, struct inkoverlay, IInkOverlay_iface );
+}
+
+
 /*** IUnknown methods ***/
 static HRESULT WINAPI inkdisp_QueryInterface(IInkDisp *iface, REFIID riid, void **obj)
 {
@@ -380,6 +392,607 @@ static const struct IInkDispVtbl ink_disp_vtbl =
     inkdisp_ClipboardPaste
 };
 
+static HRESULT WINAPI inkoverlay_QueryInterface(IInkOverlay *iface, REFIID riid, void **obj)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+    TRACE( "%p, %s, %p\n", iface, debugstr_guid(riid), obj );
+
+    *obj = NULL;
+
+    if (IsEqualIID(riid, &IID_IUnknown)  ||
+        IsEqualIID(riid, &IID_IDispatch) ||
+        IsEqualIID(riid, &IID_IInkOverlay))
+    {
+        *obj = &inkoverlay->IInkOverlay_iface;
+    }
+    else
+    {
+        FIXME( "interface %s not implemented\n", debugstr_guid(riid) );
+        return E_NOINTERFACE;
+    }
+
+    IUnknown_AddRef( (IUnknown*)*obj );
+    return S_OK;
+}
+
+static ULONG WINAPI inkoverlay_AddRef(IInkOverlay *iface)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+    return InterlockedIncrement( &inkoverlay->ref );
+}
+
+static ULONG WINAPI inkoverlay_Release(IInkOverlay *iface)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+    LONG ref = InterlockedDecrement( &inkoverlay->ref );
+    if (!ref)
+    {
+        free( inkoverlay );
+    }
+    return ref;
+}
+
+static HRESULT WINAPI inkoverlay_GetTypeInfoCount(IInkOverlay *iface, UINT *pctinfo)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_GetTypeInfo(IInkOverlay *iface, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_GetIDsOfNames(IInkOverlay *iface, REFIID riid, LPOLESTR *rgszNames, UINT cNames,
+    LCID lcid, DISPID *rgDispId)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_Invoke(IInkOverlay *iface, DISPID dispIdMember, REFIID riid, LCID lcid,
+    WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_get_hWnd(IInkOverlay *iface, LONG_PTR *window)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_put_hWnd(IInkOverlay *iface, LONG_PTR window)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_get_Enabled( IInkOverlay *iface, VARIANT_BOOL *Collecting)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_put_Enabled(IInkOverlay *iface, VARIANT_BOOL Collecting)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_get_DefaultDrawingAttributes(IInkOverlay *iface, IInkDrawingAttributes **attributes)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_putref_DefaultDrawingAttributes(IInkOverlay *iface, IInkDrawingAttributes *attributes)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_get_Renderer( IInkOverlay *iface, IInkRenderer **CurrentInkRenderer)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_putref_Renderer( IInkOverlay *iface, IInkRenderer *CurrentInkRenderer)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_get_Ink(IInkOverlay *iface, IInkDisp **Ink)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_putref_Ink( IInkOverlay *iface, IInkDisp *Ink)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_get_AutoRedraw(IInkOverlay *iface, VARIANT_BOOL *AutoRedraw)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_put_AutoRedraw( IInkOverlay *iface, VARIANT_BOOL AutoRedraw)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_get_CollectingInk(IInkOverlay *iface, VARIANT_BOOL *collecting)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_get_CollectionMode( IInkOverlay *iface, InkCollectionMode *mode)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_put_CollectionMode(IInkOverlay *iface, InkCollectionMode Mode)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_get_DynamicRendering( IInkOverlay *iface, VARIANT_BOOL *Enabled)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_put_DynamicRendering( IInkOverlay *iface, VARIANT_BOOL enabled)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_get_DesiredPacketDescription(IInkOverlay *iface, VARIANT *PacketGuids)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_put_DesiredPacketDescription(IInkOverlay *iface, VARIANT PacketGuids)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_get_MouseIcon(IInkOverlay *iface, IPictureDisp **MouseIcon)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_put_MouseIcon(IInkOverlay *iface, IPictureDisp *MouseIcon)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_putref_MouseIcon(IInkOverlay *iface, IPictureDisp *MouseIcon)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_get_MousePointer(IInkOverlay *iface, InkMousePointer *MousePointer)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_put_MousePointer(IInkOverlay *iface, InkMousePointer MousePointer)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_get_EditingMode(IInkOverlay *iface, InkOverlayEditingMode *EditingMode)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_put_EditingMode(IInkOverlay *iface, InkOverlayEditingMode EditingMode)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_get_Selection(IInkOverlay *iface, IInkStrokes **Selection)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_put_Selection(IInkOverlay *iface, IInkStrokes *Selection)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_get_EraserMode(IInkOverlay *iface, InkOverlayEraserMode *EraserMode)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_put_EraserMode(IInkOverlay *iface, InkOverlayEraserMode EraserMode)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_get_EraserWidth(IInkOverlay *iface, LONG *EraserWidth)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_put_EraserWidth(IInkOverlay *iface, LONG EraserWidth)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_get_AttachMode(IInkOverlay *iface, InkOverlayAttachMode *AttachMode)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_put_AttachMode(IInkOverlay *iface, InkOverlayAttachMode AttachMode)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_get_Cursors(IInkOverlay *iface, IInkCursors **Cursors)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_get_MarginX(IInkOverlay *iface, LONG *MarginX)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_put_MarginX(IInkOverlay *iface, LONG MarginX)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_get_MarginY(IInkOverlay *iface, LONG *MarginY)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_put_MarginY(IInkOverlay *iface, LONG MarginY)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_get_Tablet(IInkOverlay *iface, IInkTablet **SingleTablet)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_get_SupportHighContrastInk(IInkOverlay *iface, VARIANT_BOOL *Support)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_put_SupportHighContrastInk(IInkOverlay *iface, VARIANT_BOOL Support)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_get_SupportHighContrastSelectionUI(IInkOverlay *iface, VARIANT_BOOL *Support)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_put_SupportHighContrastSelectionUI(IInkOverlay *iface, VARIANT_BOOL Support)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_HitTestSelection(IInkOverlay *iface, LONG x, LONG y, SelectionHitResult *SelArea)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_Draw(IInkOverlay *iface, IInkRectangle *Rect)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_SetGestureStatus(IInkOverlay *iface, InkApplicationGesture Gesture, VARIANT_BOOL Listen)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_GetGestureStatus(IInkOverlay *iface, InkApplicationGesture Gesture, VARIANT_BOOL *Listening)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_GetWindowInputRectangle(IInkOverlay *iface, IInkRectangle **WindowInputRectangle)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_SetWindowInputRectangle(IInkOverlay *iface, IInkRectangle *WindowInputRectangle)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_SetAllTabletsMode(IInkOverlay *iface, VARIANT_BOOL UseMouseForInput)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_SetSingleTabletIntegratedMode(IInkOverlay *iface, IInkTablet *Tablet)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_GetEventInterest(IInkOverlay *iface, InkCollectorEventInterest EventId, VARIANT_BOOL *Listen)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI inkoverlay_SetEventInterest(IInkOverlay *iface, InkCollectorEventInterest EventId, VARIANT_BOOL Listen)
+{
+    struct inkoverlay *inkoverlay = impl_from_IInkOverlay( iface );
+
+    FIXME("%p\n", inkoverlay);
+    return E_NOTIMPL;
+}
+
+static struct IInkOverlayVtbl inkoverlay_vtbl =
+{
+    inkoverlay_QueryInterface,
+    inkoverlay_AddRef,
+    inkoverlay_Release,
+    inkoverlay_GetTypeInfoCount,
+    inkoverlay_GetTypeInfo,
+    inkoverlay_GetIDsOfNames,
+    inkoverlay_Invoke,
+    inkoverlay_get_hWnd,
+    inkoverlay_put_hWnd,
+    inkoverlay_get_Enabled,
+    inkoverlay_put_Enabled,
+    inkoverlay_get_DefaultDrawingAttributes,
+    inkoverlay_putref_DefaultDrawingAttributes,
+    inkoverlay_get_Renderer,
+    inkoverlay_putref_Renderer,
+    inkoverlay_get_Ink,
+    inkoverlay_putref_Ink,
+    inkoverlay_get_AutoRedraw,
+    inkoverlay_put_AutoRedraw,
+    inkoverlay_get_CollectingInk,
+    inkoverlay_get_CollectionMode,
+    inkoverlay_put_CollectionMode,
+    inkoverlay_get_DynamicRendering,
+    inkoverlay_put_DynamicRendering,
+    inkoverlay_get_DesiredPacketDescription,
+    inkoverlay_put_DesiredPacketDescription,
+    inkoverlay_get_MouseIcon,
+    inkoverlay_put_MouseIcon,
+    inkoverlay_putref_MouseIcon,
+    inkoverlay_get_MousePointer,
+    inkoverlay_put_MousePointer,
+    inkoverlay_get_EditingMode,
+    inkoverlay_put_EditingMode,
+    inkoverlay_get_Selection,
+    inkoverlay_put_Selection,
+    inkoverlay_get_EraserMode,
+    inkoverlay_put_EraserMode,
+    inkoverlay_get_EraserWidth,
+    inkoverlay_put_EraserWidth,
+    inkoverlay_get_AttachMode,
+    inkoverlay_put_AttachMode,
+    inkoverlay_get_Cursors,
+    inkoverlay_get_MarginX,
+    inkoverlay_put_MarginX,
+    inkoverlay_get_MarginY,
+    inkoverlay_put_MarginY,
+    inkoverlay_get_Tablet,
+    inkoverlay_get_SupportHighContrastInk,
+    inkoverlay_put_SupportHighContrastInk,
+    inkoverlay_get_SupportHighContrastSelectionUI,
+    inkoverlay_put_SupportHighContrastSelectionUI,
+    inkoverlay_HitTestSelection,
+    inkoverlay_Draw,
+    inkoverlay_SetGestureStatus,
+    inkoverlay_GetGestureStatus,
+    inkoverlay_GetWindowInputRectangle,
+    inkoverlay_SetWindowInputRectangle,
+    inkoverlay_SetAllTabletsMode,
+    inkoverlay_SetSingleTabletIntegratedMode,
+    inkoverlay_GetEventInterest,
+    inkoverlay_SetEventInterest
+};
+
+HRESULT WINAPI inkdisp_CreateInstance(IClassFactory *iface, IUnknown *outer, REFIID riid, void **ppv)
+{
+    struct ink_disp *disp;
+
+    TRACE("(%p %s %p)\n", outer, debugstr_guid(riid), ppv);
+
+    if (!(disp = malloc( sizeof(*disp) ))) return E_OUTOFMEMORY;
+    disp->IInkDisp_iface.lpVtbl = &ink_disp_vtbl;
+    disp->ref = 1;
+
+    *ppv = &disp->IInkDisp_iface;
+    TRACE( "returning iface %p\n", *ppv );
+    return S_OK;
+}
+
+HRESULT WINAPI inkoverlay_CreateInstance(IClassFactory *iface, IUnknown *outer, REFIID riid, void **ppv)
+{
+    struct inkoverlay *overlay;
+
+    TRACE("(%p %s %p)\n", outer, debugstr_guid(riid), ppv);
+
+    if (!(overlay = malloc( sizeof(*overlay) ))) return E_OUTOFMEMORY;
+    overlay->IInkOverlay_iface.lpVtbl = &inkoverlay_vtbl;
+    overlay->ref = 1;
+
+    *ppv = &overlay->IInkOverlay_iface;
+    TRACE( "returning iface %p\n", *ppv );
+    return S_OK;
+}
+
 static HRESULT WINAPI ClassFactory_QueryInterface(IClassFactory *iface, REFIID riid, void **ppv)
 {
     *ppv = NULL;
@@ -413,20 +1026,7 @@ static ULONG WINAPI ClassFactory_Release(IClassFactory *iface)
     return 1;
 }
 
-HRESULT WINAPI inkdisp_CreateInstance(IClassFactory *iface, IUnknown *outer, REFIID riid, void **ppv)
-{
-    struct ink_disp *disp;
-
-    TRACE("(%p %s %p)\n", outer, debugstr_guid(riid), ppv);
 
-    if (!(disp = malloc( sizeof(*disp) ))) return E_OUTOFMEMORY;
-    disp->IInkDisp_iface.lpVtbl = &ink_disp_vtbl;
-    disp->ref = 1;
-
-    *ppv = &disp->IInkDisp_iface;
-    TRACE( "returning iface %p\n", *ppv );
-    return S_OK;
-}
 
 static HRESULT WINAPI ClassFactory_LockServer(IClassFactory *iface, BOOL fLock)
 {
@@ -442,7 +1042,16 @@ static const IClassFactoryVtbl cfinkdisplVtbl = {
     ClassFactory_LockServer
 };
 
+static const IClassFactoryVtbl cfinkoverlayVtbl = {
+    ClassFactory_QueryInterface,
+    ClassFactory_AddRef,
+    ClassFactory_Release,
+    inkoverlay_CreateInstance,
+    ClassFactory_LockServer
+};
+
 static IClassFactory cf_inkdisp = { &cfinkdisplVtbl };
+static IClassFactory cf_overlay = { &cfinkoverlayVtbl };
 
 /*****************************************************
  *    DllGetClassObject [INKOBJ.@]
@@ -455,6 +1064,10 @@ HRESULT WINAPI DllGetClassObject(REFCLSID rclsid, REFIID riid, LPVOID* ppv)
     {
         return IClassFactory_QueryInterface(&cf_inkdisp, riid, ppv);
     }
+    else if (IsEqualGUID(&CLSID_InkOverlay, rclsid))
+    {
+        return IClassFactory_QueryInterface(&cf_overlay, riid, ppv);
+    }
 
     FIXME("Not implemented. Requested class was:%s\n", debugstr_guid(rclsid));
 
-- 
2.51.0

