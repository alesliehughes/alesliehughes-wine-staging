From c63c2f31d9b9c9793b34b3da6ac4132d38372c0b Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Mon, 27 Nov 2023 15:06:07 +1100
Subject: msdasql: Implement IColumnsInfo::GetColumnInfo for column metadata.


diff --git a/dlls/msdasql/session.c b/dlls/msdasql/session.c
index 61e351b0ca7..4d866e03e64 100644
--- a/dlls/msdasql/session.c
+++ b/dlls/msdasql/session.c
@@ -1555,17 +1555,117 @@ static ULONG  WINAPI meta_colsinfo_Release(IColumnsInfo *iface)
     return IRowset_Release(&rowset->IRowset_iface);
 }
 
+static OLECHAR *meta_set_column_info(DBCOLUMNINFO *columns, OLECHAR *namebuf, const WCHAR *colname,
+                                   int ordinal, int bindtype, DWORD flags, ULONG col_size,
+                                   BOOL precision, const DBID *dbid)
+{
+    DBCOLUMNINFO *column = &columns[ordinal];
+    if(colname)
+    {
+        lstrcpyW(namebuf, colname);
+        column->pwszName = namebuf;
+    }
+    else
+        column->pwszName = NULL;
+    column->pTypeInfo = NULL;
+    column->iOrdinal = ordinal;
+    column->wType = bindtype;
+    column->dwFlags = flags;
+    column->ulColumnSize = col_size;
+    column->bScale = 255;
+    column->bPrecision= precision;
+    column->columnid = *dbid;
+
+     if(colname)
+         namebuf += lstrlenW(colname) + 1;
+
+     return namebuf;
+}
+
 static HRESULT WINAPI meta_colsinfo_GetColumnInfo(IColumnsInfo *iface, DBORDINAL *columns,
         DBCOLUMNINFO **colinfo, OLECHAR **stringsbuffer)
 {
     struct metadata_rowset *rowset = meta_impl_from_IColumnsInfo( iface );
+    DBCOLUMNINFO *dbcolumn;
+    DBORDINAL colcnt;
+    OLECHAR *ptr;
+    int i;
+    int col = 0;
+#define MAX_COLUMN_LEN 64
+#define META_COLUMN_CNT 12
 
-    FIXME("%p, %p, %p, %p\n", rowset, columns, colinfo, stringsbuffer);
+    TRACE("%p, %p, %p, %p\n", rowset, columns, colinfo, stringsbuffer);
 
     if (!columns || !colinfo || !stringsbuffer)
         return E_INVALIDARG;
 
-    return E_NOTIMPL;
+    *columns = colcnt = META_COLUMN_CNT + rowset->dbid_cnt;
+
+    ptr = *stringsbuffer = CoTaskMemAlloc(colcnt * MAX_COLUMN_LEN * sizeof(WCHAR));
+    if (!ptr)
+        return E_OUTOFMEMORY;
+
+    dbcolumn = CoTaskMemAlloc(colcnt * sizeof(DBCOLUMNINFO));
+    if (!dbcolumn)
+    {
+        CoTaskMemFree(ptr);
+        return E_OUTOFMEMORY;
+    }
+    memset(dbcolumn, 0, colcnt * sizeof(DBCOLUMNINFO));
+
+    /* 12 Standard columns */
+    ptr = meta_set_column_info(dbcolumn, ptr, NULL, col++, DBTYPE_UI4,
+                                    DBCOLUMNFLAGS_ISFIXEDLENGTH | DBCOLUMNFLAGS_ISBOOKMARK, 4, 10, &DBCOLUMN_IDNAME);
+    ptr = meta_set_column_info(dbcolumn, ptr, L"DBCOLUMN_IDNAME", col++, DBTYPE_WSTR,
+                                    DBCOLUMNFLAGS_MAYBENULL | DBCOLUMNFLAGS_WRITEUNKNOWN, 192, 255, &DBCOLUMN_IDNAME);
+    ptr = meta_set_column_info(dbcolumn, ptr, L"DBCOLUMN_GUID", col++, DBTYPE_GUID,
+                                    DBCOLUMNFLAGS_MAYBENULL | DBCOLUMNFLAGS_ISFIXEDLENGTH | DBCOLUMNFLAGS_WRITEUNKNOWN, 16, 255, &DBCOLUMN_GUID);
+    ptr = meta_set_column_info(dbcolumn, ptr, L"DBCOLUMN_PROPID", col++, DBTYPE_UI4,
+                                    DBCOLUMNFLAGS_MAYBENULL | DBCOLUMNFLAGS_ISFIXEDLENGTH | DBCOLUMNFLAGS_WRITEUNKNOWN, 4, 10, &DBCOLUMN_PROPID);
+    ptr = meta_set_column_info(dbcolumn, ptr, L"DBCOLUMN_NAME", col++, DBTYPE_WSTR,
+                                    DBCOLUMNFLAGS_MAYBENULL | DBCOLUMNFLAGS_WRITEUNKNOWN, 192, 255, &DBCOLUMN_NAME);
+    ptr = meta_set_column_info(dbcolumn, ptr, L"DBCOLUMN_NUMBER", col++, DBTYPE_UI4,
+                                    DBCOLUMNFLAGS_ISFIXEDLENGTH | DBCOLUMNFLAGS_WRITEUNKNOWN, 4, 10, &DBCOLUMN_NUMBER);
+    ptr = meta_set_column_info(dbcolumn, ptr, L"DBCOLUMN_TYPE", col++, DBTYPE_UI2,
+                                    DBCOLUMNFLAGS_ISFIXEDLENGTH | DBCOLUMNFLAGS_WRITEUNKNOWN, 2, 5, &DBCOLUMN_TYPE);
+    ptr = meta_set_column_info(dbcolumn, ptr, L"DBCOLUMN_TYPEINFO", col++, DBTYPE_IUNKNOWN,
+                                    DBCOLUMNFLAGS_MAYBENULL | DBCOLUMNFLAGS_ISFIXEDLENGTH | DBCOLUMNFLAGS_WRITEUNKNOWN, 4, 255, &DBCOLUMN_TYPEINFO);
+    ptr = meta_set_column_info(dbcolumn, ptr, L"DBCOLUMN_COLUMNSIZE", col++, DBTYPE_UI4,
+                                    DBCOLUMNFLAGS_ISFIXEDLENGTH | DBCOLUMNFLAGS_WRITEUNKNOWN, 4, 10, &DBCOLUMN_COLUMNSIZE);
+    ptr = meta_set_column_info(dbcolumn, ptr, L"DBCOLUMN_PRECISION", col++, DBTYPE_UI2,
+                                    DBCOLUMNFLAGS_MAYBENULL | DBCOLUMNFLAGS_ISFIXEDLENGTH | DBCOLUMNFLAGS_WRITEUNKNOWN, 2, 5, &DBCOLUMN_PRECISION);
+    ptr = meta_set_column_info(dbcolumn, ptr, L"DBCOLUMN_SCALE", col++, DBTYPE_I2,
+                                    DBCOLUMNFLAGS_MAYBENULL | DBCOLUMNFLAGS_ISFIXEDLENGTH | DBCOLUMNFLAGS_WRITEUNKNOWN, 2, 5, &DBCOLUMN_SCALE);
+    ptr = meta_set_column_info(dbcolumn, ptr, L"DBCOLUMN_FLAGS", col++, DBTYPE_UI4,
+                                    DBCOLUMNFLAGS_ISFIXEDLENGTH | DBCOLUMNFLAGS_WRITEUNKNOWN, 4, 10, &DBCOLUMN_FLAGS);
+
+    /* Requested columns */
+    for (i=0; i < rowset->dbid_cnt; i++)
+    {
+        switch(rowset->dbids[i].uName.ulPropid)
+        {
+            case 10:
+                ptr = meta_set_column_info(dbcolumn, ptr, L"DBCOLUMN_BASECOLUMNNAME", col++, DBTYPE_WSTR,
+                                    DBCOLUMNFLAGS_MAYBENULL | DBCOLUMNFLAGS_WRITEUNKNOWN, 192, 255, &DBCOLUMN_BASECOLUMNNAME);
+                break;
+            case 11:
+                ptr = meta_set_column_info(dbcolumn, ptr, L"DBCOLUMN_BASETABLENAME", col++, DBTYPE_WSTR,
+                                    DBCOLUMNFLAGS_MAYBENULL | DBCOLUMNFLAGS_WRITEUNKNOWN, 192, 255, &DBCOLUMN_BASETABLENAME);
+                break;
+            case 41:
+                ptr = meta_set_column_info(dbcolumn, ptr, L"DBCOLUMN_KEYCOLUMN", col++, DBTYPE_BOOL,
+                                    DBCOLUMNFLAGS_MAYBENULL | DBCOLUMNFLAGS_ISFIXEDLENGTH | DBCOLUMNFLAGS_WRITEUNKNOWN, 2, 255, &DBCOLUMN_KEYCOLUMN);
+                break;
+            default:
+                ERR("Unsupported DBID %ld\n", rowset->dbids[i].uName.ulPropid);
+                break;
+        }
+    }
+
+    *colinfo = dbcolumn;
+#undef MAX_COLUMN_LEN
+#undef META_COLUMN_CNT
+    return S_OK;
 }
 
 static HRESULT WINAPI meta_colsinfo_MapColumnIDs(IColumnsInfo *iface, DBORDINAL column_ids,
