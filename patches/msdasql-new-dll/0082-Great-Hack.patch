From 74de79bf57d46772fe045322f3cb421c2c086103 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Tue, 26 May 2020 16:47:25 +1000
Subject: [PATCH] Great Hack

---
 dlls/oledb32/dslocator.c | 211 ++++++++++++++++++++++++++++++---------
 1 file changed, 162 insertions(+), 49 deletions(-)

diff --git a/dlls/oledb32/dslocator.c b/dlls/oledb32/dslocator.c
index 5746b51d55c..3e5d94fd3d2 100644
--- a/dlls/oledb32/dslocator.c
+++ b/dlls/oledb32/dslocator.c
@@ -37,6 +37,9 @@
 #include "wine/debug.h"
 #include "wine/heap.h"
 
+#include "initguid.h"
+#include "msado15_backcompat.h"
+
 WINE_DEFAULT_DEBUG_CHANNEL(oledb);
 
 struct datasource
@@ -47,6 +50,22 @@ struct datasource
     WCHAR *description;
 };
 
+struct data_link_props
+{
+    /* Page 1 - Provider */
+    GUID guid;
+
+    /* page 2 - Connection */
+    BOOL sourcename;
+    WCHAR datasource[256];
+
+    WCHAR username[256];
+    WCHAR password[256];
+    BOOL blank;
+    BOOL saving;
+    WCHAR initial[256];
+};
+
 static struct datasource *create_datasource(WCHAR *guid)
 {
     struct datasource *data = heap_alloc_zero(sizeof(struct datasource));
@@ -327,6 +346,56 @@ static void add_connections_providers(HWND lv)
     RegCloseKey(key);
 }
 
+static BOOL data_link_apply(HWND hwnd)
+{
+    LVITEMA item;
+    /*
+     * FIXME: This needs to replace the connection page based off the selection.
+     *   We only care about the ODBC for now which is the default.
+     */
+
+    HWND lv = GetDlgItem(hwnd, IDC_LST_CONNECTIONS);
+    if (!SendMessageW(lv, LVM_GETSELECTEDCOUNT, 0, 0))
+    {
+        WCHAR title[256], msg[256];
+
+        LoadStringW(instance, IDS_PROVIDER_TITLE, title, ARRAY_SIZE(title));
+        LoadStringW(instance, IDS_PROVIDER_ERROR, msg, ARRAY_SIZE(msg));
+        MessageBoxW(hwnd, msg, title, MB_OK | MB_ICONEXCLAMATION);
+        SetWindowLongPtrW(hwnd, DWLP_MSGRESULT, TRUE);
+        return TRUE;
+    }
+
+    item.iItem = 0;
+    item.iSubItem = 0;
+    item.stateMask = LVIS_SELECTED;
+    item.mask = LVIF_PARAM | LVIF_STATE;
+
+    if(ListView_GetItemA(lv, &item))
+    {
+        struct data_link_props *data;
+        struct datasource *datasource = (struct datasource*)item.lParam;
+
+        if(!initialize_datasource( datasource ))
+        {
+            WCHAR title[256], msg[256];
+            LoadStringW(instance, IDS_PROVIDER_TITLE, title, ARRAY_SIZE(title));
+            LoadStringW(instance, IDS_PROVIDER_NOT_AVAIL, msg, ARRAY_SIZE(msg));
+            MessageBoxW(hwnd, msg, title, MB_OK | MB_ICONEXCLAMATION);
+            SetWindowLongPtrW(hwnd, DWLP_MSGRESULT, TRUE);
+            return TRUE;
+        }
+
+        data = (struct data_link_props *)GetWindowLongPtrA(hwnd, GWLP_USERDATA);
+        if (data)
+            data->guid = datasource->clsid;
+    }
+    else
+        ERR("Failed to get selected item\n");
+
+    return FALSE;
+}
+
 static INT_PTR CALLBACK data_link_properties_dlg_proc(HWND hwnd, UINT msg, WPARAM wp, LPARAM lp)
 {
     TRACE("(%p, %08x, %08Ix, %08Ix)\n", hwnd, msg, wp, lp);
@@ -335,13 +404,15 @@ static INT_PTR CALLBACK data_link_properties_dlg_proc(HWND hwnd, UINT msg, WPARA
     {
         case WM_INITDIALOG:
         {
-            HWND btn, lv = GetDlgItem(hwnd, IDC_LST_CONNECTIONS);
+            PROPSHEETPAGEW *page = (PROPSHEETPAGEW *)lp;
+            HWND lv = GetDlgItem(hwnd, IDC_LST_CONNECTIONS);
+            struct data_link_props *data = (struct data_link_props*)page->lParam;
+
+            SetWindowLongPtrA(hwnd, GWLP_USERDATA, (LONG_PTR)data);
+
             create_connections_columns(lv);
             add_connections_providers(lv);
 
-            btn = GetDlgItem(GetParent(hwnd), IDOK);
-            EnableWindow(btn, FALSE);
-
             break;
         }
         case WM_DESTROY:
@@ -365,48 +436,8 @@ static INT_PTR CALLBACK data_link_properties_dlg_proc(HWND hwnd, UINT msg, WPARA
             NMHDR *hdr = ((LPNMHDR)lp);
             switch(hdr->code)
             {
-                case PSN_KILLACTIVE:
-                {
-                    LVITEMA item;
-                    /*
-                     * FIXME: This needs to replace the connection page based off the selection.
-                     *   We only care about the ODBC for now which is the default.
-                     */
-
-                    HWND lv = GetDlgItem(hwnd, IDC_LST_CONNECTIONS);
-                    if (!SendMessageW(lv, LVM_GETSELECTEDCOUNT, 0, 0))
-                    {
-                        WCHAR title[256], msg[256];
-
-                        LoadStringW(instance, IDS_PROVIDER_TITLE, title, ARRAY_SIZE(title));
-                        LoadStringW(instance, IDS_PROVIDER_ERROR, msg, ARRAY_SIZE(msg));
-                        MessageBoxW(hwnd, msg, title, MB_OK | MB_ICONEXCLAMATION);
-                        SetWindowLongPtrW(hwnd, DWLP_MSGRESULT, TRUE);
-                        return TRUE;
-                    }
-
-                    item.iItem = 0;
-                    item.iSubItem = 0;
-                    item.stateMask = LVIS_SELECTED;
-                    item.mask = LVIF_PARAM | LVIF_STATE;
-
-                    if(ListView_GetItemA(lv, &item))
-                    {
-                        if(!initialize_datasource( (struct datasource*)item.lParam))
-                        {
-                            WCHAR title[256], msg[256];
-                            LoadStringW(instance, IDS_PROVIDER_TITLE, title, ARRAY_SIZE(title));
-                            LoadStringW(instance, IDS_PROVIDER_NOT_AVAIL, msg, ARRAY_SIZE(msg));
-                            MessageBoxW(hwnd, msg, title, MB_OK | MB_ICONEXCLAMATION);
-                            SetWindowLongPtrW(hwnd, DWLP_MSGRESULT, TRUE);
-                            return TRUE;
-                        }
-                    }
-                    else
-                        ERR("Failed to get selected item\n");
-
-                    return FALSE;
-                }
+                case PSN_APPLY:
+                    return data_link_apply(hwnd);
             }
 
             break;
@@ -414,7 +445,10 @@ static INT_PTR CALLBACK data_link_properties_dlg_proc(HWND hwnd, UINT msg, WPARA
         case WM_COMMAND:
         {
             if (LOWORD(wp) == IDC_BTN_NEXT)
-                SendMessageW(GetParent(hwnd), PSM_SETCURSEL, 1, 0);
+            {
+                if (!data_link_apply(hwnd))
+                    SendMessageW(GetParent(hwnd), PSM_SETCURSEL, 1, 0);
+            }
             break;
         }
         default:
@@ -483,11 +517,51 @@ static INT_PTR CALLBACK data_link_connection_dlg_proc(HWND hwnd, UINT msg, WPARA
     {
         case WM_INITDIALOG:
         {
+            PROPSHEETPAGEW *page = (PROPSHEETPAGEW *)lp;
+            struct data_link_props *data = (struct data_link_props*)page->lParam;
+
+            SetWindowLongPtrA(hwnd, GWLP_USERDATA, (LONG_PTR)data);
+
             connection_initialize_controls(hwnd);
             connection_fill_odbc_list(hwnd);
             connection_toggle_controls(hwnd);
             break;
         }
+        case WM_NOTIFY:
+        {
+            NMHDR *hdr = ((LPNMHDR)lp);
+            switch(hdr->code)
+            {
+                case PSN_APPLY:
+                {
+                    struct data_link_props *data;
+                    HWND combo = GetDlgItem(hwnd, IDC_CBO_NAMES);
+                    HWND edit = GetDlgItem(hwnd, IDC_EDT_CONNECTION);
+                    HWND radio = GetDlgItem(hwnd, IDC_RDO_SRC_NAME);
+
+                    data = (struct data_link_props *)GetWindowLongPtrA(hwnd, GWLP_USERDATA);
+                    if (data)
+                    {
+                        data->sourcename = SendMessageA(radio, BM_GETCHECK, 0, 0);
+
+                        SendMessageW(GetDlgItem(hwnd, IDC_EDT_NAME), WM_GETTEXT, sizeof(data->datasource), (LPARAM)data->username);
+                        SendMessageW(GetDlgItem(hwnd, IDC_EDT_PASSWORD), WM_GETTEXT, sizeof(data->datasource), (LPARAM)data->password);
+
+                        data->blank = SendMessageA(GetDlgItem(hwnd, IDC_CHK_BLANK), BM_GETCHECK, 0, 0);
+                        data->saving = SendMessageA(GetDlgItem(hwnd, IDC_CHK_SAVE_PASS), BM_GETCHECK, 0, 0);
+                        SendMessageW(GetDlgItem(hwnd, IDC_CBO_INITIAL), CB_GETLBTEXT, 0, (LPARAM)data->initial);
+
+                        if (data->sourcename)
+                            SendMessageW(combo, CB_GETLBTEXT, 0, (LPARAM)data->datasource);
+                        else
+                            SendMessageW(edit, WM_GETTEXT, sizeof(data->datasource), (LPARAM)data->datasource);
+                    }
+                    break;
+                }
+            }
+
+            break;
+        }
         case WM_COMMAND:
         {
             switch (LOWORD(wp))
@@ -555,6 +629,11 @@ static INT_PTR CALLBACK data_link_advanced_dlg_proc(HWND hwnd, UINT msg, WPARAM
     {
         case WM_INITDIALOG:
         {
+            PROPSHEETPAGEW *page = (PROPSHEETPAGEW *)lp;
+            struct data_link_props *data = (struct data_link_props*)page->lParam;
+
+            SetWindowLongPtrA(hwnd, GWLP_USERDATA, (LONG_PTR)data);
+
             EnableWindow(GetDlgItem(hwnd, IDC_LBL_LEVEL), FALSE);
             EnableWindow(GetDlgItem(hwnd, IDC_CBO_LEVEL), FALSE);
             EnableWindow(GetDlgItem(hwnd, IDC_LBL_PROTECTION), FALSE);
@@ -600,9 +679,26 @@ static INT_PTR CALLBACK data_link_all_dlg_proc(HWND hwnd, UINT msg, WPARAM wp, L
         case WM_INITDIALOG:
         {
             HWND lv = GetDlgItem(hwnd, IDC_LST_PROPERTIES);
+            PROPSHEETPAGEW *page = (PROPSHEETPAGEW *)lp;
+            struct data_link_props *data = (struct data_link_props*)page->lParam;
+
+            SetWindowLongPtrA(hwnd, GWLP_USERDATA, (LONG_PTR)data);
+
             create_page_all_columns(lv);
             break;
         }
+        case WM_NOTIFY:
+        {
+            NMHDR *hdr = ((LPNMHDR)lp);
+            switch(hdr->code)
+            {
+                case PSN_APPLY:
+                    /* TODO */
+                    break;
+            }
+
+            break;
+        }
         case WM_COMMAND:
         {
             if (LOWORD(wp) == IDC_BTN_EDIT)
@@ -614,14 +710,16 @@ static INT_PTR CALLBACK data_link_all_dlg_proc(HWND hwnd, UINT msg, WPARAM wp, L
      }
 
      return 0;
- }
+}
 
 static HRESULT WINAPI dslocator_PromptNew(IDataSourceLocator *iface, IDispatch **connection)
 {
     DSLocatorImpl *This = impl_from_IDataSourceLocator(iface);
+    struct data_link_props data;
     PROPSHEETHEADERW hdr;
     PROPSHEETPAGEW pages[4];
     INT_PTR ret;
+    HRESULT hr;
 
     FIXME("(%p, %p) Semi-stub\n", iface, connection);
 
@@ -636,11 +734,13 @@ static HRESULT WINAPI dslocator_PromptNew(IDataSourceLocator *iface, IDispatch *
     pages[0].hInstance = instance;
     pages[0].pszTemplate = MAKEINTRESOURCEW(IDD_PROVIDER);
     pages[0].pfnDlgProc = data_link_properties_dlg_proc;
+    pages[0].lParam = (LPARAM)&data;
 
     pages[1].dwSize = sizeof(PROPSHEETPAGEW);
     pages[1].hInstance = instance;
     pages[1].pszTemplate = MAKEINTRESOURCEW(IDD_CONNECTION);
     pages[1].pfnDlgProc = data_link_connection_dlg_proc;
+    pages[1].lParam = (LPARAM)&data;
 
     pages[2].dwSize = sizeof(PROPSHEETPAGEW);
     pages[2].hInstance = instance;
@@ -661,8 +761,21 @@ static HRESULT WINAPI dslocator_PromptNew(IDataSourceLocator *iface, IDispatch *
     hdr.ppsp = pages;
     hdr.nPages = ARRAY_SIZE(pages);
     ret = PropertySheetW(&hdr);
+    FIXME("PropertySheetW return %ld\n", ret);
+    if (ret != 1)
+        return S_FALSE;
+
+    hr = CoCreateInstance( &CLSID_Connection, NULL, CLSCTX_INPROC_SERVER, &IID__Connection, (void**)connection );
+    if (hr == S_OK)
+    {
+        BSTR str = SysAllocString(L"Provider=MSDASQL.1;Persist Security Info=False;Data "
+                              "Source=wine_test");
+
+        ret = _Connection_put_ConnectionString( (_Connection*)*connection, str);
+        SysFreeString(str);
+    }
 
-    return ret ? S_OK : S_FALSE;
+    return hr == S_OK ? S_OK : S_FALSE;
 }
 
 static HRESULT WINAPI dslocator_PromptEdit(IDataSourceLocator *iface, IDispatch **ppADOConnection, VARIANT_BOOL *success)
-- 
2.40.1

