From e702433060bf92773bff2ccf77363032e97a77ca Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Sun, 14 Nov 2021 09:43:40 +1100
Subject: [PATCH] msdasql: Implement Rowsets IAccessor CreateAccessor

Signed-off-by: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
---
 dlls/msdasql/session.c | 80 ++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 78 insertions(+), 2 deletions(-)

diff --git a/dlls/msdasql/session.c b/dlls/msdasql/session.c
index 76e55421ff0..189dedd7e47 100644
--- a/dlls/msdasql/session.c
+++ b/dlls/msdasql/session.c
@@ -197,6 +197,26 @@ static const char *debugstr_dbtype(DBTYPE type)
     }
 }
 
+static SQLSMALLINT bindtype_to_sqltype(DBTYPE type)
+{
+    switch (type)
+    {
+        case DBTYPE_NUMERIC:
+            return SQL_DECIMAL;
+        case DBTYPE_I8:
+            return SQL_C_SBIGINT;
+        case DBTYPE_I4:
+            return SQL_C_SLONG;
+        case DBTYPE_WSTR:
+            return SQL_C_WCHAR;
+        case DBTYPE_DBTIMESTAMP:
+            return SQL_TYPE_TIMESTAMP;
+        default:
+            FIXME("Unsupported type %i\n", type);
+    }
+    return SQL_C_SLONG;
+}
+
 static SQLSMALLINT sqltype_to_bindtype(SQLSMALLINT type, BOOL sign)
 {
     switch (type)
@@ -714,6 +734,12 @@ static HRESULT WINAPI command_Cancel(ICommandText *iface)
     return E_NOTIMPL;
 }
 
+struct msdasql_accessor
+{
+    int size;
+    char *data;
+};
+
 struct msdasql_rowset
 {
     IRowset IRowset_iface;
@@ -724,6 +750,9 @@ struct msdasql_rowset
     IUnknown *caller;
     LONG refs;
     SQLHSTMT hstmt;
+
+    DBBINDING *bindings;
+    DBCOUNTITEM bind_cnt;
 };
 
 static inline struct msdasql_rowset *impl_from_IRowset( IRowset *iface )
@@ -1177,8 +1206,55 @@ static HRESULT WINAPI rowset_accessor_CreateAccessor(IAccessor *iface, DBACCESSO
         DBBINDSTATUS status[])
 {
     struct msdasql_rowset *rowset = impl_from_IAccessor( iface );
-    FIXME("%p, 0x%08lx, %Id, %p, %Id, %p, %p\n", rowset, flags, count, bindings, row_size, accessor, status);
-    return E_NOTIMPL;
+    int i;
+    struct msdasql_accessor *access;
+    char *ptr;
+    SQLSMALLINT type;
+
+    TRACE("%p 0x%08lx, %lu, %p, %lu, %p, %p\n", rowset, flags, count, bindings, row_size, accessor, status);
+
+    //free(rowset->bindings); // ??? Verify.
+    rowset->bindings = malloc(sizeof(DBBINDING) * count);
+    rowset->bind_cnt = count;
+
+    memcpy(rowset->bindings, bindings, sizeof(DBBINDING) * count);
+
+    access = malloc( sizeof(struct msdasql_accessor));
+    access->size = 0;
+    ptr = access->data = malloc(1024);
+    for ( i=0; i < count; i++)
+    {
+        SQLRETURN ret;
+
+        TRACE("ord %lu. Value %lu, Len %lu, status %lu, typeinfo %p, part %ld, Owner %ld, io %ld,"
+              "Max %lu, flags %08lx, type %d,  prec %d, sacle %d\n",
+                bindings[i].iOrdinal, bindings[i].obValue, bindings[i].obLength, bindings[i].obStatus,
+                bindings[i].pTypeInfo, bindings[i].dwPart, bindings[i].dwMemOwner, bindings[i].eParamIO,
+                bindings[i].cbMaxLen, bindings[i].dwFlags, bindings[i].wType, bindings[i].bPrecision,
+                bindings[i].bScale);
+
+        if (bindings[i].pObject)
+            FIXME("DBOBJECT 0x%08lx, %s currently not supported\n", bindings[i].pObject->dwFlags,
+                    debugstr_guid(&bindings[i].pObject->iid));
+
+        type = bindtype_to_sqltype(bindings[i].wType);
+        ret = SQLBindCol(rowset->hstmt, bindings[i].iOrdinal, type, &ptr[bindings[i].obValue],
+                            bindings[i].cbMaxLen, (SQLLEN*)&ptr[bindings[i].obLength]);
+        if (ret != SQL_SUCCESS && ret != SQL_SUCCESS_WITH_INFO)
+        {
+            dump_sql_diag_records(SQL_HANDLE_STMT, rowset->hstmt);
+
+            free(access->data);
+            free(access);
+            return E_FAIL;
+        }
+    }
+
+    *accessor = (HACCESSOR)access;
+    if (status)
+         *status = DBBINDSTATUS_OK;
+
+    return S_OK;
 }
 
 static HRESULT WINAPI rowset_accessor_GetBindings(IAccessor *iface, HACCESSOR accessor,
-- 
2.34.1

