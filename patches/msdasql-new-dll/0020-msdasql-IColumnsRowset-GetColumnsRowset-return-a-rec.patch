From fe0a85788654369f454b5746289c4261cb3ed5fa Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Thu, 23 Nov 2023 17:50:11 +1100
Subject: [PATCH 3/5] msdasql: IColumnsRowset::GetColumnsRowset return a
 recordset.

---
 dlls/msdasql/session.c | 157 ++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 155 insertions(+), 2 deletions(-)

diff --git a/dlls/msdasql/session.c b/dlls/msdasql/session.c
index 39d9897c5fa..12941ee790d 100644
--- a/dlls/msdasql/session.c
+++ b/dlls/msdasql/session.c
@@ -1413,13 +1413,166 @@ static HRESULT WINAPI column_rs_GetAvailableColumns(IColumnsRowset *iface, DBORD
     return S_OK;
 }
 
+struct metadata_rowset
+{
+    IRowset IRowset_iface;
+    LONG refs;
+
+    DBORDINAL dbid_cnt;
+    DBID      *dbids;
+};
+
+static inline struct metadata_rowset *meta_impl_from_IRowset( IRowset *iface )
+{
+    return CONTAINING_RECORD( iface, struct metadata_rowset, IRowset_iface );
+}
+
+static HRESULT WINAPI metadata_rowset_QueryInterface(IRowset *iface, REFIID riid,  void **ppv)
+{
+    struct metadata_rowset *rowset = meta_impl_from_IRowset( iface );
+
+    TRACE( "%p, %s, %p\n", rowset, debugstr_guid(riid), ppv );
+
+    *ppv = NULL;
+    if(IsEqualGUID(&IID_IUnknown, riid) ||
+       IsEqualGUID(&IID_IRowset, riid))
+    {
+        *ppv = &rowset->IRowset_iface;
+    }
+
+    if(*ppv)
+    {
+        IUnknown_AddRef((IUnknown*)*ppv);
+        return S_OK;
+    }
+
+    FIXME("(%p)->(%s %p)\n", iface, debugstr_guid(riid), ppv);
+    return E_NOINTERFACE;
+}
+
+static ULONG WINAPI metadata_rowset_AddRef(IRowset *iface)
+{
+    struct metadata_rowset *rowset = meta_impl_from_IRowset( iface );
+    LONG refs = InterlockedIncrement( &rowset->refs );
+    TRACE( "%p new refcount %ld\n", rowset, refs );
+    return refs;
+}
+
+static ULONG WINAPI metadata_rowset_Release(IRowset *iface)
+{
+    struct metadata_rowset *rowset = meta_impl_from_IRowset( iface );
+    LONG refs = InterlockedDecrement( &rowset->refs );
+    TRACE( "%p new refcount %ld\n", rowset, refs );
+    if (!refs)
+    {
+        free(rowset->dbids);
+
+        free(rowset);
+    }
+    return refs;
+}
+
+static HRESULT WINAPI metadata_rowset_AddRefRows(IRowset *iface, DBCOUNTITEM count,
+        const HROW rows[], DBREFCOUNT ref_counts[], DBROWSTATUS status[])
+{
+    struct metadata_rowset *rowset = meta_impl_from_IRowset( iface );
+    FIXME("%p, %Id, %p, %p, %p\n", rowset, count, rows, ref_counts, status);
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI metadata_rowset_GetData(IRowset *iface, HROW row, HACCESSOR accessor, void *data)
+{
+    struct metadata_rowset *rowset = meta_impl_from_IRowset( iface );
+    FIXME("%p, %Id, %Id, %p\n", rowset, row, accessor, data);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI metadata_rowset_GetNextRows(IRowset *iface, HCHAPTER reserved, DBROWOFFSET offset,
+        DBROWCOUNT count, DBCOUNTITEM *obtained, HROW **rows)
+{
+    struct metadata_rowset *rowset = meta_impl_from_IRowset( iface );
+
+    FIXME("%p, %Id, %Id, %Id, %p, %p\n", rowset, reserved, offset, count, obtained, rows);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI metadata_rowset_ReleaseRows(IRowset *iface, DBCOUNTITEM count,
+        const HROW rows[], DBROWOPTIONS options[], DBREFCOUNT ref_counts[], DBROWSTATUS status[])
+{
+    struct metadata_rowset *rowset = meta_impl_from_IRowset( iface );
+
+    FIXME("%p, %Id, %p, %p, %p, %p\n", rowset, count, rows, options, ref_counts, status);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI metadata_rowset_RestartPosition(IRowset *iface, HCHAPTER reserved)
+{
+    struct metadata_rowset *rowset = meta_impl_from_IRowset( iface );
+    FIXME("%p, %Id\n", rowset, reserved);
+    return E_NOTIMPL;
+}
+
+static const struct IRowsetVtbl metadata_rowset_vtbl =
+{
+    metadata_rowset_QueryInterface,
+    metadata_rowset_AddRef,
+    metadata_rowset_Release,
+    metadata_rowset_AddRefRows,
+    metadata_rowset_GetData,
+    metadata_rowset_GetNextRows,
+    metadata_rowset_ReleaseRows,
+    metadata_rowset_RestartPosition
+};
+
 static HRESULT WINAPI column_rs_GetColumnsRowset(IColumnsRowset *iface, IUnknown *outer, DBORDINAL count,
         const DBID columns[], REFIID riid, ULONG property_cnt, DBPROPSET property_sets[], IUnknown **unk_rs)
 {
     struct msdasql_rowset *rowset = impl_from_IColumnsRowset( iface );
-    FIXME("(%p)->(%p, %Id, %p, %s, %lu, %p, %p): stub\n", rowset, outer, count, columns, debugstr_guid(riid),
+    struct metadata_rowset *metadata_rs;
+    HRESULT hr;
+    DBORDINAL i;
+
+    TRACE("(%p)->(%p, %Id, %p, %s, %lu, %p, %p): stub\n", rowset, outer, count, columns, debugstr_guid(riid),
           property_cnt, property_sets, unk_rs);
-    return E_NOTIMPL;
+
+    if (TRACE_ON(msdasql))
+    {
+        for(i=0; i<count; i++)
+        {
+            TRACE("eKind %ld, uName %ld\n", columns[i].eKind, columns[i].uName.ulPropid);
+        }
+    }
+
+    if (property_cnt != 0 || property_sets)
+        FIXME("Property sets currently no supported.\n");
+
+    metadata_rs = malloc(sizeof(*metadata_rs));
+    if (!metadata_rs)
+        return E_OUTOFMEMORY;
+
+    metadata_rs->IRowset_iface.lpVtbl = &metadata_rowset_vtbl;
+    metadata_rs->refs = 1;
+    metadata_rs->dbid_cnt = count;
+    if (count)
+    {
+        metadata_rs->dbids = malloc(sizeof(DBID) * count);
+        if (!metadata_rs->dbids)
+        {
+            free(metadata_rs);
+            return E_OUTOFMEMORY;
+        }
+        memcpy(metadata_rs->dbids, columns, sizeof(DBID) * count);
+    }
+    else
+        metadata_rs->dbids = NULL;
+
+    hr = IUnknown_QueryInterface(&metadata_rs->IRowset_iface, riid, (void**)unk_rs);
+    IUnknown_Release(&metadata_rs->IRowset_iface);
+
+    return hr;
 }
 
 struct IColumnsRowsetVtbl columnrs_rs_vtbl =
-- 
2.42.0

