From 4ee2eebc8aa1b602bcb06e9a809ae97718f81ca3 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Thu, 22 Dec 2022 10:57:39 +1100
Subject: [PATCH 1/2] include: Add dcomp.idl

---
 include/Makefile.in |   1 +
 include/dcomp.idl   | 476 ++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 477 insertions(+)
 create mode 100644 include/dcomp.idl

diff --git a/include/Makefile.in b/include/Makefile.in
index e8bdf82d0a3..555141ba8ec 100644
--- a/include/Makefile.in
+++ b/include/Makefile.in
@@ -182,6 +182,7 @@ SOURCES = \
 	dciddi.h \
 	dciman.h \
 	dcommon.idl \
+	dcomp.idl \
 	dde.h \
 	dde.rh \
 	ddeml.h \
diff --git a/include/dcomp.idl b/include/dcomp.idl
new file mode 100644
index 00000000000..7f2e0c7e601
--- /dev/null
+++ b/include/dcomp.idl
@@ -0,0 +1,476 @@
+/*
+ * Copyright (C) 2022 Alistair Leslie-Hughes
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+import "unknwn.idl";
+import "objidl.idl";
+import "oaidl.idl";
+import "dxgicommon.idl";
+import "dcommon.idl";
+import "d2d1.idl";
+import "dxgi1_2.idl";
+
+typedef struct _D3DMATRIX
+{
+    float m[4][4];
+} D3DMATRIX;
+
+/* Belongs in dcomptypes.h */
+typedef struct
+{
+    LARGE_INTEGER lastFrameTime;
+    DXGI_RATIONAL currentCompositionRate;
+    LARGE_INTEGER currentTime;
+    LARGE_INTEGER timeFrequency;
+    LARGE_INTEGER nextEstimatedFrameTime;
+} DCOMPOSITION_FRAME_STATISTICS;
+
+typedef enum _DCOMPOSITION_BITMAP_INTERPOLATION_MODE
+{
+    DCOMPOSITION_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR,
+    DCOMPOSITION_BITMAP_INTERPOLATION_MODE_LINEAR,
+    DCOMPOSITION_BITMAP_INTERPOLATION_MODE_INHERIT = 0xffffffff
+} DCOMPOSITION_BITMAP_INTERPOLATION_MODE;
+
+typedef enum _DCOMPOSITION_BORDER_MODE
+{
+    DCOMPOSITION_BORDER_MODE_SOFT,
+    DCOMPOSITION_BORDER_MODE_HARD,
+    DCOMPOSITION_BORDER_MODE_INHERIT = 0xffffffff
+} DCOMPOSITION_BORDER_MODE;
+
+typedef enum _DCOMPOSITION_COMPOSITE_MODE
+{
+    DCOMPOSITION_COMPOSITE_MODE_SOURCE_OVER,
+    DCOMPOSITION_COMPOSITE_MODE_DESTINATION_INVERT,
+    DCOMPOSITION_COMPOSITE_MODE_MIN_BLEND,
+    DCOMPOSITION_COMPOSITE_MODE_INHERIT = 0xffffffff
+} DCOMPOSITION_COMPOSITE_MODE;
+
+typedef enum _DCOMPOSITION_OPACITY_MODE
+{
+    DCOMPOSITION_OPACITY_MODE_LAYER,
+    DCOMPOSITION_OPACITY_MODE_MULTIPLY,
+    DCOMPOSITION_OPACITY_MODE_INHERIT = 0xffffffff
+} DCOMPOSITION_OPACITY_MODE;
+
+typedef enum _DCOMPOSITION_BACKFACE_VISIBILITY
+{
+    DCOMPOSITION_BACKFACE_VISIBILITY_VISIBLE,
+    DCOMPOSITION_BACKFACE_VISIBILITY_HIDDEN,
+    DCOMPOSITION_BACKFACE_VISIBILITY_INHERIT = 0xffffffff
+} DCOMPOSITION_BACKFACE_VISIBILITY;
+
+/* End of dcomptypes.h */
+
+
+/* belongs in dcompanimation.idl */
+[
+    local,
+    object,
+    pointer_default(unique),
+    uuid(CBFD91D9-51B2-45e4-B3DE-D19CCFB863C5)
+]
+interface IDCompositionAnimation : IUnknown
+{
+    HRESULT Reset();
+    HRESULT SetAbsoluteBeginTime(LARGE_INTEGER begin);
+    HRESULT AddCubic(double offset, float constant, float linear, float quadratic, float cubic);
+    HRESULT AddSinusoidal(double offset, float bias, float amplitude, float frequency, float phase);
+    HRESULT AddRepeat(double offset, double duration);
+    HRESULT End(double offset, float value);
+}
+
+[
+    local,
+    object,
+    pointer_default(unique),
+    uuid(bb8a4953-2c99-4f5a-96f5-4819027fa3ac)
+]
+interface IDCompositionSurface : IUnknown
+{
+    HRESULT BeginDraw([in, optional] const RECT *rect, [in] REFIID iid, [retval, out]  void **object, [out] POINT *offset);
+    HRESULT EndDraw();
+    HRESULT SuspendDraw();
+    HRESULT ResumeDraw();
+    HRESULT Scroll([in, optional] const RECT *scroll, [in, optional] const RECT *clip, [in] int offset_x,[in] int offset_y);
+};
+
+[
+    local,
+    object,
+    pointer_default(unique),
+    uuid(ae471c51-5f53-4a24-8d3e-d0c39c30b3f0)
+]
+interface IDCompositionVirtualSurface : IDCompositionSurface
+{
+    HRESULT Resize([in] UINT width, [in] UINT height);
+
+    HRESULT Trim([in, optional, size_is(count)] const RECT *rectangles, [in] UINT count);
+};
+
+[
+    local,
+    object,
+    pointer_default(unique),
+    uuid(e334bc12-3937-4e02-85eb-fcf4eb30d2c8)
+]
+interface IDCompositionSurfaceFactory : IUnknown
+{
+    HRESULT CreateSurface([in] UINT width, [in] UINT height, [in] DXGI_FORMAT format, [in] DXGI_ALPHA_MODE mode,
+        [retval, out] IDCompositionSurface **surface);
+    HRESULT CreateVirtualSurface([in] UINT width, [in] UINT height, [in] DXGI_FORMAT format, [in] DXGI_ALPHA_MODE mode,
+        [retval, out] IDCompositionVirtualSurface **surface);
+}
+
+[
+    local,
+    object,
+    pointer_default(unique),
+    uuid(64ac3703-9d3f-45ec-a109-7cac0e7a13a7)
+]
+interface IDCompositionClip : IUnknown
+{
+}
+
+[
+    local,
+    object,
+    pointer_default(unique),
+    uuid(9842ad7d-d9cf-4908-aed7-48b51da5e7c2)
+]
+interface IDCompositionRectangleClip : IDCompositionClip
+{
+    HRESULT SetLeft(float left);
+    HRESULT SetLeftAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetTop(float top);
+    HRESULT SetTopAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetRight(float right);
+    HRESULT SetRightAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetBottom(float bottom);
+    HRESULT SetBottomAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetTopLeftRadiusX(float radius);
+    HRESULT SetTopLeftRadiusXAnimation([in] IDCompositionAnimation *animation);
+    HRESULT SetTopLeftRadiusY(float radius);
+    HRESULT SetTopLeftRadiusYAnimation([in] IDCompositionAnimation *animation);
+    HRESULT SetTopRightRadiusX(float radius);
+    HRESULT SetTopRightRadiusXAnimation([in] IDCompositionAnimation *animation);
+    HRESULT SetTopRightRadiusY(float radius);
+    HRESULT SetTopRightRadiusYAnimation([in] IDCompositionAnimation *animation);
+    HRESULT SetBottomLeftRadiusX(float radius);
+    HRESULT SetBottomLeftRadiusXAnimation([in] IDCompositionAnimation *animation);
+    HRESULT SetBottomLeftRadiusY(float radius);
+    HRESULT SetBottomLeftRadiusYAnimation([in] IDCompositionAnimation *animation);
+    HRESULT SetBottomRightRadiusX(float radius);
+    HRESULT SetBottomRightRadiusXAnimation([in] IDCompositionAnimation *animation);
+    HRESULT SetBottomRightRadiusY(float radius);
+    HRESULT SetBottomRightRadiusYAnimationq([in] IDCompositionAnimation *animation);
+}
+
+[
+    local,
+    object,
+    pointer_default(unique),
+    uuid(ec81b08f-bfcb-4e8d-b193-a915587999e8)
+]
+interface IDCompositionEffect : IUnknown
+{
+}
+
+[
+    local,
+    object,
+    pointer_default(unique),
+    uuid(71185722-246b-41f2-aad1-0443f7f4bfc2)
+]
+interface IDCompositionTransform3D : IDCompositionEffect
+{
+}
+
+[
+    local,
+    object,
+    pointer_default(unique),
+    uuid(a7929a74-e6b2-4bd6-8b95-4040119ca34d)
+]
+interface IDCompositionEffectGroup : IDCompositionEffect
+{
+    HRESULT SetOpacity(float opacity);
+    HRESULT SetOpacityAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetTransform3D([in, optional] IDCompositionTransform3D* transform);
+};
+
+[
+    local,
+    object,
+    pointer_default(unique),
+    uuid(91636d4b-9ba1-4532-aaf7-e3344994d788)
+]
+interface IDCompositionTranslateTransform3D : IDCompositionTransform3D
+{
+    HRESULT SetOffsetX(float offset);
+    HRESULT SetOffsetXAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetOffsetY(float offset);
+    HRESULT SetOffsetYAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetOffsetZ(float offset);
+    HRESULT SetOffsetZAnimation([in] IDCompositionAnimation* animation);
+};
+
+[
+    local,
+    object,
+    pointer_default(unique),
+    uuid(2a9e9ead-364b-4b15-a7c4-a1997f78b389)
+]
+interface IDCompositionScaleTransform3D : IDCompositionTransform3D
+{
+    HRESULT SetScaleX(float scale);
+    HRESULT SetScaleXAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetScaleY(float scale);
+    HRESULT SetScaleYAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetScaleZ(float scale);
+    HRESULT SetScaleZAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetCenterX(float center);
+    HRESULT SetCenterXAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetCenterY(float center);
+    HRESULT SetCenterYAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetCenterZ(float center);
+    HRESULT SetCenterZAnimation([in] IDCompositionAnimation* animation);
+}
+
+[
+    local,
+    object,
+    pointer_default(unique),
+    uuid(d8f5b23f-d429-4a91-b55a-d2f45fd75b18)
+]
+interface IDCompositionRotateTransform3D : IDCompositionTransform3D
+{
+    HRESULT SetScaleX(float scale);
+    HRESULT SetScaleXAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetScaleY(float scale);
+    HRESULT SetScaleYAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetScaleZ(float scale);
+    HRESULT SetScaleZAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetCenterX(float center);
+    HRESULT SetCenterXAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetCenterY(float center);
+    HRESULT SetCenterYAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetCenterZ(float center);
+    HRESULT SetCenterZAnimation([in] IDCompositionAnimation* animation);
+}
+
+[
+    local,
+    object,
+    pointer_default(unique),
+    uuid(4b3363f0-643b-41b7-b6e0-ccf22d34467c)
+]
+interface IDCompositionMatrixTransform3D : IDCompositionTransform3D
+{
+    HRESULT SetMatrix(const D3DMATRIX matrix);
+    HRESULT SetMatrixElement([in] int row, [in] int column, [in] float value);
+    HRESULT SetMatrixElementAnimation([in] int row, [in] int column, [in] IDCompositionAnimation *animation);
+};
+
+[
+    local,
+    object,
+    pointer_default(unique),
+    uuid(fd55faa7-37e0-4c20-95d2-9be45bc33f55)
+]
+interface IDCompositionTransform : IDCompositionTransform3D
+{
+}
+
+[
+    local,
+    object,
+    pointer_default(unique),
+    uuid(71fde914-40ef-45ef-bd51-68b037c339f9)
+]
+interface IDCompositionScaleTransform : IDCompositionTransform
+{
+    HRESULT SetScaleX(float scale);
+    HRESULT SetScaleXAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetScaleY(float scale);
+    HRESULT SetScaleYAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetCenterX(float center);
+    HRESULT SetCenterXAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetCenterY(float center);
+    HRESULT SetCenterYAnimation([in] IDCompositionAnimation* animation);
+};
+
+[
+    local,
+    object,
+    pointer_default(unique),
+    uuid(641ed83c-ae96-46c5-90dc-32774cc5c6d5)
+]
+interface IDCompositionRotateTransform : IDCompositionTransform
+{
+    HRESULT SetAngle(float angle);
+    HRESULT SetAngleAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetCenterX(float centerX);
+    HRESULT SetCenterXAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetCenterY(float centerY);
+    HRESULT SetCenterYAnimation([in] IDCompositionAnimation* animation);
+};
+
+[
+    local,
+    object,
+    pointer_default(unique),
+    uuid(e57aa735-dcdb-4c72-9c61-0591f58889ee)
+]
+interface IDCompositionSkewTransform : IDCompositionTransform
+{
+    HRESULT SetAngleX(float angle);
+    HRESULT SetAngleXAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetAngleY(float angle);
+    HRESULT SetAngleYAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetCenterX(float center);
+    HRESULT SetCenterXAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetCenterY(float center);
+    HRESULT SetCenterYAnimation([in] IDCompositionAnimation* animation);
+};
+
+[
+    local,
+    object,
+    pointer_default(unique),
+    uuid(16cdff07-c503-419c-83f2-0965c7af1fa6)
+]
+interface IDCompositionMatrixTransform : IDCompositionTransform
+{
+    HRESULT SetMatrix(const D2D_MATRIX_3X2_F matrix);
+    HRESULT SetMatrixElement([in] int row, [in] int column, [in] float value);
+    HRESULT SetMatrixElementAnimation([in] int row, [in] int column, [in] IDCompositionAnimation *animation);
+};
+
+[
+    local,
+    object,
+    pointer_default(unique),
+    uuid(06791122-c6f0-417d-8323-269e987f5954)
+]
+interface IDCompositionTranslateTransform : IDCompositionTransform
+{
+    HRESULT SetOffsetX(float offset);
+    HRESULT SetOffsetXAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetOffsetY(float offset);
+    HRESULT SetOffsetYAnimation([in] IDCompositionAnimation* animation);
+};
+
+
+[
+    local,
+    object,
+    pointer_default(unique),
+    uuid(4d93059d-097b-4651-9a60-f0f25116e2f3)
+]
+interface IDCompositionVisual : IUnknown
+{
+    HRESULT SetOffsetX(float offsetX);
+    HRESULT SetOffsetXAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetOffsetY(float offsetY);
+    HRESULT SetOffsetYAnimation([in] IDCompositionAnimation* animation);
+    HRESULT SetTransform(const D2D_MATRIX_3X2_F matrix);
+    HRESULT SetTransformTransform([in, optional] IDCompositionTransform* transform);
+    HRESULT SetTransformParent([in, optional] IDCompositionVisual *visual);
+    HRESULT SetEffect([in, optional] IDCompositionEffect *effect);
+    HRESULT SetBitmapInterpolationMode([in] DCOMPOSITION_BITMAP_INTERPOLATION_MODE mode);
+    HRESULT SetBorderMode([in] DCOMPOSITION_BORDER_MODE mode);
+    HRESULT SetClip(const D2D_RECT_F rect);
+    HRESULT SetClipComposition([in, optional] IDCompositionClip* clip);
+    HRESULT SetContent([in, optional] IUnknown *content);
+    HRESULT AddVisual([in] IDCompositionVisual* visual, [in] BOOL above, [in, optional] IDCompositionVisual* dcompvisual);
+    HRESULT RemoveVisual([in] IDCompositionVisual* visual);
+    HRESULT RemoveAllVisuals();
+    HRESULT SetCompositeMode([in] DCOMPOSITION_COMPOSITE_MODE mode);
+}
+
+[
+    local,
+    object,
+    pointer_default(unique),
+    uuid(e8de1639-4331-4b26-bc5f-6a321d347a85)
+]
+interface IDCompositionVisual2 : IDCompositionVisual
+{
+    HRESULT SetOpacityMode([in] DCOMPOSITION_OPACITY_MODE mode);
+    HRESULT SetBackFaceVisibility([in] DCOMPOSITION_BACKFACE_VISIBILITY visibility);
+}
+
+[
+    local,
+    object,
+    pointer_default(unique),
+    uuid(75f6468d-1b8e-447c-9bc6-75fea80b5b25)
+]
+interface IDCompositionDevice2 : IUnknown
+{
+    HRESULT Commit();
+    HRESULT WaitForCommitCompletion();
+    HRESULT GetFrameStatistics([out] DCOMPOSITION_FRAME_STATISTICS *stats);
+    HRESULT CreateVisual([retval, out] IDCompositionVisual2 **visual);
+    HRESULT CreateSurfaceFactory([in] IUnknown *device, [retval, out] IDCompositionSurfaceFactory **factory);
+    HRESULT CreateSurface([in] UINT width, [in] UINT height, [in] DXGI_FORMAT format, [in] DXGI_ALPHA_MODE mode,
+        [retval, out] IDCompositionSurface **surface);
+    HRESULT CreateVirtualSurface([in] UINT width, [in] UINT height, [in] DXGI_FORMAT format, [in] DXGI_ALPHA_MODE mode,
+        [retval, out] IDCompositionVirtualSurface **surface);
+    HRESULT CreateTranslateTransform([retval, out] IDCompositionTranslateTransform **transform);
+    HRESULT CreateScaleTransform([retval, out] IDCompositionScaleTransform **transform);
+    HRESULT CreateRotateTransform([retval, out] IDCompositionRotateTransform **transform);
+    HRESULT CreateSkewTransform([retval, out] IDCompositionSkewTransform **transform);
+    HRESULT CreateMatrixTransform([retval, out] IDCompositionMatrixTransform **transform);
+    HRESULT CreateTransformGroup([in, size_is(elements)] IDCompositionTransform **transforms, UINT elements,
+        [retval, out] IDCompositionTransform **group);
+    HRESULT CreateTranslateTransform3D([retval, out] IDCompositionTranslateTransform3D **tranform);
+    HRESULT CreateScaleTransform3D([retval, out] IDCompositionScaleTransform3D **transform);
+    HRESULT CreateRotateTransform3D([retval, out] IDCompositionRotateTransform3D **transform);
+    HRESULT CreateMatrixTransform3D([retval, out] IDCompositionMatrixTransform3D **transform);
+    HRESULT CreateTransform3DGroup([in, size_is(elements)] IDCompositionTransform3D **transforms, UINT elements,
+        [retval, out] IDCompositionTransform3D **group);
+    HRESULT CreateEffectGroup([retval, out] IDCompositionEffectGroup **group);
+    HRESULT CreateRectangleClip([retval, out] IDCompositionRectangleClip **clip);
+    HRESULT CreateAnimation([retval, out] IDCompositionAnimation **animation);
+}
+
+[
+    local,
+    object,
+    pointer_default(unique),
+    uuid (eacdd04c-117e-4e17-88f4-d1b12b0e3d89)
+]
+interface IDCompositionTarget : IUnknown
+{
+    HRESULT SetRoot([in, optional] IDCompositionVisual* visual);
+};
+
+[
+    local,
+    object,
+    pointer_default(unique),
+    uuid (5f4633fe-1e08-4cb8-8c75-ce24333f5602)
+]
+interface IDCompositionDesktopDevice : IDCompositionDevice2
+{
+    HRESULT CreateTargetForHwnd([in] HWND hwnd, [in] BOOL topmost, [retval, out] IDCompositionTarget **target);
+    HRESULT CreateSurfaceFromHandle([in] HANDLE handle, [retval, out] IUnknown **surface);
+    HRESULT CreateSurfaceFromHwnd([in] HWND hwnd, [retval, out] IUnknown **surface);
+}
-- 
2.39.0

