From de6ee9b0358cb5d6464808751a9d33ed0564afcd Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Thu, 2 Feb 2023 14:20:44 +1100
Subject: [PATCH 01/42] odbc32: Remove unixODBC support

---
 configure.ac            |    3 -
 dlls/odbc32/Makefile.in |    3 +-
 dlls/odbc32/proxyodbc.c | 1326 +++++++--------------------------------
 dlls/odbc32/unixlib.c   | 1272 -------------------------------------
 dlls/odbc32/unixlib.h   |  278 --------
 include/config.h.in     |    3 -
 6 files changed, 237 insertions(+), 2648 deletions(-)
 delete mode 100644 dlls/odbc32/unixlib.c
 delete mode 100644 dlls/odbc32/unixlib.h

diff --git a/configure.ac b/configure.ac
index 590ef29eb35..1033af2e613 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1768,9 +1768,6 @@ then
                   AC_SUBST(PROCSTAT_LIBS,"-lprocstat")])
 fi
 
-dnl **** Check for libodbc ****
-WINE_CHECK_SONAME(odbc,SQLConnect,,[AC_DEFINE_UNQUOTED(SONAME_LIBODBC,["libodbc.$LIBEXT"])])
-
 dnl **** Check for libnetapi ****
 if test "x$with_netapi" != "xno"
 then
diff --git a/dlls/odbc32/Makefile.in b/dlls/odbc32/Makefile.in
index def7b4b5d67..3d644700c08 100644
--- a/dlls/odbc32/Makefile.in
+++ b/dlls/odbc32/Makefile.in
@@ -4,7 +4,6 @@ IMPORTLIB = odbc32
 IMPORTS   = advapi32
 
 C_SRCS = \
-	proxyodbc.c \
-	unixlib.c
+	proxyodbc.c
 
 RC_SRCS = rsrc.rc
diff --git a/dlls/odbc32/proxyodbc.c b/dlls/odbc32/proxyodbc.c
index 679f3d7380e..e8574430e74 100644
--- a/dlls/odbc32/proxyodbc.c
+++ b/dlls/odbc32/proxyodbc.c
@@ -40,315 +40,19 @@
 #include "sql.h"
 #include "sqltypes.h"
 #include "sqlext.h"
-#include "unixlib.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(odbc);
-WINE_DECLARE_DEBUG_CHANNEL(winediag);
 
-#define ODBC_CALL( func, params ) WINE_UNIX_CALL( unix_ ## func, params )
-
-/***********************************************************************
- * ODBC_ReplicateODBCInstToRegistry
- *
- * PARAMS
- *
- * RETURNS
- *
- * Utility to ODBC_ReplicateToRegistry to replicate the drivers of the
- * ODBCINST.INI settings
- *
- * The driver settings are not replicated to the registry.  If we were to 
- * replicate them we would need to decide whether to replicate all settings
- * or to do some translation; whether to remove any entries present only in
- * the windows registry, etc.
- */
-
-static void ODBC_ReplicateODBCInstToRegistry (SQLHENV hEnv)
-{
-    HKEY hODBCInst;
-    LONG reg_ret;
-    BOOL success;
-
-    success = FALSE;
-    TRACE ("Driver settings are not currently replicated to the registry\n");
-    if ((reg_ret = RegCreateKeyExA (HKEY_LOCAL_MACHINE,
-            "Software\\ODBC\\ODBCINST.INI", 0, NULL,
-            REG_OPTION_NON_VOLATILE,
-            KEY_ALL_ACCESS /* a couple more than we need */, NULL,
-            &hODBCInst, NULL)) == ERROR_SUCCESS)
-    {
-        HKEY hDrivers;
-        if ((reg_ret = RegCreateKeyExA (hODBCInst, "ODBC Drivers", 0,
-                NULL, REG_OPTION_NON_VOLATILE,
-                KEY_ALL_ACCESS /* overkill */, NULL, &hDrivers, NULL))
-                == ERROR_SUCCESS)
-        {
-            SQLRETURN sql_ret;
-            SQLUSMALLINT dirn;
-            CHAR desc [256];
-            SQLSMALLINT sizedesc;
-
-            success = TRUE;
-            dirn = SQL_FETCH_FIRST;
-            while ((sql_ret = SQLDrivers (hEnv, dirn, (SQLCHAR*)desc, sizeof(desc),
-                    &sizedesc, NULL, 0, NULL)) == SQL_SUCCESS ||
-                    sql_ret == SQL_SUCCESS_WITH_INFO)
-            {
-                /* FIXME Do some proper handling of the SUCCESS_WITH_INFO */
-                dirn = SQL_FETCH_NEXT;
-                if (sizedesc == lstrlenA(desc))
-                {
-                    HKEY hThis;
-                    if ((reg_ret = RegQueryValueExA (hDrivers, desc, NULL,
-                            NULL, NULL, NULL)) == ERROR_FILE_NOT_FOUND)
-                    {
-                        if ((reg_ret = RegSetValueExA (hDrivers, desc, 0,
-                                REG_SZ, (const BYTE *)"Installed", 10)) != ERROR_SUCCESS)
-                        {
-                            TRACE ("Error %ld replicating driver %s\n",
-                                    reg_ret, desc);
-                            success = FALSE;
-                        }
-                    }
-                    else if (reg_ret != ERROR_SUCCESS)
-                    {
-                        TRACE ("Error %ld checking for %s in drivers\n",
-                                reg_ret, desc);
-                        success = FALSE;
-                    }
-                    if ((reg_ret = RegCreateKeyExA (hODBCInst, desc, 0,
-                            NULL, REG_OPTION_NON_VOLATILE,
-                            KEY_ALL_ACCESS, NULL, &hThis, NULL))
-                            == ERROR_SUCCESS)
-                    {
-                        /* FIXME This is where the settings go.
-                         * I suggest that if the disposition says it 
-                         * exists then we leave it alone.  Alternatively
-                         * include an extra value to flag that it is 
-                         * a replication of the unixODBC/iODBC/...
-                         */
-                        if ((reg_ret = RegCloseKey (hThis)) !=
-                                ERROR_SUCCESS)
-                            TRACE ("Error %ld closing %s key\n", reg_ret,
-                                    desc);
-                    }
-                    else
-                    {
-                        TRACE ("Error %ld ensuring driver key %s\n",
-                                reg_ret, desc);
-                        success = FALSE;
-                    }
-                }
-                else
-                {
-                    WARN ("Unusually long driver name %s not replicated\n",
-                            desc);
-                    success = FALSE;
-                }
-            }
-            if (sql_ret != SQL_NO_DATA)
-            {
-                TRACE ("Error %d enumerating drivers\n", (int)sql_ret);
-                success = FALSE;
-            }
-            if ((reg_ret = RegCloseKey (hDrivers)) != ERROR_SUCCESS)
-            {
-                TRACE ("Error %ld closing hDrivers\n", reg_ret);
-            }
-        }
-        else
-        {
-            TRACE ("Error %ld opening HKLM\\S\\O\\OI\\Drivers\n", reg_ret);
-        }
-        if ((reg_ret = RegCloseKey (hODBCInst)) != ERROR_SUCCESS)
-        {
-            TRACE ("Error %ld closing HKLM\\S\\O\\ODBCINST.INI\n", reg_ret);
-        }
-    }
-    else
-    {
-        TRACE ("Error %ld opening HKLM\\S\\O\\ODBCINST.INI\n", reg_ret);
-    }
-    if (!success)
-    {
-        WARN ("May not have replicated all ODBC drivers to the registry\n");
-    }
-}
-
-/***********************************************************************
- * ODBC_ReplicateODBCToRegistry
- *
- * PARAMS
- *
- * RETURNS
- *
- * Utility to ODBC_ReplicateToRegistry to replicate either the USER or 
- * SYSTEM dsns
- *
- * For now simply place the "Driver description" (as returned by SQLDataSources)
- * into the registry as the driver.  This is enough to satisfy Crystal's 
- * requirement that there be a driver entry.  (It doesn't seem to care what
- * the setting is).
- * A slightly more accurate setting would be to access the registry to find
- * the actual driver library for the given description (which appears to map
- * to one of the HKLM/Software/ODBC/ODBCINST.INI keys).  (If you do this note
- * that this will add a requirement that this function be called after
- * ODBC_ReplicateODBCInstToRegistry)
- */
-static void ODBC_ReplicateODBCToRegistry (BOOL is_user, SQLHENV hEnv)
-{
-    HKEY hODBC;
-    LONG reg_ret;
-    SQLRETURN sql_ret;
-    SQLUSMALLINT dirn;
-    CHAR dsn [SQL_MAX_DSN_LENGTH + 1];
-    SQLSMALLINT sizedsn;
-    CHAR desc [256];
-    SQLSMALLINT sizedesc;
-    BOOL success;
-    const char *which = is_user ? "user" : "system";
-
-    success = FALSE;
-    if ((reg_ret = RegCreateKeyExA (
-            is_user ? HKEY_CURRENT_USER : HKEY_LOCAL_MACHINE,
-            "Software\\ODBC\\ODBC.INI", 0, NULL, REG_OPTION_NON_VOLATILE,
-            KEY_ALL_ACCESS /* a couple more than we need */, NULL, &hODBC,
-            NULL)) == ERROR_SUCCESS)
-    {
-        success = TRUE;
-        dirn = is_user ? SQL_FETCH_FIRST_USER : SQL_FETCH_FIRST_SYSTEM;
-        while ((sql_ret = SQLDataSources (hEnv, dirn,
-                (SQLCHAR*)dsn, sizeof(dsn), &sizedsn,
-                (SQLCHAR*)desc, sizeof(desc), &sizedesc)) == SQL_SUCCESS
-                || sql_ret == SQL_SUCCESS_WITH_INFO)
-        {
-            /* FIXME Do some proper handling of the SUCCESS_WITH_INFO */
-            dirn = SQL_FETCH_NEXT;
-            if (sizedsn == lstrlenA(dsn) && sizedesc == lstrlenA(desc))
-            {
-                HKEY hDSN;
-                if ((reg_ret = RegCreateKeyExA (hODBC, dsn, 0,
-                        NULL, REG_OPTION_NON_VOLATILE,
-                        KEY_ALL_ACCESS, NULL, &hDSN, NULL))
-                        == ERROR_SUCCESS)
-                {
-                    static const char DRIVERKEY[] = "Driver";
-                    if ((reg_ret = RegQueryValueExA (hDSN, DRIVERKEY,
-                            NULL, NULL, NULL, NULL))
-                            == ERROR_FILE_NOT_FOUND)
-                    {
-                        if ((reg_ret = RegSetValueExA (hDSN, DRIVERKEY, 0,
-                                REG_SZ, (LPBYTE)desc, sizedesc)) != ERROR_SUCCESS)
-                        {
-                            TRACE ("Error %ld replicating description of "
-                                    "%s(%s)\n", reg_ret, dsn, desc);
-                            success = FALSE;
-                        }
-                    }
-                    else if (reg_ret != ERROR_SUCCESS)
-                    {
-                        TRACE ("Error %ld checking for description of %s\n",
-                                reg_ret, dsn);
-                        success = FALSE;
-                    }
-                    if ((reg_ret = RegCloseKey (hDSN)) != ERROR_SUCCESS)
-                    {
-                        TRACE ("Error %ld closing %s DSN key %s\n",
-                                reg_ret, which, dsn);
-                    }
-                }
-                else
-                {
-                    TRACE ("Error %ld opening %s DSN key %s\n",
-                            reg_ret, which, dsn);
-                    success = FALSE;
-                }
-            }
-            else
-            {
-                WARN ("Unusually long %s data source name %s (%s) not "
-                        "replicated\n", which, dsn, desc);
-                success = FALSE;
-            }
-        }
-        if (sql_ret != SQL_NO_DATA)
-        {
-            TRACE ("Error %d enumerating %s datasources\n",
-                    (int)sql_ret, which);
-            success = FALSE;
-        }
-        if ((reg_ret = RegCloseKey (hODBC)) != ERROR_SUCCESS)
-        {
-            TRACE ("Error %ld closing %s ODBC.INI registry key\n", reg_ret,
-                    which);
-        }
-    }
-    else
-    {
-        TRACE ("Error %ld creating/opening %s ODBC.INI registry key\n",
-                reg_ret, which);
-    }
-    if (!success)
-    {
-        WARN ("May not have replicated all %s ODBC DSNs to the registry\n",
-                which);
-    }
-}
-
-/***********************************************************************
- * ODBC_ReplicateToRegistry
- *
- * PARAMS
- *
- * RETURNS
- *
- * Unfortunately some of the functions that Windows documents as being part
- * of the ODBC API it implements directly during compilation or something
- * in terms of registry access functions.
- * e.g. SQLGetInstalledDrivers queries the list at
- * HKEY_LOCAL_MACHINE\Software\ODBC\ODBCINST.INI\ODBC Drivers
- *
- * This function is called when the driver manager is loaded and is used
- * to replicate the appropriate details into the Wine registry
- */
-
-static void ODBC_ReplicateToRegistry (void)
-{
-    SQLRETURN sql_ret;
-    SQLHENV hEnv;
-
-    if ((sql_ret = SQLAllocEnv(&hEnv)) == SQL_SUCCESS)
-    {
-        ODBC_ReplicateODBCInstToRegistry (hEnv);
-        ODBC_ReplicateODBCToRegistry (FALSE /* system dsns */, hEnv);
-        ODBC_ReplicateODBCToRegistry (TRUE /* user dsns */, hEnv);
-
-        if ((sql_ret = SQLFreeEnv(hEnv)) != SQL_SUCCESS)
-        {
-            TRACE ("Error %d freeing the SQL environment.\n", (int)sql_ret);
-        }
-    }
-    else
-    {
-        TRACE ("Error %d opening an SQL environment.\n", (int)sql_ret);
-        WARN ("The external ODBC settings have not been replicated to the"
-                " Wine registry\n");
-    }
-}
 
 /*************************************************************************
  *				SQLAllocConnect           [ODBC32.001]
  */
 SQLRETURN WINAPI SQLAllocConnect(SQLHENV EnvironmentHandle, SQLHDBC *ConnectionHandle)
 {
-    struct SQLAllocConnect_params params = { EnvironmentHandle, ConnectionHandle };
-    SQLRETURN ret;
-
-    TRACE("(EnvironmentHandle %p, ConnectionHandle %p)\n", EnvironmentHandle, ConnectionHandle);
+    SQLRETURN ret = SQL_ERROR;
 
+    FIXME("(EnvironmentHandle %p, ConnectionHandle %p)\n", EnvironmentHandle, ConnectionHandle);
     *ConnectionHandle = SQL_NULL_HDBC;
-    ret = ODBC_CALL( SQLAllocConnect, &params );
-    TRACE("Returning %d, ConnectionHandle %p\n", ret, *ConnectionHandle);
     return ret;
 }
 
@@ -357,14 +61,12 @@ SQLRETURN WINAPI SQLAllocConnect(SQLHENV EnvironmentHandle, SQLHDBC *ConnectionH
  */
 SQLRETURN WINAPI SQLAllocEnv(SQLHENV *EnvironmentHandle)
 {
-    struct SQLAllocEnv_params params = { EnvironmentHandle };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(EnvironmentHandle %p)\n", EnvironmentHandle);
+    FIXME("(EnvironmentHandle %p)\n", EnvironmentHandle);
 
     *EnvironmentHandle = SQL_NULL_HENV;
-    ret = ODBC_CALL( SQLAllocEnv, &params );
-    TRACE("Returning %d, EnvironmentHandle %p\n", ret, *EnvironmentHandle);
+
     return ret;
 }
 
@@ -373,14 +75,11 @@ SQLRETURN WINAPI SQLAllocEnv(SQLHENV *EnvironmentHandle)
  */
 SQLRETURN WINAPI SQLAllocHandle(SQLSMALLINT HandleType, SQLHANDLE InputHandle, SQLHANDLE *OutputHandle)
 {
-    struct SQLAllocHandle_params params = { HandleType, InputHandle, OutputHandle };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(HandleType %d, InputHandle %p, OutputHandle %p)\n", HandleType, InputHandle, OutputHandle);
+    FIXME("(HandleType %d, InputHandle %p, OutputHandle %p)\n", HandleType, InputHandle, OutputHandle);
 
     *OutputHandle = 0;
-    ret = ODBC_CALL( SQLAllocHandle, &params );
-    TRACE("Returning %d, Handle %p\n", ret, *OutputHandle);
     return ret;
 }
 
@@ -389,14 +88,11 @@ SQLRETURN WINAPI SQLAllocHandle(SQLSMALLINT HandleType, SQLHANDLE InputHandle, S
  */
 SQLRETURN WINAPI SQLAllocStmt(SQLHDBC ConnectionHandle, SQLHSTMT *StatementHandle)
 {
-    struct SQLAllocStmt_params params = { ConnectionHandle, StatementHandle };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p, StatementHandle %p)\n", ConnectionHandle, StatementHandle);
+    FIXME("(ConnectionHandle %p, StatementHandle %p)\n", ConnectionHandle, StatementHandle);
 
     *StatementHandle = SQL_NULL_HSTMT;
-    ret = ODBC_CALL( SQLAllocStmt, &params );
-    TRACE ("Returning %d, StatementHandle %p\n", ret, *StatementHandle);
     return ret;
 }
 
@@ -405,14 +101,11 @@ SQLRETURN WINAPI SQLAllocStmt(SQLHDBC ConnectionHandle, SQLHSTMT *StatementHandl
  */
 SQLRETURN WINAPI SQLAllocHandleStd(SQLSMALLINT HandleType, SQLHANDLE InputHandle, SQLHANDLE *OutputHandle)
 {
-    struct SQLAllocHandleStd_params params = { HandleType, InputHandle, OutputHandle };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(HandleType %d, InputHandle %p, OutputHandle %p)\n", HandleType, InputHandle, OutputHandle);
+    FIXME("(HandleType %d, InputHandle %p, OutputHandle %p)\n", HandleType, InputHandle, OutputHandle);
 
     *OutputHandle = 0;
-    ret = ODBC_CALL( SQLAllocHandleStd, &params );
-    TRACE ("Returning %d, OutputHandle %p\n", ret, *OutputHandle);
     return ret;
 }
 
@@ -431,15 +124,11 @@ static const char *debugstr_sqllen( SQLLEN len )
 SQLRETURN WINAPI SQLBindCol(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNumber, SQLSMALLINT TargetType,
                             SQLPOINTER TargetValue, SQLLEN BufferLength, SQLLEN *StrLen_or_Ind)
 {
-    struct SQLBindCol_params params = { StatementHandle, ColumnNumber, TargetType, TargetValue,
-                                        BufferLength, StrLen_or_Ind };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, ColumnNumber %d, TargetType %d, TargetValue %p, BufferLength %s, StrLen_or_Ind %p)\n",
+    FIXME("(StatementHandle %p, ColumnNumber %d, TargetType %d, TargetValue %p, BufferLength %s, StrLen_or_Ind %p)\n",
           StatementHandle, ColumnNumber, TargetType, TargetValue, debugstr_sqllen(BufferLength), StrLen_or_Ind);
 
-    ret = ODBC_CALL( SQLBindCol, &params );
-    TRACE ("Returning %d\n", ret);
     return ret;
 }
 
@@ -459,16 +148,12 @@ SQLRETURN WINAPI SQLBindParam(SQLHSTMT StatementHandle, SQLUSMALLINT ParameterNu
                               SQLSMALLINT ParameterType, SQLULEN LengthPrecision, SQLSMALLINT ParameterScale,
                               SQLPOINTER ParameterValue, SQLLEN *StrLen_or_Ind)
 {
-    struct SQLBindParam_params params = { StatementHandle, ParameterNumber, ValueType, ParameterType,
-                                          LengthPrecision, ParameterScale, ParameterValue, StrLen_or_Ind };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, ParameterNumber %d, ValueType %d, ParameterType %d, LengthPrecision %s,"
+    FIXME("(StatementHandle %p, ParameterNumber %d, ValueType %d, ParameterType %d, LengthPrecision %s,"
           " ParameterScale %d, ParameterValue %p, StrLen_or_Ind %p)\n", StatementHandle, ParameterNumber, ValueType,
           ParameterType, debugstr_sqlulen(LengthPrecision), ParameterScale, ParameterValue, StrLen_or_Ind);
 
-    ret = ODBC_CALL( SQLBindParam, &params );
-    TRACE ("Returning %d\n", ret);
     return ret;
 }
 
@@ -477,13 +162,10 @@ SQLRETURN WINAPI SQLBindParam(SQLHSTMT StatementHandle, SQLUSMALLINT ParameterNu
  */
 SQLRETURN WINAPI SQLCancel(SQLHSTMT StatementHandle)
 {
-    struct SQLCancel_params params = { StatementHandle };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p)\n", StatementHandle);
+    FIXME("(StatementHandle %p)\n", StatementHandle);
 
-    ret = ODBC_CALL( SQLCancel, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -492,13 +174,10 @@ SQLRETURN WINAPI SQLCancel(SQLHSTMT StatementHandle)
  */
 SQLRETURN WINAPI SQLCloseCursor(SQLHSTMT StatementHandle)
 {
-    struct SQLCloseCursor_params params = { StatementHandle };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p)\n", StatementHandle);
+    FIXME("(StatementHandle %p)\n", StatementHandle);
 
-    ret = ODBC_CALL( SQLCloseCursor, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -510,16 +189,12 @@ SQLRETURN WINAPI SQLColAttribute(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNu
                                  SQLSMALLINT BufferLength, SQLSMALLINT *StringLength,
                                  SQLLEN *NumericAttribute)
 {
-    struct SQLColAttribute_params params = { StatementHandle, ColumnNumber, FieldIdentifier,
-                                             CharacterAttribute, BufferLength, StringLength, NumericAttribute };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, ColumnNumber %d, FieldIdentifier %d, CharacterAttribute %p, BufferLength %d,"
+    FIXME("(StatementHandle %p, ColumnNumber %d, FieldIdentifier %d, CharacterAttribute %p, BufferLength %d,"
           " StringLength %p, NumericAttribute %p)\n", StatementHandle, ColumnNumber, FieldIdentifier,
           CharacterAttribute, BufferLength, StringLength, NumericAttribute);
 
-    ret = ODBC_CALL( SQLColAttribute, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -530,19 +205,15 @@ SQLRETURN WINAPI SQLColumns(SQLHSTMT StatementHandle, SQLCHAR *CatalogName, SQLS
                             SQLCHAR *SchemaName, SQLSMALLINT NameLength2, SQLCHAR *TableName,
                             SQLSMALLINT NameLength3, SQLCHAR *ColumnName, SQLSMALLINT NameLength4)
 {
-    struct SQLColumns_params params = { StatementHandle, CatalogName, NameLength1, SchemaName, NameLength2,
-                                        TableName, NameLength3, ColumnName, NameLength4 };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d, TableName %s,"
+    FIXME("(StatementHandle %p, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d, TableName %s,"
           " NameLength3 %d, ColumnName %s, NameLength4 %d)\n", StatementHandle,
           debugstr_an((const char *)CatalogName, NameLength1), NameLength1,
           debugstr_an((const char *)SchemaName, NameLength2), NameLength2,
           debugstr_an((const char *)TableName, NameLength3), NameLength3,
           debugstr_an((const char *)ColumnName, NameLength4), NameLength4);
 
-    ret = ODBC_CALL( SQLColumns, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -553,18 +224,14 @@ SQLRETURN WINAPI SQLConnect(SQLHDBC ConnectionHandle, SQLCHAR *ServerName, SQLSM
                             SQLCHAR *UserName, SQLSMALLINT NameLength2, SQLCHAR *Authentication,
                             SQLSMALLINT NameLength3)
 {
-    struct SQLConnect_params params = { ConnectionHandle, ServerName, NameLength1, UserName, NameLength2,
-                                        Authentication, NameLength3 };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p, ServerName %s, NameLength1 %d, UserName %s, NameLength2 %d, Authentication %s,"
+    FIXME("(ConnectionHandle %p, ServerName %s, NameLength1 %d, UserName %s, NameLength2 %d, Authentication %s,"
           " NameLength3 %d)\n", ConnectionHandle,
           debugstr_an((const char *)ServerName, NameLength1), NameLength1,
           debugstr_an((const char *)UserName, NameLength2), NameLength2,
           debugstr_an((const char *)Authentication, NameLength3), NameLength3);
 
-    ret = ODBC_CALL( SQLConnect, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -573,13 +240,10 @@ SQLRETURN WINAPI SQLConnect(SQLHDBC ConnectionHandle, SQLCHAR *ServerName, SQLSM
  */
 SQLRETURN WINAPI SQLCopyDesc(SQLHDESC SourceDescHandle, SQLHDESC TargetDescHandle)
 {
-    struct SQLCopyDesc_params params = { SourceDescHandle, TargetDescHandle };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(SourceDescHandle %p, TargetDescHandle %p)\n", SourceDescHandle, TargetDescHandle);
+    FIXME("(SourceDescHandle %p, TargetDescHandle %p)\n", SourceDescHandle, TargetDescHandle);
 
-    ret = ODBC_CALL( SQLCopyDesc, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -590,25 +254,12 @@ SQLRETURN WINAPI SQLDataSources(SQLHENV EnvironmentHandle, SQLUSMALLINT Directio
                                 SQLSMALLINT BufferLength1, SQLSMALLINT *NameLength1, SQLCHAR *Description,
                                 SQLSMALLINT BufferLength2, SQLSMALLINT *NameLength2)
 {
-    struct SQLDataSources_params params = { EnvironmentHandle, Direction, ServerName, BufferLength1,
-                                            NameLength1, Description, BufferLength2, NameLength2 };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(EnvironmentHandle %p, Direction %d, ServerName %p, BufferLength1 %d, NameLength1 %p, Description %p,"
+    FIXME("(EnvironmentHandle %p, Direction %d, ServerName %p, BufferLength1 %d, NameLength1 %p, Description %p,"
           " BufferLength2 %d, NameLength2 %p)\n", EnvironmentHandle, Direction, ServerName, BufferLength1,
           NameLength1, Description, BufferLength2, NameLength2);
 
-    ret = ODBC_CALL( SQLDataSources, &params );
-    if (ret >= 0 && TRACE_ON(odbc))
-    {
-        if (ServerName && NameLength1 && *NameLength1 > 0)
-            TRACE(" DataSource %s", debugstr_an((const char *)ServerName, *NameLength1));
-        if (Description && NameLength2 && *NameLength2 > 0)
-            TRACE(" Description %s", debugstr_an((const char *)Description, *NameLength2));
-        TRACE("\n");
-    }
-
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -616,25 +267,12 @@ SQLRETURN WINAPI SQLDataSourcesA(SQLHENV EnvironmentHandle, SQLUSMALLINT Directi
                                  SQLSMALLINT BufferLength1, SQLSMALLINT *NameLength1, SQLCHAR *Description,
                                  SQLSMALLINT BufferLength2, SQLSMALLINT *NameLength2)
 {
-    struct SQLDataSourcesA_params params = { EnvironmentHandle, Direction, ServerName, BufferLength1,
-                                             NameLength1, Description, BufferLength2, NameLength2 };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(EnvironmentHandle %p, Direction %d, ServerName %p, BufferLength1 %d, NameLength1 %p, Description %p,"
+    FIXME("(EnvironmentHandle %p, Direction %d, ServerName %p, BufferLength1 %d, NameLength1 %p, Description %p,"
           " BufferLength2 %d, NameLength2 %p)\n", EnvironmentHandle, Direction, ServerName, BufferLength1,
           NameLength1, Description, BufferLength2, NameLength2);
 
-    ret = ODBC_CALL( SQLDataSourcesA, &params );
-    if (TRACE_ON(odbc))
-    {
-       if (ServerName && NameLength1 && *NameLength1 > 0)
-            TRACE(" DataSource %s", debugstr_an((const char *)ServerName, *NameLength1));
-       if (Description && NameLength2 && *NameLength2 > 0)
-            TRACE(" Description %s", debugstr_an((const char *)Description, *NameLength2));
-       TRACE("\n");
-    }
-
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -645,28 +283,12 @@ SQLRETURN WINAPI SQLDescribeCol(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNum
                                 SQLSMALLINT BufferLength, SQLSMALLINT *NameLength, SQLSMALLINT *DataType,
                                 SQLULEN *ColumnSize, SQLSMALLINT *DecimalDigits, SQLSMALLINT *Nullable)
 {
-    struct SQLDescribeCol_params params = { StatementHandle, ColumnNumber, ColumnName, BufferLength,
-                                            NameLength, DataType, ColumnSize, DecimalDigits, Nullable };
-    SQLSMALLINT dummy;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, ColumnNumber %d, ColumnName %p, BufferLength %d, NameLength %p, DataType %p,"
+    FIXME("(StatementHandle %p, ColumnNumber %d, ColumnName %p, BufferLength %d, NameLength %p, DataType %p,"
           " ColumnSize %p, DecimalDigits %p, Nullable %p)\n", StatementHandle, ColumnNumber, ColumnName,
           BufferLength, NameLength, DataType, ColumnSize, DecimalDigits, Nullable);
 
-    if (!params.NameLength) params.NameLength = &dummy; /* workaround for drivers that don't accept NULL NameLength */
-
-    ret = ODBC_CALL( SQLDescribeCol, &params );
-    if (ret >= 0)
-    {
-        if (ColumnName && NameLength) TRACE(" ColumnName %s\n", debugstr_an((const char *)ColumnName, *NameLength));
-        if (DataType) TRACE(" DataType %d\n", *DataType);
-        if (ColumnSize) TRACE(" ColumnSize %s\n", debugstr_sqlulen(*ColumnSize));
-        if (DecimalDigits) TRACE(" DecimalDigits %d\n", *DecimalDigits);
-        if (Nullable) TRACE(" Nullable %d\n", *Nullable);
-    }
-
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -675,13 +297,10 @@ SQLRETURN WINAPI SQLDescribeCol(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNum
  */
 SQLRETURN WINAPI SQLDisconnect(SQLHDBC ConnectionHandle)
 {
-    struct SQLDisconnect_params params = { ConnectionHandle };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p)\n", ConnectionHandle);
+    FIXME("(ConnectionHandle %p)\n", ConnectionHandle);
 
-    ret = ODBC_CALL( SQLDisconnect, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -690,13 +309,10 @@ SQLRETURN WINAPI SQLDisconnect(SQLHDBC ConnectionHandle)
  */
 SQLRETURN WINAPI SQLEndTran(SQLSMALLINT HandleType, SQLHANDLE Handle, SQLSMALLINT CompletionType)
 {
-    struct SQLEndTran_params params = { HandleType, Handle, CompletionType };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(HandleType %d, Handle %p, CompletionType %d)\n", HandleType, Handle, CompletionType);
+    FIXME("(HandleType %d, Handle %p, CompletionType %d)\n", HandleType, Handle, CompletionType);
 
-    ret = ODBC_CALL( SQLEndTran, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -707,24 +323,12 @@ SQLRETURN WINAPI SQLError(SQLHENV EnvironmentHandle, SQLHDBC ConnectionHandle, S
                           SQLCHAR *Sqlstate, SQLINTEGER *NativeError, SQLCHAR *MessageText,
                           SQLSMALLINT BufferLength, SQLSMALLINT *TextLength)
 {
-    struct SQLError_params params = { EnvironmentHandle, ConnectionHandle, StatementHandle, Sqlstate,
-                                      NativeError, MessageText, BufferLength, TextLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(EnvironmentHandle %p, ConnectionHandle %p, StatementHandle %p, Sqlstate %p, NativeError %p,"
+    FIXME("(EnvironmentHandle %p, ConnectionHandle %p, StatementHandle %p, Sqlstate %p, NativeError %p,"
           " MessageText %p, BufferLength %d, TextLength %p)\n", EnvironmentHandle, ConnectionHandle,
           StatementHandle, Sqlstate, NativeError, MessageText, BufferLength, TextLength);
 
-    ret = ODBC_CALL( SQLError, &params );
-
-    if (ret == SQL_SUCCESS)
-    {
-        TRACE(" SQLState %s\n", debugstr_an((const char *)Sqlstate, 5));
-        TRACE(" Error %d\n", *NativeError);
-        TRACE(" MessageText %s\n", debugstr_an((const char *)MessageText, *TextLength));
-    }
-
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -733,14 +337,11 @@ SQLRETURN WINAPI SQLError(SQLHENV EnvironmentHandle, SQLHDBC ConnectionHandle, S
  */
 SQLRETURN WINAPI SQLExecDirect(SQLHSTMT StatementHandle, SQLCHAR *StatementText, SQLINTEGER TextLength)
 {
-    struct SQLExecDirect_params params = { StatementHandle, StatementText, TextLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, StatementText %s, TextLength %d)\n", StatementHandle,
+    FIXME("(StatementHandle %p, StatementText %s, TextLength %d)\n", StatementHandle,
           debugstr_an((const char *)StatementText, TextLength), TextLength);
 
-    ret = ODBC_CALL( SQLExecDirect, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -749,13 +350,10 @@ SQLRETURN WINAPI SQLExecDirect(SQLHSTMT StatementHandle, SQLCHAR *StatementText,
  */
 SQLRETURN WINAPI SQLExecute(SQLHSTMT StatementHandle)
 {
-    struct SQLExecute_params params = { StatementHandle };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p)\n", StatementHandle);
+    FIXME("(StatementHandle %p)\n", StatementHandle);
 
-    ret = ODBC_CALL( SQLExecute, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -764,13 +362,10 @@ SQLRETURN WINAPI SQLExecute(SQLHSTMT StatementHandle)
  */
 SQLRETURN WINAPI SQLFetch(SQLHSTMT StatementHandle)
 {
-    struct SQLFetch_params params = { StatementHandle };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p)\n", StatementHandle);
+    FIXME("(StatementHandle %p)\n", StatementHandle);
 
-    ret = ODBC_CALL( SQLFetch, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -779,14 +374,11 @@ SQLRETURN WINAPI SQLFetch(SQLHSTMT StatementHandle)
  */
 SQLRETURN WINAPI SQLFetchScroll(SQLHSTMT StatementHandle, SQLSMALLINT FetchOrientation, SQLLEN FetchOffset)
 {
-    struct SQLFetchScroll_params params = { StatementHandle, FetchOrientation, FetchOffset };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, FetchOrientation %d, FetchOffset %s)\n", StatementHandle, FetchOrientation,
+    FIXME("(StatementHandle %p, FetchOrientation %d, FetchOffset %s)\n", StatementHandle, FetchOrientation,
           debugstr_sqllen(FetchOffset));
 
-    ret = ODBC_CALL( SQLFetchScroll, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -795,13 +387,10 @@ SQLRETURN WINAPI SQLFetchScroll(SQLHSTMT StatementHandle, SQLSMALLINT FetchOrien
  */
 SQLRETURN WINAPI SQLFreeConnect(SQLHDBC ConnectionHandle)
 {
-    struct SQLFreeConnect_params params = { ConnectionHandle };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p)\n", ConnectionHandle);
+    FIXME("(ConnectionHandle %p)\n", ConnectionHandle);
 
-    ret = ODBC_CALL( SQLFreeConnect, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -810,13 +399,10 @@ SQLRETURN WINAPI SQLFreeConnect(SQLHDBC ConnectionHandle)
  */
 SQLRETURN WINAPI SQLFreeEnv(SQLHENV EnvironmentHandle)
 {
-    struct SQLFreeEnv_params params = { EnvironmentHandle };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(EnvironmentHandle %p)\n", EnvironmentHandle);
+    FIXME("(EnvironmentHandle %p)\n", EnvironmentHandle);
 
-    ret = ODBC_CALL( SQLFreeEnv, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -825,13 +411,10 @@ SQLRETURN WINAPI SQLFreeEnv(SQLHENV EnvironmentHandle)
  */
 SQLRETURN WINAPI SQLFreeHandle(SQLSMALLINT HandleType, SQLHANDLE Handle)
 {
-    struct SQLFreeHandle_params params = { HandleType, Handle };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(HandleType %d, Handle %p)\n", HandleType, Handle);
+    FIXME("(HandleType %d, Handle %p)\n", HandleType, Handle);
 
-    ret = ODBC_CALL( SQLFreeHandle, &params );
-    TRACE ("Returning %d\n", ret);
     return ret;
 }
 
@@ -840,13 +423,10 @@ SQLRETURN WINAPI SQLFreeHandle(SQLSMALLINT HandleType, SQLHANDLE Handle)
  */
 SQLRETURN WINAPI SQLFreeStmt(SQLHSTMT StatementHandle, SQLUSMALLINT Option)
 {
-    struct SQLFreeStmt_params params = { StatementHandle, Option };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, Option %d)\n", StatementHandle, Option);
+    FIXME("(StatementHandle %p, Option %d)\n", StatementHandle, Option);
 
-    ret = ODBC_CALL( SQLFreeStmt, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -856,14 +436,11 @@ SQLRETURN WINAPI SQLFreeStmt(SQLHSTMT StatementHandle, SQLUSMALLINT Option)
 SQLRETURN WINAPI SQLGetConnectAttr(SQLHDBC ConnectionHandle, SQLINTEGER Attribute, SQLPOINTER Value,
                                    SQLINTEGER BufferLength, SQLINTEGER *StringLength)
 {
-    struct SQLGetConnectAttr_params params = { ConnectionHandle, Attribute, Value, BufferLength, StringLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p, Attribute %d, Value %p, BufferLength %d, StringLength %p)\n", ConnectionHandle,
+    FIXME("(ConnectionHandle %p, Attribute %d, Value %p, BufferLength %d, StringLength %p)\n", ConnectionHandle,
           Attribute, Value, BufferLength, StringLength);
 
-    ret = ODBC_CALL( SQLGetConnectAttr, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -872,13 +449,10 @@ SQLRETURN WINAPI SQLGetConnectAttr(SQLHDBC ConnectionHandle, SQLINTEGER Attribut
  */
 SQLRETURN WINAPI SQLGetConnectOption(SQLHDBC ConnectionHandle, SQLUSMALLINT Option, SQLPOINTER Value)
 {
-    struct SQLGetConnectOption_params params = { ConnectionHandle, Option, Value };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p, Option %d, Value %p)\n", ConnectionHandle, Option, Value);
+    FIXME("(ConnectionHandle %p, Option %d, Value %p)\n", ConnectionHandle, Option, Value);
 
-    ret = ODBC_CALL( SQLGetConnectOption, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -888,14 +462,11 @@ SQLRETURN WINAPI SQLGetConnectOption(SQLHDBC ConnectionHandle, SQLUSMALLINT Opti
 SQLRETURN WINAPI SQLGetCursorName(SQLHSTMT StatementHandle, SQLCHAR *CursorName, SQLSMALLINT BufferLength,
                                   SQLSMALLINT *NameLength)
 {
-    struct SQLGetCursorName_params params = { StatementHandle, CursorName, BufferLength, NameLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, CursorName %p, BufferLength %d, NameLength %p)\n", StatementHandle, CursorName,
+    FIXME("(StatementHandle %p, CursorName %p, BufferLength %d, NameLength %p)\n", StatementHandle, CursorName,
           BufferLength, NameLength);
 
-    ret = ODBC_CALL( SQLGetCursorName, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -905,15 +476,11 @@ SQLRETURN WINAPI SQLGetCursorName(SQLHSTMT StatementHandle, SQLCHAR *CursorName,
 SQLRETURN WINAPI SQLGetData(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNumber, SQLSMALLINT TargetType,
                             SQLPOINTER TargetValue, SQLLEN BufferLength, SQLLEN *StrLen_or_Ind)
 {
-    struct SQLGetData_params params = { StatementHandle, ColumnNumber, TargetType, TargetValue,
-                                        BufferLength, StrLen_or_Ind };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, ColumnNumber %d, TargetType %d, TargetValue %p, BufferLength %s, StrLen_or_Ind %p)\n",
+    FIXME("(StatementHandle %p, ColumnNumber %d, TargetType %d, TargetValue %p, BufferLength %s, StrLen_or_Ind %p)\n",
           StatementHandle, ColumnNumber, TargetType, TargetValue, debugstr_sqllen(BufferLength), StrLen_or_Ind);
 
-    ret = ODBC_CALL( SQLGetData, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -923,15 +490,11 @@ SQLRETURN WINAPI SQLGetData(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNumber,
 SQLRETURN WINAPI SQLGetDescField(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber, SQLSMALLINT FieldIdentifier,
                                  SQLPOINTER Value, SQLINTEGER BufferLength, SQLINTEGER *StringLength)
 {
-    struct SQLGetDescField_params params = { DescriptorHandle, RecNumber, FieldIdentifier, Value,
-                                             BufferLength, StringLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(DescriptorHandle %p, RecNumber %d, FieldIdentifier %d, Value %p, BufferLength %d, StringLength %p)\n",
+    FIXME("(DescriptorHandle %p, RecNumber %d, FieldIdentifier %d, Value %p, BufferLength %d, StringLength %p)\n",
           DescriptorHandle, RecNumber, FieldIdentifier, Value, BufferLength, StringLength);
 
-    ret = ODBC_CALL( SQLGetDescField, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -943,16 +506,12 @@ SQLRETURN WINAPI SQLGetDescRec(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber,
                                SQLSMALLINT *SubType, SQLLEN *Length, SQLSMALLINT *Precision,
                                SQLSMALLINT *Scale, SQLSMALLINT *Nullable)
 {
-    struct SQLGetDescRec_params params = { DescriptorHandle, RecNumber, Name, BufferLength, StringLength,
-                                           Type, SubType, Length, Precision, Scale, Nullable };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(DescriptorHandle %p, RecNumber %d, Name %p, BufferLength %d, StringLength %p, Type %p, SubType %p,"
+    FIXME("(DescriptorHandle %p, RecNumber %d, Name %p, BufferLength %d, StringLength %p, Type %p, SubType %p,"
           " Length %p, Precision %p, Scale %p, Nullable %p)\n", DescriptorHandle, RecNumber, Name, BufferLength,
           StringLength, Type, SubType, Length, Precision, Scale, Nullable);
 
-    ret = ODBC_CALL( SQLGetDescRec, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -963,15 +522,11 @@ SQLRETURN WINAPI SQLGetDiagField(SQLSMALLINT HandleType, SQLHANDLE Handle, SQLSM
                                  SQLSMALLINT DiagIdentifier, SQLPOINTER DiagInfo, SQLSMALLINT BufferLength,
                                  SQLSMALLINT *StringLength)
 {
-    struct SQLGetDiagField_params params = { HandleType, Handle, RecNumber, DiagIdentifier, DiagInfo,
-                                             BufferLength, StringLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(HandleType %d, Handle %p, RecNumber %d, DiagIdentifier %d, DiagInfo %p, BufferLength %d,"
+    FIXME("(HandleType %d, Handle %p, RecNumber %d, DiagIdentifier %d, DiagInfo %p, BufferLength %d,"
           " StringLength %p)\n", HandleType, Handle, RecNumber, DiagIdentifier, DiagInfo, BufferLength, StringLength);
 
-    ret = ODBC_CALL( SQLGetDiagField, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -982,16 +537,12 @@ SQLRETURN WINAPI SQLGetDiagRec(SQLSMALLINT HandleType, SQLHANDLE Handle, SQLSMAL
                                SQLCHAR *Sqlstate, SQLINTEGER *NativeError, SQLCHAR *MessageText,
                                SQLSMALLINT BufferLength, SQLSMALLINT *TextLength)
 {
-    struct SQLGetDiagRec_params params = { HandleType, Handle, RecNumber, Sqlstate, NativeError,
-                                           MessageText, BufferLength, TextLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(HandleType %d, Handle %p, RecNumber %d, Sqlstate %p, NativeError %p, MessageText %p, BufferLength %d,"
+    FIXME("(HandleType %d, Handle %p, RecNumber %d, Sqlstate %p, NativeError %p, MessageText %p, BufferLength %d,"
           " TextLength %p)\n", HandleType, Handle, RecNumber, Sqlstate, NativeError, MessageText, BufferLength,
           TextLength);
 
-    ret = ODBC_CALL( SQLGetDiagRec, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1001,14 +552,11 @@ SQLRETURN WINAPI SQLGetDiagRec(SQLSMALLINT HandleType, SQLHANDLE Handle, SQLSMAL
 SQLRETURN WINAPI SQLGetEnvAttr(SQLHENV EnvironmentHandle, SQLINTEGER Attribute, SQLPOINTER Value,
                                SQLINTEGER BufferLength, SQLINTEGER *StringLength)
 {
-    struct SQLGetEnvAttr_params params = { EnvironmentHandle, Attribute, Value, BufferLength, StringLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(EnvironmentHandle %p, Attribute %d, Value %p, BufferLength %d, StringLength %p)\n",
+    FIXME("(EnvironmentHandle %p, Attribute %d, Value %p, BufferLength %d, StringLength %p)\n",
           EnvironmentHandle, Attribute, Value, BufferLength, StringLength);
 
-    ret = ODBC_CALL( SQLGetEnvAttr, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1017,13 +565,10 @@ SQLRETURN WINAPI SQLGetEnvAttr(SQLHENV EnvironmentHandle, SQLINTEGER Attribute,
  */
 SQLRETURN WINAPI SQLGetFunctions(SQLHDBC ConnectionHandle, SQLUSMALLINT FunctionId, SQLUSMALLINT *Supported)
 {
-    struct SQLGetFunctions_params params = { ConnectionHandle, FunctionId, Supported };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p, FunctionId %d, Supported %p)\n", ConnectionHandle, FunctionId, Supported);
+    FIXME("(ConnectionHandle %p, FunctionId %d, Supported %p)\n", ConnectionHandle, FunctionId, Supported);
 
-    ret = ODBC_CALL( SQLGetFunctions, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1033,14 +578,11 @@ SQLRETURN WINAPI SQLGetFunctions(SQLHDBC ConnectionHandle, SQLUSMALLINT Function
 SQLRETURN WINAPI SQLGetInfo(SQLHDBC ConnectionHandle, SQLUSMALLINT InfoType, SQLPOINTER InfoValue,
                             SQLSMALLINT BufferLength, SQLSMALLINT *StringLength)
 {
-    struct SQLGetInfo_params params = { ConnectionHandle, InfoType, InfoValue, BufferLength, StringLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle, %p, InfoType %d, InfoValue %p, BufferLength %d, StringLength %p)\n", ConnectionHandle,
+    FIXME("(ConnectionHandle, %p, InfoType %d, InfoValue %p, BufferLength %d, StringLength %p)\n", ConnectionHandle,
           InfoType, InfoValue, BufferLength, StringLength);
 
-    ret = ODBC_CALL( SQLGetInfo, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1050,10 +592,9 @@ SQLRETURN WINAPI SQLGetInfo(SQLHDBC ConnectionHandle, SQLUSMALLINT InfoType, SQL
 SQLRETURN WINAPI SQLGetStmtAttr(SQLHSTMT StatementHandle, SQLINTEGER Attribute, SQLPOINTER Value,
                                 SQLINTEGER BufferLength, SQLINTEGER *StringLength)
 {
-    struct SQLGetStmtAttr_params params = { StatementHandle, Attribute, Value, BufferLength, StringLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, Attribute %d, Value %p, BufferLength %d, StringLength %p)\n", StatementHandle,
+    FIXME("(StatementHandle %p, Attribute %d, Value %p, BufferLength %d, StringLength %p)\n", StatementHandle,
           Attribute, Value, BufferLength, StringLength);
 
     if (!Value)
@@ -1062,8 +603,6 @@ SQLRETURN WINAPI SQLGetStmtAttr(SQLHSTMT StatementHandle, SQLINTEGER Attribute,
         return SQL_ERROR;
     }
 
-    ret = ODBC_CALL( SQLGetStmtAttr, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1072,13 +611,10 @@ SQLRETURN WINAPI SQLGetStmtAttr(SQLHSTMT StatementHandle, SQLINTEGER Attribute,
  */
 SQLRETURN WINAPI SQLGetStmtOption(SQLHSTMT StatementHandle, SQLUSMALLINT Option, SQLPOINTER Value)
 {
-    struct SQLGetStmtOption_params params = { StatementHandle, Option, Value };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, Option %d, Value %p)\n", StatementHandle, Option, Value);
+    FIXME("(StatementHandle %p, Option %d, Value %p)\n", StatementHandle, Option, Value);
 
-    ret = ODBC_CALL( SQLGetStmtOption, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1087,13 +623,10 @@ SQLRETURN WINAPI SQLGetStmtOption(SQLHSTMT StatementHandle, SQLUSMALLINT Option,
  */
 SQLRETURN WINAPI SQLGetTypeInfo(SQLHSTMT StatementHandle, SQLSMALLINT DataType)
 {
-    struct SQLGetTypeInfo_params params = { StatementHandle, DataType };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, DataType %d)\n", StatementHandle, DataType);
+    FIXME("(StatementHandle %p, DataType %d)\n", StatementHandle, DataType);
 
-    ret = ODBC_CALL( SQLGetTypeInfo, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1102,13 +635,10 @@ SQLRETURN WINAPI SQLGetTypeInfo(SQLHSTMT StatementHandle, SQLSMALLINT DataType)
  */
 SQLRETURN WINAPI SQLNumResultCols(SQLHSTMT StatementHandle, SQLSMALLINT *ColumnCount)
 {
-    struct SQLNumResultCols_params params = { StatementHandle, ColumnCount };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, ColumnCount %p)\n", StatementHandle, ColumnCount);
+    FIXME("(StatementHandle %p, ColumnCount %p)\n", StatementHandle, ColumnCount);
 
-    ret = ODBC_CALL( SQLNumResultCols, &params );
-    TRACE("Returning %d ColumnCount %d\n", ret, *ColumnCount);
     return ret;
 }
 
@@ -1117,13 +647,10 @@ SQLRETURN WINAPI SQLNumResultCols(SQLHSTMT StatementHandle, SQLSMALLINT *ColumnC
  */
 SQLRETURN WINAPI SQLParamData(SQLHSTMT StatementHandle, SQLPOINTER *Value)
 {
-    struct SQLParamData_params params = { StatementHandle, Value };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, Value %p)\n", StatementHandle, Value);
+    FIXME("(StatementHandle %p, Value %p)\n", StatementHandle, Value);
 
-    ret = ODBC_CALL( SQLParamData, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1132,14 +659,11 @@ SQLRETURN WINAPI SQLParamData(SQLHSTMT StatementHandle, SQLPOINTER *Value)
  */
 SQLRETURN WINAPI SQLPrepare(SQLHSTMT StatementHandle, SQLCHAR *StatementText, SQLINTEGER TextLength)
 {
-    struct SQLPrepare_params params = { StatementHandle, StatementText, TextLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, StatementText %s, TextLength %d)\n", StatementHandle,
+    FIXME("(StatementHandle %p, StatementText %s, TextLength %d)\n", StatementHandle,
           debugstr_an((const char *)StatementText, TextLength), TextLength);
 
-    ret = ODBC_CALL( SQLPrepare, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1148,13 +672,10 @@ SQLRETURN WINAPI SQLPrepare(SQLHSTMT StatementHandle, SQLCHAR *StatementText, SQ
  */
 SQLRETURN WINAPI SQLPutData(SQLHSTMT StatementHandle, SQLPOINTER Data, SQLLEN StrLen_or_Ind)
 {
-    struct SQLPutData_params params = { StatementHandle, Data, StrLen_or_Ind };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, Data %p, StrLen_or_Ind %s)\n", StatementHandle, Data, debugstr_sqllen(StrLen_or_Ind));
+    FIXME("(StatementHandle %p, Data %p, StrLen_or_Ind %s)\n", StatementHandle, Data, debugstr_sqllen(StrLen_or_Ind));
 
-    ret = ODBC_CALL( SQLPutData, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1163,14 +684,10 @@ SQLRETURN WINAPI SQLPutData(SQLHSTMT StatementHandle, SQLPOINTER Data, SQLLEN St
  */
 SQLRETURN WINAPI SQLRowCount(SQLHSTMT StatementHandle, SQLLEN *RowCount)
 {
-    struct SQLRowCount_params params = { StatementHandle, RowCount };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, RowCount %p)\n", StatementHandle, RowCount);
+    FIXME("(StatementHandle %p, RowCount %p)\n", StatementHandle, RowCount);
 
-    ret = ODBC_CALL( SQLRowCount, &params );
-    if (ret == SQL_SUCCESS && RowCount) TRACE(" RowCount %s\n", debugstr_sqllen(*RowCount));
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1180,14 +697,11 @@ SQLRETURN WINAPI SQLRowCount(SQLHSTMT StatementHandle, SQLLEN *RowCount)
 SQLRETURN WINAPI SQLSetConnectAttr(SQLHDBC ConnectionHandle, SQLINTEGER Attribute, SQLPOINTER Value,
                                    SQLINTEGER StringLength)
 {
-    struct SQLSetConnectAttr_params params = { ConnectionHandle, Attribute, Value, StringLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p, Attribute %d, Value %p, StringLength %d)\n", ConnectionHandle, Attribute, Value,
+    FIXME("(ConnectionHandle %p, Attribute %d, Value %p, StringLength %d)\n", ConnectionHandle, Attribute, Value,
           StringLength);
 
-    ret = ODBC_CALL( SQLSetConnectAttr, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1196,13 +710,10 @@ SQLRETURN WINAPI SQLSetConnectAttr(SQLHDBC ConnectionHandle, SQLINTEGER Attribut
  */
 SQLRETURN WINAPI SQLSetConnectOption(SQLHDBC ConnectionHandle, SQLUSMALLINT Option, SQLULEN Value)
 {
-    struct SQLSetConnectOption_params params = { ConnectionHandle, Option, Value };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p, Option %d, Value %s)\n", ConnectionHandle, Option, debugstr_sqlulen(Value));
+    FIXME("(ConnectionHandle %p, Option %d, Value %s)\n", ConnectionHandle, Option, debugstr_sqlulen(Value));
 
-    ret = ODBC_CALL( SQLSetConnectOption, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1211,14 +722,11 @@ SQLRETURN WINAPI SQLSetConnectOption(SQLHDBC ConnectionHandle, SQLUSMALLINT Opti
  */
 SQLRETURN WINAPI SQLSetCursorName(SQLHSTMT StatementHandle, SQLCHAR *CursorName, SQLSMALLINT NameLength)
 {
-    struct SQLSetCursorName_params params = { StatementHandle, CursorName, NameLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, CursorName %s, NameLength %d)\n", StatementHandle,
+    FIXME("(StatementHandle %p, CursorName %s, NameLength %d)\n", StatementHandle,
           debugstr_an((const char *)CursorName, NameLength), NameLength);
 
-    ret = ODBC_CALL( SQLSetCursorName, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1228,14 +736,11 @@ SQLRETURN WINAPI SQLSetCursorName(SQLHSTMT StatementHandle, SQLCHAR *CursorName,
 SQLRETURN WINAPI SQLSetDescField(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber, SQLSMALLINT FieldIdentifier,
                                  SQLPOINTER Value, SQLINTEGER BufferLength)
 {
-    struct SQLSetDescField_params params = { DescriptorHandle, RecNumber, FieldIdentifier, Value, BufferLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(DescriptorHandle %p, RecNumber %d, FieldIdentifier %d, Value %p, BufferLength %d)\n", DescriptorHandle,
+    FIXME("(DescriptorHandle %p, RecNumber %d, FieldIdentifier %d, Value %p, BufferLength %d)\n", DescriptorHandle,
           RecNumber, FieldIdentifier, Value, BufferLength);
 
-    ret = ODBC_CALL( SQLSetDescField, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1246,15 +751,12 @@ SQLRETURN WINAPI SQLSetDescRec(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber,
                                SQLSMALLINT SubType, SQLLEN Length, SQLSMALLINT Precision, SQLSMALLINT Scale,
                                SQLPOINTER Data, SQLLEN *StringLength, SQLLEN *Indicator)
 {
-    struct SQLSetDescRec_params params = { DescriptorHandle, RecNumber, Type, SubType, Length, Precision, Scale, Data, StringLength, Indicator };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(DescriptorHandle %p, RecNumber %d, Type %d, SubType %d, Length %s, Precision %d, Scale %d, Data %p,"
+    FIXME("(DescriptorHandle %p, RecNumber %d, Type %d, SubType %d, Length %s, Precision %d, Scale %d, Data %p,"
           " StringLength %p, Indicator %p)\n", DescriptorHandle, RecNumber, Type, SubType, debugstr_sqllen(Length),
           Precision, Scale, Data, StringLength, Indicator);
 
-    ret = ODBC_CALL( SQLSetDescRec, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1264,14 +766,11 @@ SQLRETURN WINAPI SQLSetDescRec(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber,
 SQLRETURN WINAPI SQLSetEnvAttr(SQLHENV EnvironmentHandle, SQLINTEGER Attribute, SQLPOINTER Value,
                                SQLINTEGER StringLength)
 {
-    struct SQLSetEnvAttr_params params = { EnvironmentHandle, Attribute, Value, StringLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(EnvironmentHandle %p, Attribute %d, Value %p, StringLength %d)\n", EnvironmentHandle, Attribute, Value,
+    FIXME("(EnvironmentHandle %p, Attribute %d, Value %p, StringLength %d)\n", EnvironmentHandle, Attribute, Value,
           StringLength);
 
-    ret = ODBC_CALL( SQLSetEnvAttr, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1282,16 +781,12 @@ SQLRETURN WINAPI SQLSetParam(SQLHSTMT StatementHandle, SQLUSMALLINT ParameterNum
                              SQLSMALLINT ParameterType, SQLULEN LengthPrecision, SQLSMALLINT ParameterScale,
                              SQLPOINTER ParameterValue, SQLLEN *StrLen_or_Ind)
 {
-    struct SQLSetParam_params params = { StatementHandle, ParameterNumber, ValueType, ParameterType,
-                                         LengthPrecision, ParameterScale, ParameterValue, StrLen_or_Ind };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, ParameterNumber %d, ValueType %d, ParameterType %d, LengthPrecision %s,"
+    FIXME("(StatementHandle %p, ParameterNumber %d, ValueType %d, ParameterType %d, LengthPrecision %s,"
           " ParameterScale %d, ParameterValue %p, StrLen_or_Ind %p)\n", StatementHandle, ParameterNumber, ValueType,
           ParameterType, debugstr_sqlulen(LengthPrecision), ParameterScale, ParameterValue, StrLen_or_Ind);
 
-    ret = ODBC_CALL( SQLSetParam, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1301,14 +796,11 @@ SQLRETURN WINAPI SQLSetParam(SQLHSTMT StatementHandle, SQLUSMALLINT ParameterNum
 SQLRETURN WINAPI SQLSetStmtAttr(SQLHSTMT StatementHandle, SQLINTEGER Attribute, SQLPOINTER Value,
                                 SQLINTEGER StringLength)
 {
-    struct SQLSetStmtAttr_params params = { StatementHandle, Attribute, Value, StringLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, Attribute %d, Value %p, StringLength %d)\n", StatementHandle, Attribute, Value,
+    FIXME("(StatementHandle %p, Attribute %d, Value %p, StringLength %d)\n", StatementHandle, Attribute, Value,
           StringLength);
 
-    ret = ODBC_CALL( SQLSetStmtAttr, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1317,13 +809,10 @@ SQLRETURN WINAPI SQLSetStmtAttr(SQLHSTMT StatementHandle, SQLINTEGER Attribute,
  */
 SQLRETURN WINAPI SQLSetStmtOption(SQLHSTMT StatementHandle, SQLUSMALLINT Option, SQLULEN Value)
 {
-    struct SQLSetStmtOption_params params = { StatementHandle, Option, Value };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, Option %d, Value %s)\n", StatementHandle, Option, debugstr_sqlulen(Value));
+    FIXME("(StatementHandle %p, Option %d, Value %s)\n", StatementHandle, Option, debugstr_sqlulen(Value));
 
-    ret = ODBC_CALL( SQLSetStmtOption, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1335,18 +824,14 @@ SQLRETURN WINAPI SQLSpecialColumns(SQLHSTMT StatementHandle, SQLUSMALLINT Identi
                                    SQLCHAR *TableName, SQLSMALLINT NameLength3, SQLUSMALLINT Scope,
                                    SQLUSMALLINT Nullable)
 {
-    struct SQLSpecialColumns_params params = { StatementHandle, IdentifierType, CatalogName, NameLength1,
-                                               SchemaName, NameLength2, TableName, NameLength3, Scope, Nullable };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, IdentifierType %d, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d,"
+    FIXME("(StatementHandle %p, IdentifierType %d, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d,"
           " TableName %s, NameLength3 %d, Scope %d, Nullable %d)\n", StatementHandle, IdentifierType,
           debugstr_an((const char *)CatalogName, NameLength1), NameLength1,
           debugstr_an((const char *)SchemaName, NameLength2), NameLength2,
           debugstr_an((const char *)TableName, NameLength3), NameLength3, Scope, Nullable);
 
-    ret = ODBC_CALL( SQLSpecialColumns, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1357,18 +842,14 @@ SQLRETURN WINAPI SQLStatistics(SQLHSTMT StatementHandle, SQLCHAR *CatalogName, S
                                SQLCHAR *SchemaName, SQLSMALLINT NameLength2, SQLCHAR *TableName,
                                SQLSMALLINT NameLength3, SQLUSMALLINT Unique, SQLUSMALLINT Reserved)
 {
-    struct SQLStatistics_params params = { StatementHandle, CatalogName, NameLength1, SchemaName,
-                                           NameLength2, TableName, NameLength3, Unique, Reserved };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, CatalogName %s, NameLength1 %d SchemaName %s, NameLength2 %d, TableName %s"
+    FIXME("(StatementHandle %p, CatalogName %s, NameLength1 %d SchemaName %s, NameLength2 %d, TableName %s"
           " NameLength3 %d, Unique %d, Reserved %d)\n", StatementHandle,
           debugstr_an((const char *)CatalogName, NameLength1), NameLength1,
           debugstr_an((const char *)SchemaName, NameLength2), NameLength2,
           debugstr_an((const char *)TableName, NameLength3), NameLength3, Unique, Reserved);
 
-    ret = ODBC_CALL( SQLStatistics, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1379,19 +860,15 @@ SQLRETURN WINAPI SQLTables(SQLHSTMT StatementHandle, SQLCHAR *CatalogName, SQLSM
                            SQLCHAR *SchemaName, SQLSMALLINT NameLength2, SQLCHAR *TableName,
                            SQLSMALLINT NameLength3, SQLCHAR *TableType, SQLSMALLINT NameLength4)
 {
-    struct SQLTables_params params = { StatementHandle, CatalogName, NameLength1, SchemaName, NameLength2,
-                                       TableName, NameLength3, TableType, NameLength4 };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d, TableName %s,"
+    FIXME("(StatementHandle %p, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d, TableName %s,"
           " NameLength3 %d, TableType %s, NameLength4 %d)\n", StatementHandle,
           debugstr_an((const char *)CatalogName, NameLength1), NameLength1,
           debugstr_an((const char *)SchemaName, NameLength2), NameLength2,
           debugstr_an((const char *)TableName, NameLength3), NameLength3,
           debugstr_an((const char *)TableType, NameLength4), NameLength4);
 
-    ret = ODBC_CALL( SQLTables, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1400,14 +877,11 @@ SQLRETURN WINAPI SQLTables(SQLHSTMT StatementHandle, SQLCHAR *CatalogName, SQLSM
  */
 SQLRETURN WINAPI SQLTransact(SQLHENV EnvironmentHandle, SQLHDBC ConnectionHandle, SQLUSMALLINT CompletionType)
 {
-    struct SQLTransact_params params = { EnvironmentHandle, ConnectionHandle, CompletionType };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(EnvironmentHandle %p, ConnectionHandle %p, CompletionType %d)\n", EnvironmentHandle, ConnectionHandle,
+    FIXME("(EnvironmentHandle %p, ConnectionHandle %p, CompletionType %d)\n", EnvironmentHandle, ConnectionHandle,
           CompletionType);
 
-    ret = ODBC_CALL( SQLTransact, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1418,16 +892,12 @@ SQLRETURN WINAPI SQLBrowseConnect(SQLHDBC hdbc, SQLCHAR *szConnStrIn, SQLSMALLIN
                                   SQLCHAR *szConnStrOut, SQLSMALLINT cbConnStrOutMax,
                                   SQLSMALLINT *pcbConnStrOut)
 {
-    struct SQLBrowseConnect_params params = { hdbc, szConnStrIn, cbConnStrIn, szConnStrOut,
-                                              cbConnStrOutMax, pcbConnStrOut };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(hdbc %p, szConnStrIn %s, cbConnStrIn %d, szConnStrOut %p, cbConnStrOutMax %d, pcbConnStrOut %p)\n",
+    FIXME("(hdbc %p, szConnStrIn %s, cbConnStrIn %d, szConnStrOut %p, cbConnStrOutMax %d, pcbConnStrOut %p)\n",
           hdbc, debugstr_an((const char *)szConnStrIn, cbConnStrIn), cbConnStrIn, szConnStrOut, cbConnStrOutMax,
           pcbConnStrOut);
 
-    ret = ODBC_CALL( SQLBrowseConnect, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1436,13 +906,10 @@ SQLRETURN WINAPI SQLBrowseConnect(SQLHDBC hdbc, SQLCHAR *szConnStrIn, SQLSMALLIN
  */
 SQLRETURN WINAPI SQLBulkOperations(SQLHSTMT StatementHandle, SQLSMALLINT Operation)
 {
-    struct SQLBulkOperations_params params = { StatementHandle, Operation };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, Operation %d)\n", StatementHandle, Operation);
+    FIXME("(StatementHandle %p, Operation %d)\n", StatementHandle, Operation);
 
-    ret = ODBC_CALL( SQLBulkOperations, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1453,14 +920,11 @@ SQLRETURN WINAPI SQLColAttributes(SQLHSTMT hstmt, SQLUSMALLINT icol, SQLUSMALLIN
                                   SQLPOINTER rgbDesc, SQLSMALLINT cbDescMax, SQLSMALLINT *pcbDesc,
                                   SQLLEN *pfDesc)
 {
-    struct SQLColAttributes_params params = { hstmt, icol, fDescType, rgbDesc, cbDescMax, pcbDesc, pfDesc };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(hstmt %p, icol %d, fDescType %d, rgbDesc %p, cbDescMax %d, pcbDesc %p, pfDesc %p)\n", hstmt, icol,
+    FIXME("(hstmt %p, icol %d, fDescType %d, rgbDesc %p, cbDescMax %d, pcbDesc %p, pfDesc %p)\n", hstmt, icol,
           fDescType, rgbDesc, cbDescMax, pcbDesc, pfDesc);
 
-    ret = ODBC_CALL( SQLColAttributes, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1471,19 +935,15 @@ SQLRETURN WINAPI SQLColumnPrivileges(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQL
                                      SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szTableName,
                                      SQLSMALLINT cbTableName, SQLCHAR *szColumnName, SQLSMALLINT cbColumnName)
 {
-    struct SQLColumnPrivileges_params params = { hstmt, szCatalogName, cbCatalogName, szSchemaName,
-                                                 cbSchemaName, szTableName, cbTableName, szColumnName, cbColumnName };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szTableName %s,"
+    FIXME("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szTableName %s,"
           " cbTableName %d, szColumnName %s, cbColumnName %d)\n", hstmt,
           debugstr_an((const char *)szCatalogName, cbCatalogName), cbCatalogName,
           debugstr_an((const char *)szSchemaName, cbSchemaName), cbSchemaName,
           debugstr_an((const char *)szTableName, cbTableName), cbTableName,
           debugstr_an((const char *)szColumnName, cbColumnName), cbColumnName);
 
-    ret = ODBC_CALL( SQLColumnPrivileges, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1493,14 +953,11 @@ SQLRETURN WINAPI SQLColumnPrivileges(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQL
 SQLRETURN WINAPI SQLDescribeParam(SQLHSTMT hstmt, SQLUSMALLINT ipar, SQLSMALLINT *pfSqlType,
                                   SQLULEN *pcbParamDef, SQLSMALLINT *pibScale, SQLSMALLINT *pfNullable)
 {
-    struct SQLDescribeParam_params params = { hstmt, ipar, pfSqlType, pcbParamDef, pibScale, pfNullable };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(hstmt %p, ipar %d, pfSqlType %p, pcbParamDef %p, pibScale %p, pfNullable %p)\n", hstmt, ipar,
+    FIXME("(hstmt %p, ipar %d, pfSqlType %p, pcbParamDef %p, pibScale %p, pfNullable %p)\n", hstmt, ipar,
           pfSqlType, pcbParamDef, pibScale, pfNullable);
 
-    ret = ODBC_CALL( SQLDescribeParam, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1510,14 +967,11 @@ SQLRETURN WINAPI SQLDescribeParam(SQLHSTMT hstmt, SQLUSMALLINT ipar, SQLSMALLINT
 SQLRETURN WINAPI SQLExtendedFetch(SQLHSTMT hstmt, SQLUSMALLINT fFetchType, SQLLEN irow, SQLULEN *pcrow,
                                   SQLUSMALLINT *rgfRowStatus)
 {
-    struct SQLExtendedFetch_params params = { hstmt, fFetchType, irow, pcrow, rgfRowStatus };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(hstmt %p, fFetchType %d, irow %s, pcrow %p, rgfRowStatus %p)\n", hstmt, fFetchType, debugstr_sqllen(irow),
+    FIXME("(hstmt %p, fFetchType %d, irow %s, pcrow %p, rgfRowStatus %p)\n", hstmt, fFetchType, debugstr_sqllen(irow),
           pcrow, rgfRowStatus);
 
-    ret = ODBC_CALL( SQLExtendedFetch, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1530,13 +984,9 @@ SQLRETURN WINAPI SQLForeignKeys(SQLHSTMT hstmt, SQLCHAR *szPkCatalogName, SQLSMA
                                 SQLSMALLINT cbFkCatalogName, SQLCHAR *szFkSchemaName,
                                 SQLSMALLINT cbFkSchemaName, SQLCHAR *szFkTableName, SQLSMALLINT cbFkTableName)
 {
-    struct SQLForeignKeys_params params = { hstmt, szPkCatalogName, cbPkCatalogName, szPkSchemaName,
-                                            cbPkSchemaName, szPkTableName, cbPkTableName, szFkCatalogName,
-                                            cbFkCatalogName, szFkSchemaName, cbFkSchemaName,
-                                            szFkTableName, cbFkTableName };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(hstmt %p, szPkCatalogName %s, cbPkCatalogName %d, szPkSchemaName %s, cbPkSchemaName %d,"
+    FIXME("(hstmt %p, szPkCatalogName %s, cbPkCatalogName %d, szPkSchemaName %s, cbPkSchemaName %d,"
           " szPkTableName %s, cbPkTableName %d, szFkCatalogName %s, cbFkCatalogName %d, szFkSchemaName %s,"
           " cbFkSchemaName %d, szFkTableName %s, cbFkTableName %d)\n", hstmt,
           debugstr_an((const char *)szPkCatalogName, cbPkCatalogName), cbPkCatalogName,
@@ -1546,8 +996,6 @@ SQLRETURN WINAPI SQLForeignKeys(SQLHSTMT hstmt, SQLCHAR *szPkCatalogName, SQLSMA
           debugstr_an((const char *)szFkSchemaName, cbFkSchemaName), cbFkSchemaName,
           debugstr_an((const char *)szFkTableName, cbFkTableName), cbFkTableName);
 
-    ret = ODBC_CALL( SQLForeignKeys, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1556,13 +1004,10 @@ SQLRETURN WINAPI SQLForeignKeys(SQLHSTMT hstmt, SQLCHAR *szPkCatalogName, SQLSMA
  */
 SQLRETURN WINAPI SQLMoreResults(SQLHSTMT StatementHandle)
 {
-    struct SQLMoreResults_params params = { StatementHandle };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(%p)\n", StatementHandle);
+    FIXME("(%p)\n", StatementHandle);
 
-    ret = ODBC_CALL( SQLMoreResults, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1572,14 +1017,11 @@ SQLRETURN WINAPI SQLMoreResults(SQLHSTMT StatementHandle)
 SQLRETURN WINAPI SQLNativeSql(SQLHDBC hdbc, SQLCHAR *szSqlStrIn, SQLINTEGER cbSqlStrIn, SQLCHAR *szSqlStr,
                               SQLINTEGER cbSqlStrMax, SQLINTEGER *pcbSqlStr)
 {
-    struct SQLNativeSql_params params = { hdbc, szSqlStrIn, cbSqlStrIn, szSqlStr, cbSqlStrMax, pcbSqlStr };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(hdbc %p, szSqlStrIn %s, cbSqlStrIn %d, szSqlStr %p, cbSqlStrMax %d, pcbSqlStr %p)\n", hdbc,
+    FIXME("(hdbc %p, szSqlStrIn %s, cbSqlStrIn %d, szSqlStr %p, cbSqlStrMax %d, pcbSqlStr %p)\n", hdbc,
           debugstr_an((const char *)szSqlStrIn, cbSqlStrIn), cbSqlStrIn, szSqlStr, cbSqlStrMax, pcbSqlStr);
 
-    ret = ODBC_CALL( SQLNativeSql, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1588,13 +1030,10 @@ SQLRETURN WINAPI SQLNativeSql(SQLHDBC hdbc, SQLCHAR *szSqlStrIn, SQLINTEGER cbSq
  */
 SQLRETURN WINAPI SQLNumParams(SQLHSTMT hstmt, SQLSMALLINT *pcpar)
 {
-    struct SQLNumParams_params params = { hstmt, pcpar };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(hstmt %p, pcpar %p)\n", hstmt, pcpar);
+    FIXME("(hstmt %p, pcpar %p)\n", hstmt, pcpar);
 
-    ret = ODBC_CALL( SQLNumParams, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1603,13 +1042,10 @@ SQLRETURN WINAPI SQLNumParams(SQLHSTMT hstmt, SQLSMALLINT *pcpar)
  */
 SQLRETURN WINAPI SQLParamOptions(SQLHSTMT hstmt, SQLULEN crow, SQLULEN *pirow)
 {
-    struct SQLParamOptions_params params = { hstmt, crow, pirow };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(hstmt %p, crow %s, pirow %p)\n", hstmt, debugstr_sqlulen(crow), pirow);
+    FIXME("(hstmt %p, crow %s, pirow %p)\n", hstmt, debugstr_sqlulen(crow), pirow);
 
-    ret = ODBC_CALL( SQLParamOptions, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1620,18 +1056,14 @@ SQLRETURN WINAPI SQLPrimaryKeys(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQLSMALL
                                 SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szTableName,
                                 SQLSMALLINT cbTableName)
 {
-    struct SQLPrimaryKeys_params params = { hstmt, szCatalogName, cbCatalogName, szSchemaName,
-                                            cbSchemaName, szTableName, cbTableName };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szTableName %s,"
+    FIXME("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szTableName %s,"
           " cbTableName %d)\n", hstmt,
           debugstr_an((const char *)szCatalogName, cbCatalogName), cbCatalogName,
           debugstr_an((const char *)szSchemaName, cbSchemaName), cbSchemaName,
           debugstr_an((const char *)szTableName, cbTableName), cbTableName);
 
-    ret = ODBC_CALL( SQLPrimaryKeys, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1642,20 +1074,15 @@ SQLRETURN WINAPI SQLProcedureColumns(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQL
                                      SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szProcName,
                                      SQLSMALLINT cbProcName, SQLCHAR *szColumnName, SQLSMALLINT cbColumnName)
 {
-    struct SQLProcedureColumns_params params = { hstmt, szCatalogName, cbCatalogName, szSchemaName,
-                                                 cbSchemaName, szProcName, cbProcName,
-                                                 szColumnName, cbColumnName };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szProcName %s,"
+    FIXME("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szProcName %s,"
           " cbProcName %d, szColumnName %s, cbColumnName %d)\n", hstmt,
           debugstr_an((const char *)szCatalogName, cbCatalogName), cbCatalogName,
           debugstr_an((const char *)szSchemaName, cbSchemaName), cbSchemaName,
           debugstr_an((const char *)szProcName, cbProcName), cbProcName,
           debugstr_an((const char *)szColumnName, cbColumnName), cbColumnName);
 
-    ret = ODBC_CALL( SQLProcedureColumns, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1666,18 +1093,14 @@ SQLRETURN WINAPI SQLProcedures(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQLSMALLI
                                SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szProcName,
                                SQLSMALLINT cbProcName)
 {
-    struct SQLProcedures_params params = { hstmt, szCatalogName, cbCatalogName, szSchemaName,
-                                           cbSchemaName, szProcName, cbProcName };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szProcName %s,"
+    FIXME("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szProcName %s,"
           " cbProcName %d)\n", hstmt,
           debugstr_an((const char *)szCatalogName, cbCatalogName), cbCatalogName,
           debugstr_an((const char *)szSchemaName, cbSchemaName), cbSchemaName,
           debugstr_an((const char *)szProcName, cbProcName), cbProcName);
 
-    ret = ODBC_CALL( SQLProcedures, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1686,13 +1109,10 @@ SQLRETURN WINAPI SQLProcedures(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQLSMALLI
  */
 SQLRETURN WINAPI SQLSetPos(SQLHSTMT hstmt, SQLSETPOSIROW irow, SQLUSMALLINT fOption, SQLUSMALLINT fLock)
 {
-    struct SQLSetPos_params params = { hstmt, irow, fOption, fLock };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(hstmt %p, irow %s, fOption %d, fLock %d)\n", hstmt, debugstr_sqlulen(irow), fOption, fLock);
+    FIXME("(hstmt %p, irow %s, fOption %d, fLock %d)\n", hstmt, debugstr_sqlulen(irow), fOption, fLock);
 
-    ret = ODBC_CALL( SQLSetPos, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1703,18 +1123,14 @@ SQLRETURN WINAPI SQLTablePrivileges(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQLS
                                     SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szTableName,
                                     SQLSMALLINT cbTableName)
 {
-    struct SQLTablePrivileges_params params = { hstmt, szCatalogName, cbCatalogName, szSchemaName,
-                                                cbSchemaName, szTableName, cbTableName };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szTableName %s,"
+    FIXME("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szTableName %s,"
           " cbTableName %d)\n", hstmt,
           debugstr_an((const char *)szCatalogName, cbCatalogName), cbCatalogName,
           debugstr_an((const char *)szSchemaName, cbSchemaName), cbSchemaName,
           debugstr_an((const char *)szTableName, cbTableName), cbTableName);
 
-    ret = ODBC_CALL( SQLTablePrivileges, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1726,20 +1142,12 @@ SQLRETURN WINAPI SQLDrivers(SQLHENV EnvironmentHandle, SQLUSMALLINT fDirection,
                             SQLCHAR *szDriverAttributes, SQLSMALLINT cbDriverAttrMax,
                             SQLSMALLINT *pcbDriverAttr)
 {
-    struct SQLDrivers_params params = { EnvironmentHandle, fDirection, szDriverDesc, cbDriverDescMax,
-                                        pcbDriverDesc, szDriverAttributes, cbDriverAttrMax, pcbDriverAttr };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(EnvironmentHandle %p, Direction %d, szDriverDesc %p, cbDriverDescMax %d, pcbDriverDesc %p,"
+    FIXME("(EnvironmentHandle %p, Direction %d, szDriverDesc %p, cbDriverDescMax %d, pcbDriverDesc %p,"
           " DriverAttributes %p, cbDriverAttrMax %d, pcbDriverAttr %p)\n", EnvironmentHandle, fDirection,
           szDriverDesc, cbDriverDescMax, pcbDriverDesc, szDriverAttributes, cbDriverAttrMax, pcbDriverAttr);
 
-    ret = ODBC_CALL( SQLDrivers, &params );
-
-    if (ret == SQL_NO_DATA && fDirection == SQL_FETCH_FIRST)
-        ERR_(winediag)("No ODBC drivers could be found. Check the settings for your libodbc provider.\n");
-
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1751,16 +1159,12 @@ SQLRETURN WINAPI SQLBindParameter(SQLHSTMT hstmt, SQLUSMALLINT ipar, SQLSMALLINT
                                   SQLSMALLINT ibScale, SQLPOINTER rgbValue, SQLLEN cbValueMax,
                                   SQLLEN *pcbValue)
 {
-    struct SQLBindParameter_params params = { hstmt, ipar, fParamType, fCType, fSqlType, cbColDef,
-                                              ibScale, rgbValue, cbValueMax, pcbValue };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(hstmt %p, ipar %d, fParamType %d, fCType %d, fSqlType %d, cbColDef %s, ibScale %d, rgbValue %p,"
+    FIXME("(hstmt %p, ipar %d, fParamType %d, fCType %d, fSqlType %d, cbColDef %s, ibScale %d, rgbValue %p,"
           " cbValueMax %s, pcbValue %p)\n", hstmt, ipar, fParamType, fCType, fSqlType, debugstr_sqlulen(cbColDef),
           ibScale, rgbValue, debugstr_sqllen(cbValueMax), pcbValue);
 
-    ret = ODBC_CALL( SQLBindParameter, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1771,17 +1175,13 @@ SQLRETURN WINAPI SQLDriverConnect(SQLHDBC hdbc, SQLHWND hwnd, SQLCHAR *Connectio
                                   SQLCHAR *conn_str_out, SQLSMALLINT conn_str_out_max,
                                   SQLSMALLINT *ptr_conn_str_out, SQLUSMALLINT driver_completion)
 {
-    struct SQLDriverConnect_params params = { hdbc, hwnd, ConnectionString, Length, conn_str_out,
-                                              conn_str_out_max, ptr_conn_str_out, driver_completion };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(hdbc %p, hwnd %p, ConnectionString %s, Length %d, conn_str_out %p, conn_str_out_max %d,"
+    FIXME("(hdbc %p, hwnd %p, ConnectionString %s, Length %d, conn_str_out %p, conn_str_out_max %d,"
           " ptr_conn_str_out %p, driver_completion %d)\n", hdbc, hwnd,
           debugstr_an((const char *)ConnectionString, Length), Length, conn_str_out, conn_str_out_max,
           ptr_conn_str_out, driver_completion);
 
-    ret = ODBC_CALL( SQLDriverConnect, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1791,47 +1191,14 @@ SQLRETURN WINAPI SQLDriverConnect(SQLHDBC hdbc, SQLHWND hwnd, SQLCHAR *Connectio
 SQLRETURN WINAPI SQLSetScrollOptions(SQLHSTMT statement_handle, SQLUSMALLINT f_concurrency, SQLLEN crow_keyset,
                                      SQLUSMALLINT crow_rowset)
 {
-    struct SQLSetScrollOptions_params params = { statement_handle, f_concurrency, crow_keyset, crow_rowset };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(statement_handle %p, f_concurrency %d, crow_keyset %s, crow_rowset %d)\n", statement_handle,
+    FIXME("(statement_handle %p, f_concurrency %d, crow_keyset %s, crow_rowset %d)\n", statement_handle,
           f_concurrency, debugstr_sqllen(crow_keyset), crow_rowset);
 
-    ret = ODBC_CALL( SQLSetScrollOptions, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
-static BOOL SQLColAttributes_KnownStringAttribute(SQLUSMALLINT fDescType)
-{
-    static const SQLUSMALLINT attrList[] =
-    {
-        SQL_COLUMN_OWNER_NAME,
-        SQL_COLUMN_QUALIFIER_NAME,
-        SQL_COLUMN_LABEL,
-        SQL_COLUMN_NAME,
-        SQL_COLUMN_TABLE_NAME,
-        SQL_COLUMN_TYPE_NAME,
-        SQL_DESC_BASE_COLUMN_NAME,
-        SQL_DESC_BASE_TABLE_NAME,
-        SQL_DESC_CATALOG_NAME,
-        SQL_DESC_LABEL,
-        SQL_DESC_LITERAL_PREFIX,
-        SQL_DESC_LITERAL_SUFFIX,
-        SQL_DESC_LOCAL_TYPE_NAME,
-        SQL_DESC_NAME,
-        SQL_DESC_SCHEMA_NAME,
-        SQL_DESC_TABLE_NAME,
-        SQL_DESC_TYPE_NAME,
-    };
-    unsigned int i;
-
-    for (i = 0; i < ARRAY_SIZE(attrList); i++) {
-        if (attrList[i] == fDescType) return TRUE;
-    }
-    return FALSE;
-}
-
 /*************************************************************************
  *				SQLColAttributesW          [ODBC32.106]
  */
@@ -1839,22 +1206,11 @@ SQLRETURN WINAPI SQLColAttributesW(SQLHSTMT hstmt, SQLUSMALLINT icol, SQLUSMALLI
                                    SQLPOINTER rgbDesc, SQLSMALLINT cbDescMax, SQLSMALLINT *pcbDesc,
                                    SQLLEN *pfDesc)
 {
-    struct SQLColAttributesW_params params = { hstmt, icol, fDescType, rgbDesc, cbDescMax, pcbDesc, pfDesc };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(hstmt %p, icol %d, fDescType %d, rgbDesc %p, cbDescMax %d, pcbDesc %p, pfDesc %p)\n", hstmt, icol,
+    FIXME("(hstmt %p, icol %d, fDescType %d, rgbDesc %p, cbDescMax %d, pcbDesc %p, pfDesc %p)\n", hstmt, icol,
           fDescType, rgbDesc, cbDescMax, pcbDesc, pfDesc);
 
-    ret = ODBC_CALL( SQLColAttributesW, &params );
-
-    if (ret == SQL_SUCCESS && SQLColAttributes_KnownStringAttribute(fDescType) && rgbDesc && pcbDesc &&
-        *pcbDesc != lstrlenW(rgbDesc) * 2)
-    {
-        TRACE("CHEAT: resetting name length for ADO\n");
-        *pcbDesc = lstrlenW(rgbDesc) * 2;
-    }
-
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1865,16 +1221,12 @@ SQLRETURN WINAPI SQLConnectW(SQLHDBC ConnectionHandle, WCHAR *ServerName, SQLSMA
                              WCHAR *UserName, SQLSMALLINT NameLength2, WCHAR *Authentication,
                              SQLSMALLINT NameLength3)
 {
-    struct SQLConnectW_params params = { ConnectionHandle, ServerName, NameLength1, UserName, NameLength2,
-                                         Authentication, NameLength3 };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p, ServerName %s, NameLength1 %d, UserName %s, NameLength2 %d, Authentication %s,"
+    FIXME("(ConnectionHandle %p, ServerName %s, NameLength1 %d, UserName %s, NameLength2 %d, Authentication %s,"
           " NameLength3 %d)\n", ConnectionHandle, debugstr_wn(ServerName, NameLength1), NameLength1,
           debugstr_wn(UserName, NameLength2), NameLength2, debugstr_wn(Authentication, NameLength3), NameLength3);
 
-    ret = ODBC_CALL( SQLConnectW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1885,28 +1237,15 @@ SQLRETURN WINAPI SQLDescribeColW(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNu
                                  SQLSMALLINT BufferLength, SQLSMALLINT *NameLength, SQLSMALLINT *DataType,
                                  SQLULEN *ColumnSize, SQLSMALLINT *DecimalDigits, SQLSMALLINT *Nullable)
 {
-    struct SQLDescribeColW_params params = { StatementHandle, ColumnNumber, ColumnName, BufferLength,
-                                             NameLength, DataType, ColumnSize, DecimalDigits, Nullable };
     SQLSMALLINT dummy;
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, ColumnNumber %d, ColumnName %p, BufferLength %d, NameLength %p, DataType %p,"
+    FIXME("(StatementHandle %p, ColumnNumber %d, ColumnName %p, BufferLength %d, NameLength %p, DataType %p,"
           " ColumnSize %p, DecimalDigits %p, Nullable %p)\n", StatementHandle, ColumnNumber, ColumnName,
           BufferLength, NameLength, DataType, ColumnSize, DecimalDigits, Nullable);
 
     if (!NameLength) NameLength = &dummy; /* workaround for drivers that don't accept NULL NameLength */
 
-    ret = ODBC_CALL( SQLDescribeColW, &params );
-    if (ret >= 0)
-    {
-        if (ColumnName && NameLength) TRACE("ColumnName %s\n", debugstr_wn(ColumnName, *NameLength));
-        if (DataType) TRACE("DataType %d\n", *DataType);
-        if (ColumnSize) TRACE("ColumnSize %s\n", debugstr_sqlulen(*ColumnSize));
-        if (DecimalDigits) TRACE("DecimalDigits %d\n", *DecimalDigits);
-        if (Nullable) TRACE("Nullable %d\n", *Nullable);
-    }
-
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1917,24 +1256,12 @@ SQLRETURN WINAPI SQLErrorW(SQLHENV EnvironmentHandle, SQLHDBC ConnectionHandle,
                            WCHAR *Sqlstate, SQLINTEGER *NativeError, WCHAR *MessageText,
                            SQLSMALLINT BufferLength, SQLSMALLINT *TextLength)
 {
-    struct SQLErrorW_params params = { EnvironmentHandle, ConnectionHandle, StatementHandle, Sqlstate,
-                                       NativeError, MessageText, BufferLength, TextLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(EnvironmentHandle %p, ConnectionHandle %p, StatementHandle %p, Sqlstate %p, NativeError %p,"
+    FIXME("(EnvironmentHandle %p, ConnectionHandle %p, StatementHandle %p, Sqlstate %p, NativeError %p,"
           " MessageText %p, BufferLength %d, TextLength %p)\n", EnvironmentHandle, ConnectionHandle,
           StatementHandle, Sqlstate, NativeError, MessageText, BufferLength, TextLength);
 
-    ret = ODBC_CALL( SQLErrorW, &params );
-
-    if (ret == SQL_SUCCESS)
-    {
-        TRACE(" SQLState %s\n", debugstr_wn(Sqlstate, 5));
-        TRACE(" Error %d\n", *NativeError);
-        TRACE(" MessageText %s\n", debugstr_wn(MessageText, *TextLength));
-    }
-
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1943,14 +1270,11 @@ SQLRETURN WINAPI SQLErrorW(SQLHENV EnvironmentHandle, SQLHDBC ConnectionHandle,
  */
 SQLRETURN WINAPI SQLExecDirectW(SQLHSTMT StatementHandle, WCHAR *StatementText, SQLINTEGER TextLength)
 {
-    struct SQLExecDirectW_params params = { StatementHandle, StatementText, TextLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, StatementText %s, TextLength %d)\n", StatementHandle,
+    FIXME("(StatementHandle %p, StatementText %s, TextLength %d)\n", StatementHandle,
           debugstr_wn(StatementText, TextLength), TextLength);
 
-    ret = ODBC_CALL( SQLExecDirectW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1960,14 +1284,11 @@ SQLRETURN WINAPI SQLExecDirectW(SQLHSTMT StatementHandle, WCHAR *StatementText,
 SQLRETURN WINAPI SQLGetCursorNameW(SQLHSTMT StatementHandle, WCHAR *CursorName, SQLSMALLINT BufferLength,
                                    SQLSMALLINT *NameLength)
 {
-    struct SQLGetCursorNameW_params params = { StatementHandle, CursorName, BufferLength, NameLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, CursorName %p, BufferLength %d, NameLength %p)\n", StatementHandle, CursorName,
+    FIXME("(StatementHandle %p, CursorName %p, BufferLength %d, NameLength %p)\n", StatementHandle, CursorName,
           BufferLength, NameLength);
 
-    ret = ODBC_CALL( SQLGetCursorNameW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1976,14 +1297,11 @@ SQLRETURN WINAPI SQLGetCursorNameW(SQLHSTMT StatementHandle, WCHAR *CursorName,
  */
 SQLRETURN WINAPI SQLPrepareW(SQLHSTMT StatementHandle, WCHAR *StatementText, SQLINTEGER TextLength)
 {
-    struct SQLPrepareW_params params = { StatementHandle, StatementText, TextLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, StatementText %s, TextLength %d)\n", StatementHandle,
+    FIXME("(StatementHandle %p, StatementText %s, TextLength %d)\n", StatementHandle,
           debugstr_wn(StatementText, TextLength), TextLength);
 
-    ret = ODBC_CALL( SQLPrepareW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -1992,14 +1310,11 @@ SQLRETURN WINAPI SQLPrepareW(SQLHSTMT StatementHandle, WCHAR *StatementText, SQL
  */
 SQLRETURN WINAPI SQLSetCursorNameW(SQLHSTMT StatementHandle, WCHAR *CursorName, SQLSMALLINT NameLength)
 {
-    struct SQLSetCursorNameW_params params = { StatementHandle, CursorName, NameLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, CursorName %s, NameLength %d)\n", StatementHandle,
+    FIXME("(StatementHandle %p, CursorName %s, NameLength %d)\n", StatementHandle,
           debugstr_wn(CursorName, NameLength), NameLength);
 
-    ret = ODBC_CALL( SQLSetCursorNameW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2011,25 +1326,12 @@ SQLRETURN WINAPI SQLColAttributeW(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnN
                                   SQLSMALLINT BufferLength, SQLSMALLINT *StringLength,
                                   SQLLEN *NumericAttribute)
 {
-    struct SQLColAttributeW_params params = { StatementHandle, ColumnNumber, FieldIdentifier,
-                                              CharacterAttribute, BufferLength, StringLength,
-                                              NumericAttribute };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("StatementHandle %p ColumnNumber %d FieldIdentifier %d CharacterAttribute %p BufferLength %d"
+    FIXME("StatementHandle %p ColumnNumber %d FieldIdentifier %d CharacterAttribute %p BufferLength %d"
           " StringLength %p NumericAttribute %p\n", StatementHandle, ColumnNumber, FieldIdentifier,
           CharacterAttribute, BufferLength, StringLength, NumericAttribute);
 
-    ret = ODBC_CALL( SQLColAttributeW, &params );
-
-    if (ret == SQL_SUCCESS && CharacterAttribute != NULL && SQLColAttributes_KnownStringAttribute(FieldIdentifier) &&
-        StringLength && *StringLength != lstrlenW(CharacterAttribute) * 2)
-    {
-        TRACE("CHEAT: resetting name length for ADO\n");
-        *StringLength = lstrlenW(CharacterAttribute) * 2;
-    }
-
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2039,15 +1341,11 @@ SQLRETURN WINAPI SQLColAttributeW(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnN
 SQLRETURN WINAPI SQLGetConnectAttrW(SQLHDBC ConnectionHandle, SQLINTEGER Attribute, SQLPOINTER Value,
                                     SQLINTEGER BufferLength, SQLINTEGER *StringLength)
 {
-    struct SQLGetConnectAttrW_params params = { ConnectionHandle, Attribute, Value,
-                                                BufferLength, StringLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p, Attribute %d, Value %p, BufferLength %d, StringLength %p)\n", ConnectionHandle,
+    FIXME("(ConnectionHandle %p, Attribute %d, Value %p, BufferLength %d, StringLength %p)\n", ConnectionHandle,
           Attribute, Value, BufferLength, StringLength);
 
-    ret = ODBC_CALL( SQLGetConnectAttrW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2057,15 +1355,11 @@ SQLRETURN WINAPI SQLGetConnectAttrW(SQLHDBC ConnectionHandle, SQLINTEGER Attribu
 SQLRETURN WINAPI SQLGetDescFieldW(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber, SQLSMALLINT FieldIdentifier,
                                   SQLPOINTER Value, SQLINTEGER BufferLength, SQLINTEGER *StringLength)
 {
-    struct SQLGetDescFieldW_params params = { DescriptorHandle, RecNumber, FieldIdentifier, Value,
-                                              BufferLength, StringLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(DescriptorHandle %p, RecNumber %d, FieldIdentifier %d, Value %p, BufferLength %d, StringLength %p)\n",
+    FIXME("(DescriptorHandle %p, RecNumber %d, FieldIdentifier %d, Value %p, BufferLength %d, StringLength %p)\n",
           DescriptorHandle, RecNumber, FieldIdentifier, Value, BufferLength, StringLength);
 
-    ret = ODBC_CALL( SQLGetDescFieldW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2077,16 +1371,12 @@ SQLRETURN WINAPI SQLGetDescRecW(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber
                                 SQLSMALLINT *SubType, SQLLEN *Length, SQLSMALLINT *Precision,
                                 SQLSMALLINT *Scale, SQLSMALLINT *Nullable)
 {
-    struct SQLGetDescRecW_params params = { DescriptorHandle, RecNumber, Name, BufferLength, StringLength,
-                                            Type, SubType, Length, Precision, Scale, Nullable };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(DescriptorHandle %p, RecNumber %d, Name %p, BufferLength %d, StringLength %p, Type %p, SubType %p,"
+    FIXME("(DescriptorHandle %p, RecNumber %d, Name %p, BufferLength %d, StringLength %p, Type %p, SubType %p,"
           " Length %p, Precision %p, Scale %p, Nullable %p)\n", DescriptorHandle, RecNumber, Name, BufferLength,
           StringLength, Type, SubType, Length, Precision, Scale, Nullable);
 
-    ret = ODBC_CALL( SQLGetDescRecW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2097,15 +1387,11 @@ SQLRETURN WINAPI SQLGetDiagFieldW(SQLSMALLINT HandleType, SQLHANDLE Handle, SQLS
                                   SQLSMALLINT DiagIdentifier, SQLPOINTER DiagInfo, SQLSMALLINT BufferLength,
                                   SQLSMALLINT *StringLength)
 {
-    struct SQLGetDiagFieldW_params params = { HandleType, Handle, RecNumber, DiagIdentifier, DiagInfo,
-                                              BufferLength, StringLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(HandleType %d, Handle %p, RecNumber %d, DiagIdentifier %d, DiagInfo %p, BufferLength %d,"
+    FIXME("(HandleType %d, Handle %p, RecNumber %d, DiagIdentifier %d, DiagInfo %p, BufferLength %d,"
           " StringLength %p)\n", HandleType, Handle, RecNumber, DiagIdentifier, DiagInfo, BufferLength, StringLength);
 
-    ret = ODBC_CALL( SQLGetDiagFieldW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2116,16 +1402,12 @@ SQLRETURN WINAPI SQLGetDiagRecW(SQLSMALLINT HandleType, SQLHANDLE Handle, SQLSMA
                                 WCHAR *Sqlstate, SQLINTEGER *NativeError, WCHAR *MessageText,
                                 SQLSMALLINT BufferLength, SQLSMALLINT *TextLength)
 {
-    struct SQLGetDiagRecW_params params = { HandleType, Handle, RecNumber, Sqlstate, NativeError,
-                                            MessageText, BufferLength, TextLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(HandleType %d, Handle %p, RecNumber %d, Sqlstate %p, NativeError %p, MessageText %p, BufferLength %d,"
+    FIXME("(HandleType %d, Handle %p, RecNumber %d, Sqlstate %p, NativeError %p, MessageText %p, BufferLength %d,"
           " TextLength %p)\n", HandleType, Handle, RecNumber, Sqlstate, NativeError, MessageText, BufferLength,
           TextLength);
 
-    ret = ODBC_CALL( SQLGetDiagRecW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2135,10 +1417,9 @@ SQLRETURN WINAPI SQLGetDiagRecW(SQLSMALLINT HandleType, SQLHANDLE Handle, SQLSMA
 SQLRETURN WINAPI SQLGetStmtAttrW(SQLHSTMT StatementHandle, SQLINTEGER Attribute, SQLPOINTER Value,
                                  SQLINTEGER BufferLength, SQLINTEGER *StringLength)
 {
-    struct SQLGetStmtAttrW_params params = { StatementHandle, Attribute, Value, BufferLength, StringLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, Attribute %d, Value %p, BufferLength %d, StringLength %p)\n", StatementHandle,
+    FIXME("(StatementHandle %p, Attribute %d, Value %p, BufferLength %d, StringLength %p)\n", StatementHandle,
           Attribute, Value, BufferLength, StringLength);
 
     if (!Value)
@@ -2147,8 +1428,6 @@ SQLRETURN WINAPI SQLGetStmtAttrW(SQLHSTMT StatementHandle, SQLINTEGER Attribute,
         return SQL_ERROR;
     }
 
-    ret = ODBC_CALL( SQLGetStmtAttrW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2158,14 +1437,11 @@ SQLRETURN WINAPI SQLGetStmtAttrW(SQLHSTMT StatementHandle, SQLINTEGER Attribute,
 SQLRETURN WINAPI SQLSetConnectAttrW(SQLHDBC ConnectionHandle, SQLINTEGER Attribute, SQLPOINTER Value,
                                     SQLINTEGER StringLength)
 {
-    struct SQLSetConnectAttrW_params params = { ConnectionHandle, Attribute, Value, StringLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p, Attribute %d, Value %p, StringLength %d)\n", ConnectionHandle, Attribute, Value,
+    FIXME("(ConnectionHandle %p, Attribute %d, Value %p, StringLength %d)\n", ConnectionHandle, Attribute, Value,
           StringLength);
 
-    ret = ODBC_CALL( SQLSetConnectAttrW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2176,17 +1452,14 @@ SQLRETURN WINAPI SQLColumnsW(SQLHSTMT StatementHandle, WCHAR *CatalogName, SQLSM
                              WCHAR *SchemaName, SQLSMALLINT NameLength2, WCHAR *TableName,
                              SQLSMALLINT NameLength3, WCHAR *ColumnName, SQLSMALLINT NameLength4)
 {
-    struct SQLColumnsW_params params = { StatementHandle, CatalogName, NameLength1, SchemaName,
-                                         NameLength2, TableName, NameLength3, ColumnName, NameLength4 };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d, TableName %s,"
+    FIXME("(StatementHandle %p, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d, TableName %s,"
           " NameLength3 %d, ColumnName %s, NameLength4 %d)\n", StatementHandle,
           debugstr_wn(CatalogName, NameLength1), NameLength1, debugstr_wn(SchemaName, NameLength2), NameLength2,
           debugstr_wn(TableName, NameLength3), NameLength3, debugstr_wn(ColumnName, NameLength4), NameLength4);
 
-    ret = ODBC_CALL( SQLColumnsW, &params );
-    TRACE("Returning %d\n", ret);
+    FIXME("Returning %d\n", ret);
     return ret;
 }
 
@@ -2197,17 +1470,13 @@ SQLRETURN WINAPI SQLDriverConnectW(SQLHDBC ConnectionHandle, SQLHWND WindowHandl
                                    SQLSMALLINT Length, WCHAR *OutConnectionString, SQLSMALLINT BufferLength,
                                    SQLSMALLINT *Length2, SQLUSMALLINT DriverCompletion)
 {
-    struct SQLDriverConnectW_params params = { ConnectionHandle, WindowHandle, InConnectionString, Length,
-                                               OutConnectionString, BufferLength, Length2, DriverCompletion };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p, WindowHandle %p, InConnectionString %s, Length %d, OutConnectionString %p,"
+    FIXME("(ConnectionHandle %p, WindowHandle %p, InConnectionString %s, Length %d, OutConnectionString %p,"
           " BufferLength %d, Length2 %p, DriverCompletion %d)\n", ConnectionHandle, WindowHandle,
           debugstr_wn(InConnectionString, Length), Length, OutConnectionString, BufferLength, Length2,
           DriverCompletion);
 
-    ret = ODBC_CALL( SQLDriverConnectW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2216,13 +1485,10 @@ SQLRETURN WINAPI SQLDriverConnectW(SQLHDBC ConnectionHandle, SQLHWND WindowHandl
  */
 SQLRETURN WINAPI SQLGetConnectOptionW(SQLHDBC ConnectionHandle, SQLUSMALLINT Option, SQLPOINTER Value)
 {
-    struct SQLGetConnectOptionW_params params = { ConnectionHandle, Option, Value };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p, Option %d, Value %p)\n", ConnectionHandle, Option, Value);
+    FIXME("(ConnectionHandle %p, Option %d, Value %p)\n", ConnectionHandle, Option, Value);
 
-    ret = ODBC_CALL( SQLGetConnectOptionW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2232,14 +1498,11 @@ SQLRETURN WINAPI SQLGetConnectOptionW(SQLHDBC ConnectionHandle, SQLUSMALLINT Opt
 SQLRETURN WINAPI SQLGetInfoW(SQLHDBC ConnectionHandle, SQLUSMALLINT InfoType, SQLPOINTER InfoValue,
                              SQLSMALLINT BufferLength, SQLSMALLINT *StringLength)
 {
-    struct SQLGetInfoW_params params = { ConnectionHandle, InfoType, InfoValue, BufferLength, StringLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle, %p, InfoType %d, InfoValue %p, BufferLength %d, StringLength %p)\n", ConnectionHandle,
+    FIXME("(ConnectionHandle, %p, InfoType %d, InfoValue %p, BufferLength %d, StringLength %p)\n", ConnectionHandle,
           InfoType, InfoValue, BufferLength, StringLength);
 
-    ret = ODBC_CALL( SQLGetInfoW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2248,13 +1511,10 @@ SQLRETURN WINAPI SQLGetInfoW(SQLHDBC ConnectionHandle, SQLUSMALLINT InfoType, SQ
  */
 SQLRETURN WINAPI SQLGetTypeInfoW(SQLHSTMT StatementHandle, SQLSMALLINT DataType)
 {
-    struct SQLGetTypeInfoW_params params = { StatementHandle, DataType };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, DataType %d)\n", StatementHandle, DataType);
+    FIXME("(StatementHandle %p, DataType %d)\n", StatementHandle, DataType);
 
-    ret = ODBC_CALL( SQLGetTypeInfoW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2263,13 +1523,10 @@ SQLRETURN WINAPI SQLGetTypeInfoW(SQLHSTMT StatementHandle, SQLSMALLINT DataType)
  */
 SQLRETURN WINAPI SQLSetConnectOptionW(SQLHDBC ConnectionHandle, SQLUSMALLINT Option, SQLLEN Value)
 {
-    struct SQLSetConnectOptionW_params params = { ConnectionHandle, Option, Value };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(ConnectionHandle %p, Option %d, Value %s)\n", ConnectionHandle, Option, debugstr_sqllen(Value));
+    FIXME("(ConnectionHandle %p, Option %d, Value %s)\n", ConnectionHandle, Option, debugstr_sqllen(Value));
 
-    ret = ODBC_CALL( SQLSetConnectOptionW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2281,17 +1538,13 @@ SQLRETURN WINAPI SQLSpecialColumnsW(SQLHSTMT StatementHandle, SQLUSMALLINT Ident
                                     SQLSMALLINT NameLength2, SQLWCHAR *TableName, SQLSMALLINT NameLength3,
                                     SQLUSMALLINT Scope, SQLUSMALLINT Nullable)
 {
-    struct SQLSpecialColumnsW_params params = { StatementHandle, IdentifierType, CatalogName, NameLength1,
-                                                SchemaName, NameLength2, TableName, NameLength3, Scope, Nullable };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, IdentifierType %d, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d,"
+    FIXME("(StatementHandle %p, IdentifierType %d, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d,"
           " TableName %s, NameLength3 %d, Scope %d, Nullable %d)\n", StatementHandle, IdentifierType,
           debugstr_wn(CatalogName, NameLength1), NameLength1, debugstr_wn(SchemaName, NameLength2), NameLength2,
           debugstr_wn(TableName, NameLength3), NameLength3, Scope, Nullable);
 
-    ret = ODBC_CALL( SQLSpecialColumnsW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2302,17 +1555,13 @@ SQLRETURN WINAPI SQLStatisticsW(SQLHSTMT StatementHandle, SQLWCHAR *CatalogName,
                                 SQLWCHAR *SchemaName, SQLSMALLINT NameLength2, SQLWCHAR *TableName,
                                 SQLSMALLINT NameLength3, SQLUSMALLINT Unique, SQLUSMALLINT Reserved)
 {
-    struct SQLStatisticsW_params params = { StatementHandle, CatalogName, NameLength1, SchemaName,
-                                            NameLength2, TableName, NameLength3, Unique, Reserved };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, CatalogName %s, NameLength1 %d SchemaName %s, NameLength2 %d, TableName %s"
+    FIXME("(StatementHandle %p, CatalogName %s, NameLength1 %d SchemaName %s, NameLength2 %d, TableName %s"
           " NameLength3 %d, Unique %d, Reserved %d)\n", StatementHandle,
           debugstr_wn(CatalogName, NameLength1), NameLength1, debugstr_wn(SchemaName, NameLength2), NameLength2,
           debugstr_wn(TableName, NameLength3), NameLength3, Unique, Reserved);
 
-    ret = ODBC_CALL( SQLStatisticsW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2323,17 +1572,13 @@ SQLRETURN WINAPI SQLTablesW(SQLHSTMT StatementHandle, SQLWCHAR *CatalogName, SQL
                             SQLWCHAR *SchemaName, SQLSMALLINT NameLength2, SQLWCHAR *TableName,
                             SQLSMALLINT NameLength3, SQLWCHAR *TableType, SQLSMALLINT NameLength4)
 {
-    struct SQLTablesW_params params = { StatementHandle, CatalogName, NameLength1, SchemaName, NameLength2,
-                                        TableName, NameLength3, TableType, NameLength4 };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d, TableName %s,"
+    FIXME("(StatementHandle %p, CatalogName %s, NameLength1 %d, SchemaName %s, NameLength2 %d, TableName %s,"
           " NameLength3 %d, TableType %s, NameLength4 %d)\n", StatementHandle,
           debugstr_wn(CatalogName, NameLength1), NameLength1, debugstr_wn(SchemaName, NameLength2), NameLength2,
           debugstr_wn(TableName, NameLength3), NameLength3, debugstr_wn(TableType, NameLength4), NameLength4);
 
-    ret = ODBC_CALL( SQLTablesW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2344,15 +1589,11 @@ SQLRETURN WINAPI SQLBrowseConnectW(SQLHDBC hdbc, SQLWCHAR *szConnStrIn, SQLSMALL
                                    SQLWCHAR *szConnStrOut, SQLSMALLINT cbConnStrOutMax,
                                    SQLSMALLINT *pcbConnStrOut)
 {
-    struct SQLBrowseConnectW_params params = { hdbc, szConnStrIn, cbConnStrIn, szConnStrOut,
-                                               cbConnStrOutMax, pcbConnStrOut };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(hdbc %p, szConnStrIn %s, cbConnStrIn %d, szConnStrOut %p, cbConnStrOutMax %d, pcbConnStrOut %p)\n",
+    FIXME("(hdbc %p, szConnStrIn %s, cbConnStrIn %d, szConnStrOut %p, cbConnStrOutMax %d, pcbConnStrOut %p)\n",
           hdbc, debugstr_wn(szConnStrIn, cbConnStrIn), cbConnStrIn, szConnStrOut, cbConnStrOutMax, pcbConnStrOut);
 
-    ret = ODBC_CALL( SQLBrowseConnectW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2363,20 +1604,15 @@ SQLRETURN WINAPI SQLColumnPrivilegesW(SQLHSTMT hstmt, SQLWCHAR *szCatalogName, S
                                       SQLWCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR *szTableName,
                                       SQLSMALLINT cbTableName, SQLWCHAR *szColumnName, SQLSMALLINT cbColumnName)
 {
-    struct SQLColumnPrivilegesW_params params = { hstmt, szCatalogName, cbCatalogName, szSchemaName,
-                                                  cbSchemaName, szTableName, cbTableName, szColumnName,
-                                                  cbColumnName };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szTableName %s,"
+    FIXME("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szTableName %s,"
           " cbTableName %d, szColumnName %s, cbColumnName %d)\n", hstmt,
           debugstr_wn(szCatalogName, cbCatalogName), cbCatalogName,
           debugstr_wn(szSchemaName, cbSchemaName), cbSchemaName,
           debugstr_wn(szTableName, cbTableName), cbTableName,
           debugstr_wn(szColumnName, cbColumnName), cbColumnName);
 
-    ret = ODBC_CALL( SQLColumnPrivilegesW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2387,26 +1623,12 @@ SQLRETURN WINAPI SQLDataSourcesW(SQLHENV EnvironmentHandle, SQLUSMALLINT Directi
                                  SQLSMALLINT BufferLength1, SQLSMALLINT *NameLength1, WCHAR *Description,
                                  SQLSMALLINT BufferLength2, SQLSMALLINT *NameLength2)
 {
-    struct SQLDataSourcesW_params params = { EnvironmentHandle, Direction, ServerName, BufferLength1,
-                                             NameLength1, Description, BufferLength2, NameLength2 };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(EnvironmentHandle %p, Direction %d, ServerName %p, BufferLength1 %d, NameLength1 %p, Description %p,"
+    FIXME("(EnvironmentHandle %p, Direction %d, ServerName %p, BufferLength1 %d, NameLength1 %p, Description %p,"
           " BufferLength2 %d, NameLength2 %p)\n", EnvironmentHandle, Direction, ServerName, BufferLength1,
           NameLength1, Description, BufferLength2, NameLength2);
 
-    ret = ODBC_CALL( SQLDataSourcesW, &params );
-
-    if (ret >= 0 && TRACE_ON(odbc))
-    {
-        if (ServerName && NameLength1 && *NameLength1 > 0)
-            TRACE(" DataSource %s", debugstr_wn(ServerName, *NameLength1));
-        if (Description && NameLength2 && *NameLength2 > 0)
-            TRACE(" Description %s", debugstr_wn(Description, *NameLength2));
-        TRACE("\n");
-    }
-
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2419,13 +1641,9 @@ SQLRETURN WINAPI SQLForeignKeysW(SQLHSTMT hstmt, SQLWCHAR *szPkCatalogName, SQLS
                                  SQLSMALLINT cbFkCatalogName, SQLWCHAR *szFkSchemaName,
                                  SQLSMALLINT cbFkSchemaName, SQLWCHAR *szFkTableName, SQLSMALLINT cbFkTableName)
 {
-    struct SQLForeignKeysW_params params = { hstmt, szPkCatalogName, cbPkCatalogName, szPkSchemaName,
-                                             cbPkSchemaName, szPkTableName, cbPkTableName, szFkCatalogName,
-                                             cbFkCatalogName, szFkSchemaName, cbFkSchemaName, szFkTableName,
-                                             cbFkTableName };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(hstmt %p, szPkCatalogName %s, cbPkCatalogName %d, szPkSchemaName %s, cbPkSchemaName %d,"
+    FIXME("(hstmt %p, szPkCatalogName %s, cbPkCatalogName %d, szPkSchemaName %s, cbPkSchemaName %d,"
           " szPkTableName %s, cbPkTableName %d, szFkCatalogName %s, cbFkCatalogName %d, szFkSchemaName %s,"
           " cbFkSchemaName %d, szFkTableName %s, cbFkTableName %d)\n", hstmt,
           debugstr_wn(szPkCatalogName, cbPkCatalogName), cbPkCatalogName,
@@ -2435,8 +1653,6 @@ SQLRETURN WINAPI SQLForeignKeysW(SQLHSTMT hstmt, SQLWCHAR *szPkCatalogName, SQLS
           debugstr_wn(szFkSchemaName, cbFkSchemaName), cbFkSchemaName,
           debugstr_wn(szFkTableName, cbFkTableName), cbFkTableName);
 
-    ret = ODBC_CALL( SQLForeignKeysW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2446,14 +1662,11 @@ SQLRETURN WINAPI SQLForeignKeysW(SQLHSTMT hstmt, SQLWCHAR *szPkCatalogName, SQLS
 SQLRETURN WINAPI SQLNativeSqlW(SQLHDBC hdbc, SQLWCHAR *szSqlStrIn, SQLINTEGER cbSqlStrIn, SQLWCHAR *szSqlStr,
                                SQLINTEGER cbSqlStrMax, SQLINTEGER *pcbSqlStr)
 {
-    struct SQLNativeSqlW_params params = { hdbc, szSqlStrIn, cbSqlStrIn, szSqlStr, cbSqlStrMax, pcbSqlStr };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(hdbc %p, szSqlStrIn %s, cbSqlStrIn %d, szSqlStr %p, cbSqlStrMax %d, pcbSqlStr %p)\n", hdbc,
+    FIXME("(hdbc %p, szSqlStrIn %s, cbSqlStrIn %d, szSqlStr %p, cbSqlStrMax %d, pcbSqlStr %p)\n", hdbc,
           debugstr_wn(szSqlStrIn, cbSqlStrIn), cbSqlStrIn, szSqlStr, cbSqlStrMax, pcbSqlStr);
 
-    ret = ODBC_CALL( SQLNativeSqlW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2464,18 +1677,14 @@ SQLRETURN WINAPI SQLPrimaryKeysW(SQLHSTMT hstmt, SQLWCHAR *szCatalogName, SQLSMA
                                  SQLWCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR *szTableName,
                                  SQLSMALLINT cbTableName)
 {
-    struct SQLPrimaryKeysW_params params = { hstmt, szCatalogName, cbCatalogName, szSchemaName,
-                                             cbSchemaName, szTableName, cbTableName };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szTableName %s,"
+    FIXME("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szTableName %s,"
           " cbTableName %d)\n", hstmt,
           debugstr_wn(szCatalogName, cbCatalogName), cbCatalogName,
           debugstr_wn(szSchemaName, cbSchemaName), cbSchemaName,
           debugstr_wn(szTableName, cbTableName), cbTableName);
 
-    ret = ODBC_CALL( SQLPrimaryKeysW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2486,20 +1695,15 @@ SQLRETURN WINAPI SQLProcedureColumnsW(SQLHSTMT hstmt, SQLWCHAR *szCatalogName, S
                                       SQLWCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR *szProcName,
                                       SQLSMALLINT cbProcName, SQLWCHAR *szColumnName, SQLSMALLINT cbColumnName)
 {
-    struct SQLProcedureColumnsW_params params = { hstmt, szCatalogName, cbCatalogName, szSchemaName,
-                                                  cbSchemaName, szProcName, cbProcName,
-                                                  szColumnName, cbColumnName };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szProcName %s,"
+    FIXME("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szProcName %s,"
           " cbProcName %d, szColumnName %s, cbColumnName %d)\n", hstmt,
           debugstr_wn(szCatalogName, cbCatalogName), cbCatalogName,
           debugstr_wn(szSchemaName, cbSchemaName), cbSchemaName,
           debugstr_wn(szProcName, cbProcName), cbProcName,
           debugstr_wn(szColumnName, cbColumnName), cbColumnName);
 
-    ret = ODBC_CALL( SQLProcedureColumnsW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2510,16 +1714,12 @@ SQLRETURN WINAPI SQLProceduresW(SQLHSTMT hstmt, SQLWCHAR *szCatalogName, SQLSMAL
                                 SQLWCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR *szProcName,
                                 SQLSMALLINT cbProcName)
 {
-    struct SQLProceduresW_params params = { hstmt, szCatalogName, cbCatalogName, szSchemaName,
-                                            cbSchemaName, szProcName, cbProcName };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szProcName %s,"
+    FIXME("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szProcName %s,"
           " cbProcName %d)\n", hstmt, debugstr_wn(szCatalogName, cbCatalogName), cbCatalogName,
           debugstr_wn(szSchemaName, cbSchemaName), cbSchemaName, debugstr_wn(szProcName, cbProcName), cbProcName);
 
-    ret = ODBC_CALL( SQLProceduresW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2530,16 +1730,12 @@ SQLRETURN WINAPI SQLTablePrivilegesW(SQLHSTMT hstmt, SQLWCHAR *szCatalogName, SQ
                                      SQLWCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR *szTableName,
                                      SQLSMALLINT cbTableName)
 {
-    struct SQLTablePrivilegesW_params params = { hstmt, szCatalogName, cbCatalogName, szSchemaName,
-                                                 cbSchemaName, szTableName, cbTableName };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szTableName %s,"
+    FIXME("(hstmt %p, szCatalogName %s, cbCatalogName %d, szSchemaName %s, cbSchemaName %d, szTableName %s,"
           " cbTableName %d)\n", hstmt, debugstr_wn(szCatalogName, cbCatalogName), cbCatalogName,
           debugstr_wn(szSchemaName, cbSchemaName), cbSchemaName, debugstr_wn(szTableName, cbTableName), cbTableName);
 
-    ret = ODBC_CALL( SQLTablePrivilegesW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2551,20 +1747,12 @@ SQLRETURN WINAPI SQLDriversW(SQLHENV EnvironmentHandle, SQLUSMALLINT fDirection,
                              SQLWCHAR *szDriverAttributes, SQLSMALLINT cbDriverAttrMax,
                              SQLSMALLINT *pcbDriverAttr)
 {
-    struct SQLDriversW_params params = { EnvironmentHandle, fDirection, szDriverDesc, cbDriverDescMax,
-                                         pcbDriverDesc, szDriverAttributes, cbDriverAttrMax, pcbDriverAttr };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(EnvironmentHandle %p, Direction %d, szDriverDesc %p, cbDriverDescMax %d, pcbDriverDesc %p,"
+    FIXME("(EnvironmentHandle %p, Direction %d, szDriverDesc %p, cbDriverDescMax %d, pcbDriverDesc %p,"
           " DriverAttributes %p, cbDriverAttrMax %d, pcbDriverAttr %p)\n", EnvironmentHandle, fDirection,
           szDriverDesc, cbDriverDescMax, pcbDriverDesc, szDriverAttributes, cbDriverAttrMax, pcbDriverAttr);
 
-    ret = ODBC_CALL( SQLDriversW, &params );
-
-    if (ret == SQL_NO_DATA && fDirection == SQL_FETCH_FIRST)
-        ERR_(winediag)("No ODBC drivers could be found. Check the settings for your libodbc provider.\n");
-
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2574,14 +1762,11 @@ SQLRETURN WINAPI SQLDriversW(SQLHENV EnvironmentHandle, SQLUSMALLINT fDirection,
 SQLRETURN WINAPI SQLSetDescFieldW(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber, SQLSMALLINT FieldIdentifier,
                                   SQLPOINTER Value, SQLINTEGER BufferLength)
 {
-    struct SQLSetDescFieldW_params params = { DescriptorHandle, RecNumber, FieldIdentifier, Value, BufferLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(DescriptorHandle %p, RecNumber %d, FieldIdentifier %d, Value %p, BufferLength %d)\n", DescriptorHandle,
+    FIXME("(DescriptorHandle %p, RecNumber %d, FieldIdentifier %d, Value %p, BufferLength %d)\n", DescriptorHandle,
           RecNumber, FieldIdentifier, Value, BufferLength);
 
-    ret = ODBC_CALL( SQLSetDescFieldW, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2591,20 +1776,11 @@ SQLRETURN WINAPI SQLSetDescFieldW(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumb
 SQLRETURN WINAPI SQLSetStmtAttrW(SQLHSTMT StatementHandle, SQLINTEGER Attribute, SQLPOINTER Value,
                                  SQLINTEGER StringLength)
 {
-    struct SQLSetStmtAttrW_params params = { StatementHandle, Attribute, Value, StringLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(StatementHandle %p, Attribute %d, Value %p, StringLength %d)\n", StatementHandle, Attribute, Value,
+    FIXME("(StatementHandle %p, Attribute %d, Value %p, StringLength %d)\n", StatementHandle, Attribute, Value,
           StringLength);
 
-    ret = ODBC_CALL( SQLSetStmtAttrW, &params );
-    if (ret == SQL_ERROR && (Attribute == SQL_ROWSET_SIZE || Attribute == SQL_ATTR_ROW_ARRAY_SIZE))
-    {
-        TRACE("CHEAT: returning SQL_SUCCESS to ADO\n");
-        return SQL_SUCCESS;
-    }
-
-    TRACE("Returning %d\n", ret);
     return ret;
 }
 
@@ -2615,41 +1791,11 @@ SQLRETURN WINAPI SQLGetDiagRecA(SQLSMALLINT HandleType, SQLHANDLE Handle, SQLSMA
                                 SQLCHAR *Sqlstate, SQLINTEGER *NativeError, SQLCHAR *MessageText,
                                 SQLSMALLINT BufferLength, SQLSMALLINT *TextLength)
 {
-    struct SQLGetDiagRecA_params params = { HandleType, Handle, RecNumber, Sqlstate, NativeError,
-                                            MessageText, BufferLength, TextLength };
-    SQLRETURN ret;
+    SQLRETURN ret = SQL_ERROR;
 
-    TRACE("(HandleType %d, Handle %p, RecNumber %d, Sqlstate %p, NativeError %p, MessageText %p, BufferLength %d,"
+    FIXME("(HandleType %d, Handle %p, RecNumber %d, Sqlstate %p, NativeError %p, MessageText %p, BufferLength %d,"
           " TextLength %p)\n", HandleType, Handle, RecNumber, Sqlstate, NativeError, MessageText, BufferLength,
           TextLength);
 
-    ret = ODBC_CALL( SQLGetDiagRecA, &params );
-    TRACE("Returning %d\n", ret);
     return ret;
 }
-
-
-/***********************************************************************
- * DllMain [Internal] Initializes the internal 'ODBC32.DLL'.
- */
-BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD reason, LPVOID reserved)
-{
-    TRACE("proxy ODBC: %p,%lx,%p\n", hinstDLL, reason, reserved);
-
-    switch (reason)
-    {
-    case DLL_PROCESS_ATTACH:
-        DisableThreadLibraryCalls(hinstDLL);
-        if (!__wine_init_unix_call() && !WINE_UNIX_CALL( process_attach, NULL ))
-        {
-            ODBC_ReplicateToRegistry();
-        }
-        break;
-
-    case DLL_PROCESS_DETACH:
-        if (reserved) break;
-        WINE_UNIX_CALL( process_detach, NULL );
-    }
-
-    return TRUE;
-}
diff --git a/dlls/odbc32/unixlib.c b/dlls/odbc32/unixlib.c
deleted file mode 100644
index 8458406d8c0..00000000000
--- a/dlls/odbc32/unixlib.c
+++ /dev/null
@@ -1,1272 +0,0 @@
-/*
- * Win32 ODBC functions
- *
- * Copyright 1999 Xiang Li, Corel Corporation
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2.1 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
- *
- * NOTES:
- *   Proxy ODBC driver manager.  This manager delegates all ODBC
- *   calls to a real ODBC driver manager named by the environment
- *   variable LIB_ODBC_DRIVER_MANAGER, or to libodbc.so if the
- *   variable is not set.
- */
-
-#if 0
-#pragma makedep unix
-#endif
-
-#include "config.h"
-
-#include <stdarg.h>
-#include <stdlib.h>
-#include <sys/types.h>
-#include <dlfcn.h>
-
-#include "ntstatus.h"
-#define WIN32_NO_STATUS
-#include "windef.h"
-#include "winbase.h"
-#include "winternl.h"
-#include "wine/debug.h"
-#include "sql.h"
-#include "sqltypes.h"
-#include "sqlext.h"
-
-#include "unixlib.h"
-#include "wine/debug.h"
-
-WINE_DECLARE_DEBUG_CHANNEL(winediag);
-
-static void *libodbc;
-
-static SQLRETURN (*pSQLAllocConnect)(SQLHENV,SQLHDBC*);
-static SQLRETURN (*pSQLAllocEnv)(SQLHENV*);
-static SQLRETURN (*pSQLAllocHandle)(SQLSMALLINT,SQLHANDLE,SQLHANDLE*);
-static SQLRETURN (*pSQLAllocHandleStd)(SQLSMALLINT,SQLHANDLE,SQLHANDLE*);
-static SQLRETURN (*pSQLAllocStmt)(SQLHDBC,SQLHSTMT*);
-static SQLRETURN (*pSQLBindCol)(SQLHSTMT,SQLUSMALLINT,SQLSMALLINT,SQLPOINTER,SQLLEN,SQLLEN*);
-static SQLRETURN (*pSQLBindParam)(SQLHSTMT,SQLUSMALLINT,SQLSMALLINT,SQLSMALLINT,SQLULEN,SQLSMALLINT,SQLPOINTER,SQLLEN*);
-static SQLRETURN (*pSQLBindParameter)(SQLHSTMT,SQLUSMALLINT,SQLSMALLINT,SQLSMALLINT,SQLSMALLINT,SQLULEN,SQLSMALLINT,SQLPOINTER,SQLLEN,SQLLEN*);
-static SQLRETURN (*pSQLBrowseConnect)(SQLHDBC,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT,SQLSMALLINT*);
-static SQLRETURN (*pSQLBrowseConnectW)(SQLHDBC,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT,SQLSMALLINT*);
-static SQLRETURN (*pSQLBulkOperations)(SQLHSTMT,SQLSMALLINT);
-static SQLRETURN (*pSQLCancel)(SQLHSTMT);
-static SQLRETURN (*pSQLCloseCursor)(SQLHSTMT);
-static SQLRETURN (*pSQLColAttribute)(SQLHSTMT,SQLUSMALLINT,SQLUSMALLINT,SQLPOINTER,SQLSMALLINT,SQLSMALLINT*,SQLLEN*);
-static SQLRETURN (*pSQLColAttributeW)(SQLHSTMT,SQLUSMALLINT,SQLUSMALLINT,SQLPOINTER,SQLSMALLINT,SQLSMALLINT*,SQLLEN*);
-static SQLRETURN (*pSQLColAttributes)(SQLHSTMT,SQLUSMALLINT,SQLUSMALLINT,SQLPOINTER,SQLSMALLINT,SQLSMALLINT*,SQLLEN*);
-static SQLRETURN (*pSQLColAttributesW)(SQLHSTMT,SQLUSMALLINT,SQLUSMALLINT,SQLPOINTER,SQLSMALLINT,SQLSMALLINT*,SQLLEN*);
-static SQLRETURN (*pSQLColumnPrivileges)(SQLHSTMT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT);
-static SQLRETURN (*pSQLColumnPrivilegesW)(SQLHSTMT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT);
-static SQLRETURN (*pSQLColumns)(SQLHSTMT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT);
-static SQLRETURN (*pSQLColumnsW)(SQLHSTMT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT);
-static SQLRETURN (*pSQLConnect)(SQLHDBC,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT);
-static SQLRETURN (*pSQLConnectW)(SQLHDBC,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT);
-static SQLRETURN (*pSQLCopyDesc)(SQLHDESC,SQLHDESC);
-static SQLRETURN (*pSQLDataSources)(SQLHENV,SQLUSMALLINT,SQLCHAR*,SQLSMALLINT,SQLSMALLINT*,SQLCHAR*,SQLSMALLINT,SQLSMALLINT*);
-static SQLRETURN (*pSQLDataSourcesA)(SQLHENV,SQLUSMALLINT,SQLCHAR*,SQLSMALLINT,SQLSMALLINT*,SQLCHAR*,SQLSMALLINT,SQLSMALLINT*);
-static SQLRETURN (*pSQLDataSourcesW)(SQLHENV,SQLUSMALLINT,SQLWCHAR*,SQLSMALLINT,SQLSMALLINT*,SQLWCHAR*,SQLSMALLINT,SQLSMALLINT*);
-static SQLRETURN (*pSQLDescribeCol)(SQLHSTMT,SQLUSMALLINT,SQLCHAR*,SQLSMALLINT,SQLSMALLINT*,SQLSMALLINT*,SQLULEN*,SQLSMALLINT*,SQLSMALLINT*);
-static SQLRETURN (*pSQLDescribeColW)(SQLHSTMT,SQLUSMALLINT,SQLWCHAR*,SQLSMALLINT,SQLSMALLINT*,SQLSMALLINT*,SQLULEN*,SQLSMALLINT*,SQLSMALLINT*);
-static SQLRETURN (*pSQLDescribeParam)(SQLHSTMT,SQLUSMALLINT,SQLSMALLINT*,SQLULEN*,SQLSMALLINT*,SQLSMALLINT*);
-static SQLRETURN (*pSQLDisconnect)(SQLHDBC);
-static SQLRETURN (*pSQLDriverConnect)(SQLHDBC,SQLHWND,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT,SQLSMALLINT*,SQLUSMALLINT);
-static SQLRETURN (*pSQLDriverConnectW)(SQLHDBC,SQLHWND,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT,SQLSMALLINT*,SQLUSMALLINT);
-static SQLRETURN (*pSQLDrivers)(SQLHENV,SQLUSMALLINT,SQLCHAR*,SQLSMALLINT,SQLSMALLINT*,SQLCHAR*,SQLSMALLINT,SQLSMALLINT*);
-static SQLRETURN (*pSQLDriversW)(SQLHENV,SQLUSMALLINT,SQLWCHAR*,SQLSMALLINT,SQLSMALLINT*,SQLWCHAR*,SQLSMALLINT,SQLSMALLINT*);
-static SQLRETURN (*pSQLEndTran)(SQLSMALLINT,SQLHANDLE,SQLSMALLINT);
-static SQLRETURN (*pSQLError)(SQLHENV,SQLHDBC,SQLHSTMT,SQLCHAR*,SQLINTEGER*,SQLCHAR*,SQLSMALLINT,SQLSMALLINT*);
-static SQLRETURN (*pSQLErrorW)(SQLHENV,SQLHDBC,SQLHSTMT,SQLWCHAR*,SQLINTEGER*,SQLWCHAR*,SQLSMALLINT,SQLSMALLINT*);
-static SQLRETURN (*pSQLExecDirect)(SQLHSTMT,SQLCHAR*,SQLINTEGER);
-static SQLRETURN (*pSQLExecDirectW)(SQLHSTMT,SQLWCHAR*,SQLINTEGER);
-static SQLRETURN (*pSQLExecute)(SQLHSTMT);
-static SQLRETURN (*pSQLExtendedFetch)(SQLHSTMT,SQLUSMALLINT,SQLLEN,SQLULEN*,SQLUSMALLINT*);
-static SQLRETURN (*pSQLFetch)(SQLHSTMT);
-static SQLRETURN (*pSQLFetchScroll)(SQLHSTMT,SQLSMALLINT,SQLLEN);
-static SQLRETURN (*pSQLForeignKeys)(SQLHSTMT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT);
-static SQLRETURN (*pSQLForeignKeysW)(SQLHSTMT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT);
-static SQLRETURN (*pSQLFreeConnect)(SQLHDBC);
-static SQLRETURN (*pSQLFreeEnv)(SQLHENV);
-static SQLRETURN (*pSQLFreeHandle)(SQLSMALLINT,SQLHANDLE);
-static SQLRETURN (*pSQLFreeStmt)(SQLHSTMT,SQLUSMALLINT);
-static SQLRETURN (*pSQLGetConnectAttr)(SQLHDBC,SQLINTEGER,SQLPOINTER,SQLINTEGER,SQLINTEGER*);
-static SQLRETURN (*pSQLGetConnectAttrW)(SQLHDBC,SQLINTEGER,SQLPOINTER,SQLINTEGER,SQLINTEGER*);
-static SQLRETURN (*pSQLGetConnectOption)(SQLHDBC,SQLUSMALLINT,SQLPOINTER);
-static SQLRETURN (*pSQLGetConnectOptionW)(SQLHDBC,SQLUSMALLINT,SQLPOINTER);
-static SQLRETURN (*pSQLGetCursorName)(SQLHSTMT,SQLCHAR*,SQLSMALLINT,SQLSMALLINT*);
-static SQLRETURN (*pSQLGetCursorNameW)(SQLHSTMT,SQLWCHAR*,SQLSMALLINT,SQLSMALLINT*);
-static SQLRETURN (*pSQLGetData)(SQLHSTMT,SQLUSMALLINT,SQLSMALLINT,SQLPOINTER,SQLLEN,SQLLEN*);
-static SQLRETURN (*pSQLGetDescField)(SQLHDESC,SQLSMALLINT,SQLSMALLINT,SQLPOINTER,SQLINTEGER,SQLINTEGER*);
-static SQLRETURN (*pSQLGetDescFieldW)(SQLHDESC,SQLSMALLINT,SQLSMALLINT,SQLPOINTER,SQLINTEGER,SQLINTEGER*);
-static SQLRETURN (*pSQLGetDescRec)(SQLHDESC,SQLSMALLINT,SQLCHAR*,SQLSMALLINT,SQLSMALLINT*,SQLSMALLINT*,SQLSMALLINT*,SQLLEN*,SQLSMALLINT*,SQLSMALLINT*,SQLSMALLINT*);
-static SQLRETURN (*pSQLGetDescRecW)(SQLHDESC,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT,SQLSMALLINT*,SQLSMALLINT*,SQLSMALLINT*,SQLLEN*,SQLSMALLINT*,SQLSMALLINT*,SQLSMALLINT*);
-static SQLRETURN (*pSQLGetDiagField)(SQLSMALLINT,SQLHANDLE,SQLSMALLINT,SQLSMALLINT,SQLPOINTER,SQLSMALLINT,SQLSMALLINT*);
-static SQLRETURN (*pSQLGetDiagFieldW)(SQLSMALLINT,SQLHANDLE,SQLSMALLINT,SQLSMALLINT,SQLPOINTER,SQLSMALLINT,SQLSMALLINT*);
-static SQLRETURN (*pSQLGetDiagRec)(SQLSMALLINT,SQLHANDLE,SQLSMALLINT,SQLCHAR*,SQLINTEGER*,SQLCHAR*,SQLSMALLINT,SQLSMALLINT*);
-static SQLRETURN (*pSQLGetDiagRecA)(SQLSMALLINT,SQLHANDLE,SQLSMALLINT,SQLCHAR*,SQLINTEGER*, SQLCHAR*,SQLSMALLINT,SQLSMALLINT*);
-static SQLRETURN (*pSQLGetDiagRecW)(SQLSMALLINT,SQLHANDLE,SQLSMALLINT,SQLWCHAR*,SQLINTEGER*,SQLWCHAR*,SQLSMALLINT,SQLSMALLINT*);
-static SQLRETURN (*pSQLGetEnvAttr)(SQLHENV,SQLINTEGER,SQLPOINTER,SQLINTEGER,SQLINTEGER*);
-static SQLRETURN (*pSQLGetFunctions)(SQLHDBC,SQLUSMALLINT,SQLUSMALLINT*);
-static SQLRETURN (*pSQLGetInfo)(SQLHDBC,SQLUSMALLINT,SQLPOINTER,SQLSMALLINT,SQLSMALLINT*);
-static SQLRETURN (*pSQLGetInfoW)(SQLHDBC,SQLUSMALLINT,SQLPOINTER,SQLSMALLINT,SQLSMALLINT*);
-static SQLRETURN (*pSQLGetStmtAttr)(SQLHSTMT,SQLINTEGER,SQLPOINTER,SQLINTEGER,SQLINTEGER*);
-static SQLRETURN (*pSQLGetStmtAttrW)(SQLHSTMT,SQLINTEGER,SQLPOINTER,SQLINTEGER,SQLINTEGER*);
-static SQLRETURN (*pSQLGetStmtOption)(SQLHSTMT,SQLUSMALLINT,SQLPOINTER);
-static SQLRETURN (*pSQLGetTypeInfo)(SQLHSTMT,SQLSMALLINT);
-static SQLRETURN (*pSQLGetTypeInfoW)(SQLHSTMT,SQLSMALLINT);
-static SQLRETURN (*pSQLMoreResults)(SQLHSTMT);
-static SQLRETURN (*pSQLNativeSql)(SQLHDBC,SQLCHAR*,SQLINTEGER,SQLCHAR*,SQLINTEGER,SQLINTEGER*);
-static SQLRETURN (*pSQLNativeSqlW)(SQLHDBC,SQLWCHAR*,SQLINTEGER,SQLWCHAR*,SQLINTEGER,SQLINTEGER*);
-static SQLRETURN (*pSQLNumParams)(SQLHSTMT,SQLSMALLINT*);
-static SQLRETURN (*pSQLNumResultCols)(SQLHSTMT,SQLSMALLINT*);
-static SQLRETURN (*pSQLParamData)(SQLHSTMT,SQLPOINTER*);
-static SQLRETURN (*pSQLParamOptions)(SQLHSTMT,SQLULEN,SQLULEN*);
-static SQLRETURN (*pSQLPrepare)(SQLHSTMT,SQLCHAR*,SQLINTEGER);
-static SQLRETURN (*pSQLPrepareW)(SQLHSTMT,SQLWCHAR*,SQLINTEGER);
-static SQLRETURN (*pSQLPrimaryKeys)(SQLHSTMT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT);
-static SQLRETURN (*pSQLPrimaryKeysW)(SQLHSTMT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT);
-static SQLRETURN (*pSQLProcedureColumns)(SQLHSTMT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT);
-static SQLRETURN (*pSQLProcedureColumnsW)(SQLHSTMT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT);
-static SQLRETURN (*pSQLProcedures)(SQLHSTMT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT);
-static SQLRETURN (*pSQLProceduresW)(SQLHSTMT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT);
-static SQLRETURN (*pSQLPutData)(SQLHSTMT,SQLPOINTER,SQLLEN);
-static SQLRETURN (*pSQLRowCount)(SQLHSTMT,SQLLEN*);
-static SQLRETURN (*pSQLSetConnectAttr)(SQLHDBC,SQLINTEGER,SQLPOINTER,SQLINTEGER);
-static SQLRETURN (*pSQLSetConnectAttrW)(SQLHDBC,SQLINTEGER,SQLPOINTER,SQLINTEGER);
-static SQLRETURN (*pSQLSetConnectOption)(SQLHDBC,SQLUSMALLINT,SQLULEN);
-static SQLRETURN (*pSQLSetConnectOptionW)(SQLHDBC,SQLUSMALLINT,SQLULEN);
-static SQLRETURN (*pSQLSetCursorName)(SQLHSTMT,SQLCHAR*,SQLSMALLINT);
-static SQLRETURN (*pSQLSetCursorNameW)(SQLHSTMT,SQLWCHAR*,SQLSMALLINT);
-static SQLRETURN (*pSQLSetDescField)(SQLHDESC,SQLSMALLINT,SQLSMALLINT,SQLPOINTER,SQLINTEGER);
-static SQLRETURN (*pSQLSetDescFieldW)(SQLHDESC,SQLSMALLINT,SQLSMALLINT,SQLPOINTER,SQLINTEGER);
-static SQLRETURN (*pSQLSetDescRec)(SQLHDESC,SQLSMALLINT,SQLSMALLINT,SQLSMALLINT,SQLLEN,SQLSMALLINT,SQLSMALLINT,SQLPOINTER,SQLLEN*,SQLLEN*);
-static SQLRETURN (*pSQLSetEnvAttr)(SQLHENV,SQLINTEGER,SQLPOINTER,SQLINTEGER);
-static SQLRETURN (*pSQLSetParam)(SQLHSTMT,SQLUSMALLINT,SQLSMALLINT,SQLSMALLINT,SQLULEN,SQLSMALLINT,SQLPOINTER,SQLLEN*);
-static SQLRETURN (*pSQLSetPos)(SQLHSTMT,SQLSETPOSIROW,SQLUSMALLINT,SQLUSMALLINT);
-static SQLRETURN (*pSQLSetScrollOptions)(SQLHSTMT,SQLUSMALLINT,SQLLEN,SQLUSMALLINT);
-static SQLRETURN (*pSQLSetStmtAttr)(SQLHSTMT,SQLINTEGER,SQLPOINTER,SQLINTEGER);
-static SQLRETURN (*pSQLSetStmtAttrW)(SQLHSTMT,SQLINTEGER,SQLPOINTER,SQLINTEGER);
-static SQLRETURN (*pSQLSetStmtOption)(SQLHSTMT,SQLUSMALLINT,SQLULEN);
-static SQLRETURN (*pSQLSpecialColumns)(SQLHSTMT,SQLUSMALLINT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT,SQLUSMALLINT,SQLUSMALLINT);
-static SQLRETURN (*pSQLSpecialColumnsW)(SQLHSTMT,SQLUSMALLINT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT,SQLUSMALLINT,SQLUSMALLINT);
-static SQLRETURN (*pSQLStatistics)(SQLHSTMT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT,SQLUSMALLINT,SQLUSMALLINT);
-static SQLRETURN (*pSQLStatisticsW)(SQLHSTMT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT,SQLUSMALLINT,SQLUSMALLINT);
-static SQLRETURN (*pSQLTablePrivileges)(SQLHSTMT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT);
-static SQLRETURN (*pSQLTablePrivilegesW)(SQLHSTMT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT);
-static SQLRETURN (*pSQLTables)(SQLHSTMT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT,SQLCHAR*,SQLSMALLINT);
-static SQLRETURN (*pSQLTablesW)(SQLHSTMT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT,SQLWCHAR*,SQLSMALLINT);
-static SQLRETURN (*pSQLTransact)(SQLHENV,SQLHDBC,SQLUSMALLINT);
-
-
-static NTSTATUS load_odbc(void);
-
-static NTSTATUS odbc_process_attach( void *args )
-{
-    if (!load_odbc()) return STATUS_DLL_NOT_FOUND;
-    return STATUS_SUCCESS;
-}
-
-static NTSTATUS odbc_process_detach( void *args )
-{
-    if (libodbc) dlclose( libodbc );
-    libodbc = NULL;
-    return STATUS_SUCCESS;
-}
-
-static NTSTATUS wrap_SQLAllocConnect( void *args )
-{
-    struct SQLAllocConnect_params *params = args;
-
-    return pSQLAllocConnect(params->EnvironmentHandle, params->ConnectionHandle);
-}
-
-static NTSTATUS wrap_SQLAllocEnv( void *args )
-{
-    struct SQLAllocEnv_params *params = args;
-
-    return pSQLAllocEnv(params->EnvironmentHandle);
-}
-
-static NTSTATUS wrap_SQLAllocHandle( void *args )
-{
-    struct SQLAllocHandle_params *params = args;
-
-    return pSQLAllocHandle(params->HandleType, params->InputHandle, params->OutputHandle);
-}
-
-static NTSTATUS wrap_SQLAllocHandleStd( void *args )
-{
-    struct SQLAllocHandleStd_params *params = args;
-
-    return pSQLAllocHandleStd(params->HandleType, params->InputHandle, params->OutputHandle);
-}
-
-static NTSTATUS wrap_SQLAllocStmt( void *args )
-{
-    struct SQLAllocStmt_params *params = args;
-
-    return pSQLAllocStmt(params->ConnectionHandle, params->StatementHandle);
-}
-
-static NTSTATUS wrap_SQLBindCol( void *args )
-{
-    struct SQLBindCol_params *params = args;
-
-    return pSQLBindCol(params->StatementHandle, params->ColumnNumber, params->TargetType,
-                       params->TargetValue, params->BufferLength, params->StrLen_or_Ind);
-}
-
-static NTSTATUS wrap_SQLBindParam( void *args )
-{
-    struct SQLBindParam_params *params = args;
-
-    return pSQLBindParam(params->StatementHandle, params->ParameterNumber, params->ValueType,
-                         params->ParameterType, params->LengthPrecision, params->ParameterScale,
-                         params->ParameterValue, params->StrLen_or_Ind);
-}
-
-static NTSTATUS wrap_SQLBindParameter( void *args )
-{
-    struct SQLBindParameter_params *params = args;
-
-    return pSQLBindParameter(params->hstmt, params->ipar, params->fParamType, params->fCType,
-                             params->fSqlType, params->cbColDef, params->ibScale, params->rgbValue,
-                             params->cbValueMax, params->pcbValue);
-}
-
-static NTSTATUS wrap_SQLBrowseConnect( void *args )
-{
-    struct SQLBrowseConnect_params *params = args;
-
-    return pSQLBrowseConnect(params->hdbc, params->szConnStrIn, params->cbConnStrIn, params->szConnStrOut,
-                             params->cbConnStrOutMax, params->pcbConnStrOut);
-}
-
-static NTSTATUS wrap_SQLBrowseConnectW( void *args )
-{
-    struct SQLBrowseConnectW_params *params = args;
-
-    return pSQLBrowseConnectW(params->hdbc, params->szConnStrIn, params->cbConnStrIn, params->szConnStrOut,
-                              params->cbConnStrOutMax, params->pcbConnStrOut);
-}
-
-static NTSTATUS wrap_SQLBulkOperations( void *args )
-{
-    struct SQLBulkOperations_params *params = args;
-
-    return pSQLBulkOperations(params->StatementHandle, params->Operation);
-}
-
-static NTSTATUS wrap_SQLCancel( void *args )
-{
-    struct SQLCancel_params *params = args;
-
-    return pSQLCancel(params->StatementHandle);
-}
-
-static NTSTATUS wrap_SQLCloseCursor( void *args )
-{
-    struct SQLCloseCursor_params *params = args;
-
-    return pSQLCloseCursor(params->StatementHandle);
-}
-
-static NTSTATUS wrap_SQLColAttribute( void *args )
-{
-    struct SQLColAttribute_params *params = args;
-
-    return pSQLColAttribute(params->StatementHandle, params->ColumnNumber, params->FieldIdentifier,
-                            params->CharacterAttribute, params->BufferLength, params->StringLength,
-                            params->NumericAttribute);
-}
-
-static NTSTATUS wrap_SQLColAttributeW( void *args )
-{
-    struct SQLColAttributeW_params *params = args;
-
-    return pSQLColAttributeW(params->StatementHandle, params->ColumnNumber, params->FieldIdentifier,
-                             params->CharacterAttribute, params->BufferLength, params->StringLength,
-                             params->NumericAttribute);
-}
-
-static NTSTATUS wrap_SQLColAttributes( void *args )
-{
-    struct SQLColAttributes_params *params = args;
-
-    return pSQLColAttributes(params->hstmt, params->icol, params->fDescType, params->rgbDesc,
-                             params->cbDescMax, params->pcbDesc, params->pfDesc);
-}
-
-static NTSTATUS wrap_SQLColAttributesW( void *args )
-{
-    struct SQLColAttributesW_params *params = args;
-
-    return pSQLColAttributesW(params->hstmt, params->icol, params->fDescType, params->rgbDesc,
-                              params->cbDescMax, params->pcbDesc, params->pfDesc);
-}
-
-static NTSTATUS wrap_SQLColumnPrivileges( void *args )
-{
-    struct SQLColumnPrivileges_params *params = args;
-
-    return pSQLColumnPrivileges(params->hstmt, params->szCatalogName, params->cbCatalogName,
-                                params->szSchemaName, params->cbSchemaName, params->szTableName,
-                                params->cbTableName, params->szColumnName, params->cbColumnName);
-}
-
-static NTSTATUS wrap_SQLColumnPrivilegesW( void *args )
-{
-    struct SQLColumnPrivilegesW_params *params = args;
-
-    return pSQLColumnPrivilegesW(params->hstmt, params->szCatalogName, params->cbCatalogName,
-                                 params->szSchemaName, params->cbSchemaName, params->szTableName,
-                                 params->cbTableName, params->szColumnName, params->cbColumnName);
-}
-
-static NTSTATUS wrap_SQLColumns( void *args )
-{
-    struct SQLColumns_params *params = args;
-
-    return pSQLColumns(params->StatementHandle, params->CatalogName, params->NameLength1,
-                       params->SchemaName, params->NameLength2, params->TableName, params->NameLength3,
-                       params->ColumnName, params->NameLength4);
-}
-
-static NTSTATUS wrap_SQLColumnsW( void *args )
-{
-    struct SQLColumnsW_params *params = args;
-
-    return pSQLColumnsW(params->StatementHandle, params->CatalogName, params->NameLength1,
-                        params->SchemaName, params->NameLength2, params->TableName, params->NameLength3,
-                        params->ColumnName, params->NameLength4);
-}
-
-static NTSTATUS wrap_SQLConnect( void *args )
-{
-    struct SQLConnect_params *params = args;
-
-    return pSQLConnect(params->ConnectionHandle, params->ServerName, params->NameLength1, params->UserName,
-                       params->NameLength2, params->Authentication, params->NameLength3);
-}
-
-static NTSTATUS wrap_SQLConnectW( void *args )
-{
-    struct SQLConnectW_params *params = args;
-
-    return pSQLConnectW(params->ConnectionHandle, params->ServerName, params->NameLength1,
-                        params->UserName, params->NameLength2, params->Authentication, params->NameLength3);
-}
-
-static NTSTATUS wrap_SQLCopyDesc( void *args )
-{
-    struct SQLCopyDesc_params *params = args;
-
-    return pSQLCopyDesc(params->SourceDescHandle, params->TargetDescHandle);
-}
-
-static NTSTATUS wrap_SQLDataSources( void *args )
-{
-    struct SQLDataSources_params *params = args;
-
-    return pSQLDataSources(params->EnvironmentHandle, params->Direction, params->ServerName,
-                           params->BufferLength1, params->NameLength1, params->Description,
-                           params->BufferLength2, params->NameLength2);
-}
-
-static NTSTATUS wrap_SQLDataSourcesA( void *args )
-{
-    struct SQLDataSourcesA_params *params = args;
-
-    return pSQLDataSourcesA(params->EnvironmentHandle, params->Direction, params->ServerName,
-                            params->BufferLength1, params->NameLength1, params->Description,
-                            params->BufferLength2, params->NameLength2);
-}
-
-static NTSTATUS wrap_SQLDataSourcesW( void *args )
-{
-    struct SQLDataSourcesW_params *params = args;
-
-    return pSQLDataSourcesW(params->EnvironmentHandle, params->Direction, params->ServerName,
-                            params->BufferLength1, params->NameLength1, params->Description,
-                            params->BufferLength2, params->NameLength2);
-}
-
-static NTSTATUS wrap_SQLDescribeCol( void *args )
-{
-    struct SQLDescribeCol_params *params = args;
-
-    return pSQLDescribeCol(params->StatementHandle, params->ColumnNumber, params->ColumnName,
-                           params->BufferLength, params->NameLength, params->DataType,
-                           params->ColumnSize, params->DecimalDigits, params->Nullable);
-}
-
-static NTSTATUS wrap_SQLDescribeColW( void *args )
-{
-    struct SQLDescribeColW_params *params = args;
-
-    return pSQLDescribeColW(params->StatementHandle, params->ColumnNumber, params->ColumnName,
-                            params->BufferLength, params->NameLength, params->DataType,
-                            params->ColumnSize, params->DecimalDigits, params->Nullable);
-}
-
-static NTSTATUS wrap_SQLDescribeParam( void *args )
-{
-    struct SQLDescribeParam_params *params = args;
-
-    return pSQLDescribeParam(params->hstmt, params->ipar, params->pfSqlType, params->pcbParamDef,
-                             params->pibScale, params->pfNullable);
-}
-
-static NTSTATUS wrap_SQLDisconnect( void *args )
-{
-    struct SQLDisconnect_params *params = args;
-
-    return pSQLDisconnect(params->ConnectionHandle);
-}
-
-static NTSTATUS wrap_SQLDriverConnect( void *args )
-{
-    struct SQLDriverConnect_params *params = args;
-
-    return pSQLDriverConnect(params->hdbc, params->hwnd, params->ConnectionString, params->Length,
-                             params->conn_str_out, params->conn_str_out_max,
-                             params->ptr_conn_str_out, params->driver_completion);
-}
-
-static NTSTATUS wrap_SQLDriverConnectW( void *args )
-{
-    struct SQLDriverConnectW_params *params = args;
-
-    return pSQLDriverConnectW(params->ConnectionHandle, params->WindowHandle, params->InConnectionString,
-                              params->Length, params->OutConnectionString, params->BufferLength,
-                              params->Length2, params->DriverCompletion);
-}
-
-static NTSTATUS wrap_SQLDrivers( void *args )
-{
-    struct SQLDrivers_params *params = args;
-
-    return pSQLDrivers(params->EnvironmentHandle, params->fDirection, params->szDriverDesc,
-                       params->cbDriverDescMax, params->pcbDriverDesc, params->szDriverAttributes,
-                       params->cbDriverAttrMax, params->pcbDriverAttr);
-}
-
-static NTSTATUS wrap_SQLDriversW( void *args )
-{
-    struct SQLDriversW_params *params = args;
-
-    return pSQLDriversW(params->EnvironmentHandle, params->fDirection, params->szDriverDesc,
-                        params->cbDriverDescMax, params->pcbDriverDesc, params->szDriverAttributes,
-                        params->cbDriverAttrMax, params->pcbDriverAttr);
-}
-
-static NTSTATUS wrap_SQLEndTran( void *args )
-{
-    struct SQLEndTran_params *params = args;
-
-    return pSQLEndTran(params->HandleType, params->Handle, params->CompletionType);
-}
-
-static NTSTATUS wrap_SQLError( void *args )
-{
-    struct SQLError_params *params = args;
-
-    return pSQLError(params->EnvironmentHandle, params->ConnectionHandle, params->StatementHandle,
-                     params->Sqlstate, params->NativeError, params->MessageText,
-                     params->BufferLength, params->TextLength);
-}
-
-static NTSTATUS wrap_SQLErrorW( void *args )
-{
-    struct SQLErrorW_params *params = args;
-
-    return pSQLErrorW(params->EnvironmentHandle, params->ConnectionHandle, params->StatementHandle,
-                      params->Sqlstate, params->NativeError, params->MessageText,
-                      params->BufferLength, params->TextLength);
-}
-
-static NTSTATUS wrap_SQLExecDirect( void *args )
-{
-    struct SQLExecDirect_params *params = args;
-
-    return pSQLExecDirect(params->StatementHandle, params->StatementText, params->TextLength);
-}
-
-static NTSTATUS wrap_SQLExecDirectW( void *args )
-{
-    struct SQLExecDirectW_params *params = args;
-
-    return pSQLExecDirectW(params->StatementHandle, params->StatementText, params->TextLength);
-}
-
-static NTSTATUS wrap_SQLExecute( void *args )
-{
-    struct SQLExecute_params *params = args;
-
-    return pSQLExecute(params->StatementHandle);
-}
-
-static NTSTATUS wrap_SQLExtendedFetch( void *args )
-{
-    struct SQLExtendedFetch_params *params = args;
-
-    return pSQLExtendedFetch(params->hstmt, params->fFetchType, params->irow,
-                             params->pcrow, params->rgfRowStatus);
-}
-
-static NTSTATUS wrap_SQLFetch( void *args )
-{
-    struct SQLFetch_params *params = args;
-
-    return pSQLFetch(params->StatementHandle);
-}
-
-static NTSTATUS wrap_SQLFetchScroll( void *args )
-{
-    struct SQLFetchScroll_params *params = args;
-
-    return pSQLFetchScroll(params->StatementHandle, params->FetchOrientation, params->FetchOffset);
-}
-
-static NTSTATUS wrap_SQLForeignKeys( void *args )
-{
-    struct SQLForeignKeys_params *params = args;
-
-    return pSQLForeignKeys(params->hstmt, params->szPkCatalogName, params->cbPkCatalogName,
-                           params->szPkSchemaName, params->cbPkSchemaName, params->szPkTableName,
-                           params->cbPkTableName, params->szFkCatalogName, params->cbFkCatalogName,
-                           params->szFkSchemaName, params->cbFkSchemaName, params->szFkTableName,
-                           params->cbFkTableName);
-}
-
-static NTSTATUS wrap_SQLForeignKeysW( void *args )
-{
-    struct SQLForeignKeysW_params *params = args;
-
-    return pSQLForeignKeysW(params->hstmt, params->szPkCatalogName, params->cbPkCatalogName,
-                            params->szPkSchemaName, params->cbPkSchemaName, params->szPkTableName,
-                            params->cbPkTableName, params->szFkCatalogName, params->cbFkCatalogName,
-                            params->szFkSchemaName, params->cbFkSchemaName, params->szFkTableName,
-                            params->cbFkTableName);
-}
-
-static NTSTATUS wrap_SQLFreeConnect( void *args )
-{
-    struct SQLFreeConnect_params *params = args;
-
-    return pSQLFreeConnect(params->ConnectionHandle);
-}
-
-static NTSTATUS wrap_SQLFreeEnv( void *args )
-{
-    struct SQLFreeEnv_params *params = args;
-
-    return pSQLFreeEnv(params->EnvironmentHandle);
-}
-
-static NTSTATUS wrap_SQLFreeHandle( void *args )
-{
-    struct SQLFreeHandle_params *params = args;
-
-    return pSQLFreeHandle(params->HandleType, params->Handle);
-}
-
-static NTSTATUS wrap_SQLFreeStmt( void *args )
-{
-    struct SQLFreeStmt_params *params = args;
-
-    return pSQLFreeStmt(params->StatementHandle, params->Option);
-}
-
-static NTSTATUS wrap_SQLGetConnectAttr( void *args )
-{
-    struct SQLGetConnectAttr_params *params = args;
-
-    return pSQLGetConnectAttr(params->ConnectionHandle, params->Attribute, params->Value,
-                              params->BufferLength, params->StringLength);
-}
-
-static NTSTATUS wrap_SQLGetConnectAttrW( void *args )
-{
-    struct SQLGetConnectAttrW_params *params = args;
-
-    return pSQLGetConnectAttrW(params->ConnectionHandle, params->Attribute, params->Value,
-                               params->BufferLength, params->StringLength);
-}
-
-static NTSTATUS wrap_SQLGetConnectOption( void *args )
-{
-    struct SQLGetConnectOption_params *params = args;
-
-    return pSQLGetConnectOption(params->ConnectionHandle, params->Option, params->Value);
-}
-
-static NTSTATUS wrap_SQLGetConnectOptionW( void *args )
-{
-    struct SQLGetConnectOptionW_params *params = args;
-
-    return pSQLGetConnectOptionW(params->ConnectionHandle, params->Option, params->Value);
-}
-
-static NTSTATUS wrap_SQLGetCursorName( void *args )
-{
-    struct SQLGetCursorName_params *params = args;
-
-    return pSQLGetCursorName(params->StatementHandle, params->CursorName, params->BufferLength,
-                             params->NameLength);
-}
-
-static NTSTATUS wrap_SQLGetCursorNameW( void *args )
-{
-    struct SQLGetCursorNameW_params *params = args;
-
-    return pSQLGetCursorNameW(params->StatementHandle, params->CursorName, params->BufferLength,
-                              params->NameLength);
-}
-
-static NTSTATUS wrap_SQLGetData( void *args )
-{
-    struct SQLGetData_params *params = args;
-
-    return pSQLGetData(params->StatementHandle, params->ColumnNumber, params->TargetType,
-                       params->TargetValue, params->BufferLength, params->StrLen_or_Ind);
-}
-
-static NTSTATUS wrap_SQLGetDescField( void *args )
-{
-    struct SQLGetDescField_params *params = args;
-
-    return pSQLGetDescField(params->DescriptorHandle, params->RecNumber, params->FieldIdentifier,
-                            params->Value, params->BufferLength, params->StringLength);
-}
-
-static NTSTATUS wrap_SQLGetDescFieldW( void *args )
-{
-    struct SQLGetDescFieldW_params *params = args;
-
-    return pSQLGetDescFieldW(params->DescriptorHandle, params->RecNumber, params->FieldIdentifier,
-                             params->Value, params->BufferLength, params->StringLength);
-}
-
-static NTSTATUS wrap_SQLGetDescRec( void *args )
-{
-    struct SQLGetDescRec_params *params = args;
-
-    return pSQLGetDescRec(params->DescriptorHandle, params->RecNumber, params->Name, params->BufferLength,
-                          params->StringLength, params->Type, params->SubType, params->Length,
-                          params->Precision, params->Scale, params->Nullable);
-}
-
-static NTSTATUS wrap_SQLGetDescRecW( void *args )
-{
-    struct SQLGetDescRecW_params *params = args;
-
-    return pSQLGetDescRecW(params->DescriptorHandle, params->RecNumber, params->Name, params->BufferLength,
-                           params->StringLength, params->Type, params->SubType, params->Length,
-                           params->Precision, params->Scale, params->Nullable);
-}
-
-static NTSTATUS wrap_SQLGetDiagField( void *args )
-{
-    struct SQLGetDiagField_params *params = args;
-
-    return pSQLGetDiagField(params->HandleType, params->Handle, params->RecNumber, params->DiagIdentifier,
-                            params->DiagInfo, params->BufferLength, params->StringLength);
-}
-
-static NTSTATUS wrap_SQLGetDiagFieldW( void *args )
-{
-    struct SQLGetDiagFieldW_params *params = args;
-
-    return pSQLGetDiagFieldW(params->HandleType, params->Handle, params->RecNumber, params->DiagIdentifier,
-                             params->DiagInfo, params->BufferLength, params->StringLength);
-}
-
-static NTSTATUS wrap_SQLGetDiagRec( void *args )
-{
-    struct SQLGetDiagRec_params *params = args;
-
-    return pSQLGetDiagRec(params->HandleType, params->Handle, params->RecNumber, params->Sqlstate,
-                          params->NativeError, params->MessageText, params->BufferLength,
-                          params->TextLength);
-}
-
-static NTSTATUS wrap_SQLGetDiagRecA( void *args )
-{
-    struct SQLGetDiagRecA_params *params = args;
-
-    return pSQLGetDiagRecA(params->HandleType, params->Handle, params->RecNumber, params->Sqlstate,
-                           params->NativeError, params->MessageText, params->BufferLength,
-                           params->TextLength);
-}
-
-static NTSTATUS wrap_SQLGetDiagRecW( void *args )
-{
-    struct SQLGetDiagRecW_params *params = args;
-
-    return pSQLGetDiagRecW(params->HandleType, params->Handle, params->RecNumber, params->Sqlstate,
-                           params->NativeError, params->MessageText, params->BufferLength,
-                           params->TextLength);
-}
-
-static NTSTATUS wrap_SQLGetEnvAttr( void *args )
-{
-    struct SQLGetEnvAttr_params *params = args;
-
-    return pSQLGetEnvAttr(params->EnvironmentHandle, params->Attribute, params->Value,
-                          params->BufferLength, params->StringLength);
-}
-
-static NTSTATUS wrap_SQLGetFunctions( void *args )
-{
-    struct SQLGetFunctions_params *params = args;
-
-    return pSQLGetFunctions(params->ConnectionHandle, params->FunctionId, params->Supported);
-}
-
-static NTSTATUS wrap_SQLGetInfo( void *args )
-{
-    struct SQLGetInfo_params *params = args;
-
-    return pSQLGetInfo(params->ConnectionHandle, params->InfoType, params->InfoValue,
-                       params->BufferLength, params->StringLength);
-}
-
-static NTSTATUS wrap_SQLGetInfoW( void *args )
-{
-    struct SQLGetInfoW_params *params = args;
-
-    return pSQLGetInfoW(params->ConnectionHandle, params->InfoType, params->InfoValue,
-                        params->BufferLength, params->StringLength);
-}
-
-static NTSTATUS wrap_SQLGetStmtAttr( void *args )
-{
-    struct SQLGetStmtAttr_params *params = args;
-
-    return pSQLGetStmtAttr(params->StatementHandle, params->Attribute, params->Value,
-                           params->BufferLength, params->StringLength);
-}
-
-static NTSTATUS wrap_SQLGetStmtAttrW( void *args )
-{
-    struct SQLGetStmtAttrW_params *params = args;
-
-    return pSQLGetStmtAttrW(params->StatementHandle, params->Attribute, params->Value,
-                            params->BufferLength, params->StringLength);
-}
-
-static NTSTATUS wrap_SQLGetStmtOption( void *args )
-{
-    struct SQLGetStmtOption_params *params = args;
-
-    return pSQLGetStmtOption(params->StatementHandle, params->Option, params->Value);
-}
-
-static NTSTATUS wrap_SQLGetTypeInfo( void *args )
-{
-    struct SQLGetTypeInfo_params *params = args;
-
-    return pSQLGetTypeInfo(params->StatementHandle, params->DataType);
-}
-
-static NTSTATUS wrap_SQLGetTypeInfoW( void *args )
-{
-    struct SQLGetTypeInfoW_params *params = args;
-
-    return pSQLGetTypeInfoW(params->StatementHandle, params->DataType);
-}
-
-static NTSTATUS wrap_SQLMoreResults( void *args )
-{
-    struct SQLMoreResults_params *params = args;
-
-    return pSQLMoreResults(params->StatementHandle);
-}
-
-static NTSTATUS wrap_SQLNativeSql( void *args )
-{
-    struct SQLNativeSql_params *params = args;
-
-    return pSQLNativeSql(params->hdbc, params->szSqlStrIn, params->cbSqlStrIn, params->szSqlStr,
-                         params->cbSqlStrMax, params->pcbSqlStr);
-}
-
-static NTSTATUS wrap_SQLNativeSqlW( void *args )
-{
-    struct SQLNativeSqlW_params *params = args;
-
-    return pSQLNativeSqlW(params->hdbc, params->szSqlStrIn, params->cbSqlStrIn, params->szSqlStr,
-                          params->cbSqlStrMax, params->pcbSqlStr);
-}
-
-static NTSTATUS wrap_SQLNumParams( void *args )
-{
-    struct SQLNumParams_params *params = args;
-
-    return pSQLNumParams(params->hstmt, params->pcpar);
-}
-
-static NTSTATUS wrap_SQLNumResultCols( void *args )
-{
-    struct SQLNumResultCols_params *params = args;
-
-    return pSQLNumResultCols(params->StatementHandle, params->ColumnCount);
-}
-
-static NTSTATUS wrap_SQLParamData( void *args )
-{
-    struct SQLParamData_params *params = args;
-
-    return pSQLParamData(params->StatementHandle, params->Value);
-}
-
-static NTSTATUS wrap_SQLParamOptions( void *args )
-{
-    struct SQLParamOptions_params *params = args;
-
-    return pSQLParamOptions(params->hstmt, params->crow, params->pirow);
-}
-
-static NTSTATUS wrap_SQLPrepare( void *args )
-{
-    struct SQLPrepare_params *params = args;
-
-    return pSQLPrepare(params->StatementHandle, params->StatementText, params->TextLength);
-}
-
-static NTSTATUS wrap_SQLPrepareW( void *args )
-{
-    struct SQLPrepareW_params *params = args;
-
-    return pSQLPrepareW(params->StatementHandle, params->StatementText, params->TextLength);
-}
-
-static NTSTATUS wrap_SQLPrimaryKeys( void *args )
-{
-    struct SQLPrimaryKeys_params *params = args;
-
-    return pSQLPrimaryKeys(params->hstmt, params->szCatalogName, params->cbCatalogName,
-                           params->szSchemaName, params->cbSchemaName,
-                           params->szTableName, params->cbTableName);
-}
-
-static NTSTATUS wrap_SQLPrimaryKeysW( void *args )
-{
-    struct SQLPrimaryKeysW_params *params = args;
-
-    return pSQLPrimaryKeysW(params->hstmt, params->szCatalogName, params->cbCatalogName,
-                            params->szSchemaName, params->cbSchemaName,
-                            params->szTableName, params->cbTableName);
-}
-
-static NTSTATUS wrap_SQLProcedureColumns( void *args )
-{
-    struct SQLProcedureColumns_params *params = args;
-
-    return pSQLProcedureColumns(params->hstmt, params->szCatalogName, params->cbCatalogName,
-                                params->szSchemaName, params->cbSchemaName, params->szProcName,
-                                params->cbProcName, params->szColumnName, params->cbColumnName);
-}
-
-static NTSTATUS wrap_SQLProcedureColumnsW( void *args )
-{
-    struct SQLProcedureColumnsW_params *params = args;
-
-    return pSQLProcedureColumnsW(params->hstmt, params->szCatalogName, params->cbCatalogName,
-                                 params->szSchemaName, params->cbSchemaName, params->szProcName,
-                                 params->cbProcName, params->szColumnName, params->cbColumnName);
-}
-
-static NTSTATUS wrap_SQLProcedures( void *args )
-{
-    struct SQLProcedures_params *params = args;
-
-    return pSQLProcedures(params->hstmt, params->szCatalogName, params->cbCatalogName,
-                          params->szSchemaName, params->cbSchemaName, params->szProcName,
-                          params->cbProcName);
-}
-
-static NTSTATUS wrap_SQLProceduresW( void *args )
-{
-    struct SQLProceduresW_params *params = args;
-
-    return pSQLProceduresW(params->hstmt, params->szCatalogName, params->cbCatalogName,
-                           params->szSchemaName, params->cbSchemaName, params->szProcName,
-                           params->cbProcName);
-}
-
-static NTSTATUS wrap_SQLPutData( void *args )
-{
-    struct SQLPutData_params *params = args;
-
-    return pSQLPutData(params->StatementHandle, params->Data, params->StrLen_or_Ind);
-}
-
-static NTSTATUS wrap_SQLRowCount( void *args )
-{
-    struct SQLRowCount_params *params = args;
-
-    return pSQLRowCount(params->StatementHandle, params->RowCount);
-}
-
-static NTSTATUS wrap_SQLSetConnectAttr( void *args )
-{
-    struct SQLSetConnectAttr_params *params = args;
-
-    return pSQLSetConnectAttr(params->ConnectionHandle, params->Attribute, params->Value,
-                              params->StringLength);
-}
-
-static NTSTATUS wrap_SQLSetConnectAttrW( void *args )
-{
-    struct SQLSetConnectAttrW_params *params = args;
-
-    return pSQLSetConnectAttrW(params->ConnectionHandle, params->Attribute, params->Value,
-                               params->StringLength);
-}
-
-static NTSTATUS wrap_SQLSetConnectOption( void *args )
-{
-    struct SQLSetConnectOption_params *params = args;
-
-    return pSQLSetConnectOption(params->ConnectionHandle, params->Option, params->Value);
-}
-
-static NTSTATUS wrap_SQLSetConnectOptionW( void *args )
-{
-    struct SQLSetConnectOptionW_params *params = args;
-
-    return pSQLSetConnectOptionW(params->ConnectionHandle, params->Option, params->Value);
-}
-
-static NTSTATUS wrap_SQLSetCursorName( void *args )
-{
-    struct SQLSetCursorName_params *params = args;
-
-    return pSQLSetCursorName(params->StatementHandle, params->CursorName, params->NameLength);
-}
-
-static NTSTATUS wrap_SQLSetCursorNameW( void *args )
-{
-    struct SQLSetCursorNameW_params *params = args;
-
-    return pSQLSetCursorNameW(params->StatementHandle, params->CursorName, params->NameLength);
-}
-
-static NTSTATUS wrap_SQLSetDescField( void *args )
-{
-    struct SQLSetDescField_params *params = args;
-
-    return pSQLSetDescField(params->DescriptorHandle, params->RecNumber, params->FieldIdentifier,
-                            params->Value, params->BufferLength);
-}
-
-static NTSTATUS wrap_SQLSetDescFieldW( void *args )
-{
-    struct SQLSetDescFieldW_params *params = args;
-
-    return pSQLSetDescFieldW(params->DescriptorHandle, params->RecNumber, params->FieldIdentifier,
-                             params->Value, params->BufferLength);
-}
-
-static NTSTATUS wrap_SQLSetDescRec( void *args )
-{
-    struct SQLSetDescRec_params *params = args;
-
-    return pSQLSetDescRec(params->DescriptorHandle, params->RecNumber, params->Type, params->SubType,
-                          params->Length, params->Precision, params->Scale, params->Data,
-                          params->StringLength, params->Indicator);
-}
-
-static NTSTATUS wrap_SQLSetEnvAttr( void *args )
-{
-    struct SQLSetEnvAttr_params *params = args;
-
-    return pSQLSetEnvAttr(params->EnvironmentHandle, params->Attribute, params->Value, params->StringLength);
-}
-
-static NTSTATUS wrap_SQLSetParam( void *args )
-{
-    struct SQLSetParam_params *params = args;
-
-    return pSQLSetParam(params->StatementHandle, params->ParameterNumber, params->ValueType,
-                        params->ParameterType, params->LengthPrecision, params->ParameterScale,
-                        params->ParameterValue, params->StrLen_or_Ind);
-}
-
-static NTSTATUS wrap_SQLSetPos( void *args )
-{
-    struct SQLSetPos_params *params = args;
-
-    return pSQLSetPos(params->hstmt, params->irow, params->fOption, params->fLock);
-}
-
-static NTSTATUS wrap_SQLSetScrollOptions( void *args )
-{
-    struct SQLSetScrollOptions_params *params = args;
-
-    return pSQLSetScrollOptions(params->statement_handle, params->f_concurrency,
-                                params->crow_keyset, params->crow_rowset);
-}
-
-static NTSTATUS wrap_SQLSetStmtAttr( void *args )
-{
-    struct SQLSetStmtAttr_params *params = args;
-
-    return pSQLSetStmtAttr(params->StatementHandle, params->Attribute, params->Value, params->StringLength);
-}
-
-static NTSTATUS wrap_SQLSetStmtAttrW( void *args )
-{
-    struct SQLSetStmtAttrW_params *params = args;
-
-    return pSQLSetStmtAttrW(params->StatementHandle, params->Attribute, params->Value, params->StringLength);
-}
-
-static NTSTATUS wrap_SQLSetStmtOption( void *args )
-{
-    struct SQLSetStmtOption_params *params = args;
-
-    return pSQLSetStmtOption(params->StatementHandle, params->Option, params->Value);
-}
-
-static NTSTATUS wrap_SQLSpecialColumns( void *args )
-{
-    struct SQLSpecialColumns_params *params = args;
-
-    return pSQLSpecialColumns(params->StatementHandle, params->IdentifierType, params->CatalogName,
-                              params->NameLength1, params->SchemaName, params->NameLength2,
-                              params->TableName, params->NameLength3, params->Scope, params->Nullable);
-}
-
-static NTSTATUS wrap_SQLSpecialColumnsW( void *args )
-{
-    struct SQLSpecialColumnsW_params *params = args;
-
-    return pSQLSpecialColumnsW(params->StatementHandle, params->IdentifierType, params->CatalogName,
-                               params->NameLength1, params->SchemaName, params->NameLength2,
-                               params->TableName, params->NameLength3, params->Scope, params->Nullable);
-}
-
-static NTSTATUS wrap_SQLStatistics( void *args )
-{
-    struct SQLStatistics_params *params = args;
-
-    return pSQLStatistics(params->StatementHandle, params->CatalogName, params->NameLength1,
-                          params->SchemaName, params->NameLength2, params->TableName,
-                          params->NameLength3, params->Unique, params->Reserved);
-}
-
-static NTSTATUS wrap_SQLStatisticsW( void *args )
-{
-    struct SQLStatisticsW_params *params = args;
-
-    return pSQLStatisticsW(params->StatementHandle, params->CatalogName, params->NameLength1,
-                           params->SchemaName, params->NameLength2, params->TableName,
-                           params->NameLength3, params->Unique, params->Reserved);
-}
-
-static NTSTATUS wrap_SQLTablePrivileges( void *args )
-{
-    struct SQLTablePrivileges_params *params = args;
-
-    return pSQLTablePrivileges(params->hstmt, params->szCatalogName, params->cbCatalogName,
-                               params->szSchemaName, params->cbSchemaName, params->szTableName,
-                               params->cbTableName);
-}
-
-static NTSTATUS wrap_SQLTablePrivilegesW( void *args )
-{
-    struct SQLTablePrivilegesW_params *params = args;
-
-    return pSQLTablePrivilegesW(params->hstmt, params->szCatalogName, params->cbCatalogName,
-                                params->szSchemaName, params->cbSchemaName, params->szTableName,
-                                params->cbTableName);
-}
-
-static NTSTATUS wrap_SQLTables( void *args )
-{
-    struct SQLTables_params *params = args;
-
-    return pSQLTables(params->StatementHandle, params->CatalogName, params->NameLength1,
-                      params->SchemaName, params->NameLength2, params->TableName,
-                      params->NameLength3, params->TableType, params->NameLength4);
-}
-
-static NTSTATUS wrap_SQLTablesW( void *args )
-{
-    struct SQLTablesW_params *params = args;
-
-    return pSQLTablesW(params->StatementHandle, params->CatalogName, params->NameLength1,
-                       params->SchemaName, params->NameLength2, params->TableName,
-                       params->NameLength3, params->TableType, params->NameLength4);
-}
-
-static NTSTATUS wrap_SQLTransact( void *args )
-{
-    struct SQLTransact_params *params = args;
-
-    return pSQLTransact(params->EnvironmentHandle, params->ConnectionHandle, params->CompletionType);
-}
-
-unixlib_entry_t __wine_unix_call_funcs[NB_ODBC_FUNCS] =
-{
-    odbc_process_attach,
-    odbc_process_detach,
-};
-
-static NTSTATUS error_func( void *args )
-{
-    return SQL_ERROR;
-}
-
-static NTSTATUS load_odbc(void)
-{
-   const char *s = getenv("LIB_ODBC_DRIVER_MANAGER");
-
-#ifdef SONAME_LIBODBC
-   if (!s || !s[0]) s = SONAME_LIBODBC;
-#endif
-   if (!s || !s[0] || !(libodbc = dlopen( s, RTLD_LAZY | RTLD_GLOBAL )))
-   {
-       ERR_(winediag)("failed to open library %s: %s\n", debugstr_a(s), dlerror());
-       return STATUS_DLL_NOT_FOUND;
-   }
-
-#define LOAD_FUNC(name) \
-   __wine_unix_call_funcs[unix_##name] = (p##name = dlsym( libodbc, #name )) ? wrap_##name : error_func
-
-    LOAD_FUNC(SQLAllocConnect);
-    LOAD_FUNC(SQLAllocEnv);
-    LOAD_FUNC(SQLAllocHandle);
-    LOAD_FUNC(SQLAllocHandleStd);
-    LOAD_FUNC(SQLAllocStmt);
-    LOAD_FUNC(SQLBindCol);
-    LOAD_FUNC(SQLBindParam);
-    LOAD_FUNC(SQLBindParameter);
-    LOAD_FUNC(SQLBrowseConnect);
-    LOAD_FUNC(SQLBrowseConnectW);
-    LOAD_FUNC(SQLBulkOperations);
-    LOAD_FUNC(SQLCancel);
-    LOAD_FUNC(SQLCloseCursor);
-    LOAD_FUNC(SQLColAttribute);
-    LOAD_FUNC(SQLColAttributeW);
-    LOAD_FUNC(SQLColAttributes);
-    LOAD_FUNC(SQLColAttributesW);
-    LOAD_FUNC(SQLColumnPrivileges);
-    LOAD_FUNC(SQLColumnPrivilegesW);
-    LOAD_FUNC(SQLColumns);
-    LOAD_FUNC(SQLColumnsW);
-    LOAD_FUNC(SQLConnect);
-    LOAD_FUNC(SQLConnectW);
-    LOAD_FUNC(SQLCopyDesc);
-    LOAD_FUNC(SQLDataSources);
-    LOAD_FUNC(SQLDataSourcesA);
-    LOAD_FUNC(SQLDataSourcesW);
-    LOAD_FUNC(SQLDescribeCol);
-    LOAD_FUNC(SQLDescribeColW);
-    LOAD_FUNC(SQLDescribeParam);
-    LOAD_FUNC(SQLDisconnect);
-    LOAD_FUNC(SQLDriverConnect);
-    LOAD_FUNC(SQLDriverConnectW);
-    LOAD_FUNC(SQLDrivers);
-    LOAD_FUNC(SQLDriversW);
-    LOAD_FUNC(SQLEndTran);
-    LOAD_FUNC(SQLError);
-    LOAD_FUNC(SQLErrorW);
-    LOAD_FUNC(SQLExecDirect);
-    LOAD_FUNC(SQLExecDirectW);
-    LOAD_FUNC(SQLExecute);
-    LOAD_FUNC(SQLExtendedFetch);
-    LOAD_FUNC(SQLFetch);
-    LOAD_FUNC(SQLFetchScroll);
-    LOAD_FUNC(SQLForeignKeys);
-    LOAD_FUNC(SQLForeignKeysW);
-    LOAD_FUNC(SQLFreeConnect);
-    LOAD_FUNC(SQLFreeEnv);
-    LOAD_FUNC(SQLFreeHandle);
-    LOAD_FUNC(SQLFreeStmt);
-    LOAD_FUNC(SQLGetConnectAttr);
-    LOAD_FUNC(SQLGetConnectAttrW);
-    LOAD_FUNC(SQLGetConnectOption);
-    LOAD_FUNC(SQLGetConnectOptionW);
-    LOAD_FUNC(SQLGetCursorName);
-    LOAD_FUNC(SQLGetCursorNameW);
-    LOAD_FUNC(SQLGetData);
-    LOAD_FUNC(SQLGetDescField);
-    LOAD_FUNC(SQLGetDescFieldW);
-    LOAD_FUNC(SQLGetDescRec);
-    LOAD_FUNC(SQLGetDescRecW);
-    LOAD_FUNC(SQLGetDiagField);
-    LOAD_FUNC(SQLGetDiagFieldW);
-    LOAD_FUNC(SQLGetDiagRec);
-    LOAD_FUNC(SQLGetDiagRecA);
-    LOAD_FUNC(SQLGetDiagRecW);
-    LOAD_FUNC(SQLGetEnvAttr);
-    LOAD_FUNC(SQLGetFunctions);
-    LOAD_FUNC(SQLGetInfo);
-    LOAD_FUNC(SQLGetInfoW);
-    LOAD_FUNC(SQLGetStmtAttr);
-    LOAD_FUNC(SQLGetStmtAttrW);
-    LOAD_FUNC(SQLGetStmtOption);
-    LOAD_FUNC(SQLGetTypeInfo);
-    LOAD_FUNC(SQLGetTypeInfoW);
-    LOAD_FUNC(SQLMoreResults);
-    LOAD_FUNC(SQLNativeSql);
-    LOAD_FUNC(SQLNativeSqlW);
-    LOAD_FUNC(SQLNumParams);
-    LOAD_FUNC(SQLNumResultCols);
-    LOAD_FUNC(SQLParamData);
-    LOAD_FUNC(SQLParamOptions);
-    LOAD_FUNC(SQLPrepare);
-    LOAD_FUNC(SQLPrepareW);
-    LOAD_FUNC(SQLPrimaryKeys);
-    LOAD_FUNC(SQLPrimaryKeysW);
-    LOAD_FUNC(SQLProcedureColumns);
-    LOAD_FUNC(SQLProcedureColumnsW);
-    LOAD_FUNC(SQLProcedures);
-    LOAD_FUNC(SQLProceduresW);
-    LOAD_FUNC(SQLPutData);
-    LOAD_FUNC(SQLRowCount);
-    LOAD_FUNC(SQLSetConnectAttr);
-    LOAD_FUNC(SQLSetConnectAttrW);
-    LOAD_FUNC(SQLSetConnectOption);
-    LOAD_FUNC(SQLSetConnectOptionW);
-    LOAD_FUNC(SQLSetCursorName);
-    LOAD_FUNC(SQLSetCursorNameW);
-    LOAD_FUNC(SQLSetDescField);
-    LOAD_FUNC(SQLSetDescFieldW);
-    LOAD_FUNC(SQLSetDescRec);
-    LOAD_FUNC(SQLSetEnvAttr);
-    LOAD_FUNC(SQLSetParam);
-    LOAD_FUNC(SQLSetPos);
-    LOAD_FUNC(SQLSetScrollOptions);
-    LOAD_FUNC(SQLSetStmtAttr);
-    LOAD_FUNC(SQLSetStmtAttrW);
-    LOAD_FUNC(SQLSetStmtOption);
-    LOAD_FUNC(SQLSpecialColumns);
-    LOAD_FUNC(SQLSpecialColumnsW);
-    LOAD_FUNC(SQLStatistics);
-    LOAD_FUNC(SQLStatisticsW);
-    LOAD_FUNC(SQLTablePrivileges);
-    LOAD_FUNC(SQLTablePrivilegesW);
-    LOAD_FUNC(SQLTables);
-    LOAD_FUNC(SQLTablesW);
-    LOAD_FUNC(SQLTransact);
-#undef LOAD_FUNC
-    return STATUS_SUCCESS;
-}
diff --git a/dlls/odbc32/unixlib.h b/dlls/odbc32/unixlib.h
deleted file mode 100644
index 13ce8d0883b..00000000000
--- a/dlls/odbc32/unixlib.h
+++ /dev/null
@@ -1,278 +0,0 @@
-/*
- * Win32 ODBC functions
- *
- * Copyright 1999 Xiang Li, Corel Corporation
- *
- * This library is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2.1 of the License, or (at your option) any later version.
- *
- * This library is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with this library; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
- *
- * NOTES:
- *   Proxy ODBC driver manager.  This manager delegates all ODBC
- *   calls to a real ODBC driver manager named by the environment
- *   variable LIB_ODBC_DRIVER_MANAGER, or to libodbc.so if the
- *   variable is not set.
- */
-
-#include <stdarg.h>
-
-#include "windef.h"
-#include "winbase.h"
-
-#include "sql.h"
-#include "sqltypes.h"
-#include "sqlext.h"
-
-#include "wine/unixlib.h"
-
-enum sql_funcs
-{
-    process_attach,
-    process_detach,
-    unix_SQLAllocConnect,
-    unix_SQLAllocEnv,
-    unix_SQLAllocHandle,
-    unix_SQLAllocHandleStd,
-    unix_SQLAllocStmt,
-    unix_SQLBindCol,
-    unix_SQLBindParam,
-    unix_SQLBindParameter,
-    unix_SQLBrowseConnect,
-    unix_SQLBrowseConnectW,
-    unix_SQLBulkOperations,
-    unix_SQLCancel,
-    unix_SQLCloseCursor,
-    unix_SQLColAttribute,
-    unix_SQLColAttributeW,
-    unix_SQLColAttributes,
-    unix_SQLColAttributesW,
-    unix_SQLColumnPrivileges,
-    unix_SQLColumnPrivilegesW,
-    unix_SQLColumns,
-    unix_SQLColumnsW,
-    unix_SQLConnect,
-    unix_SQLConnectW,
-    unix_SQLCopyDesc,
-    unix_SQLDataSources,
-    unix_SQLDataSourcesA,
-    unix_SQLDataSourcesW,
-    unix_SQLDescribeCol,
-    unix_SQLDescribeColW,
-    unix_SQLDescribeParam,
-    unix_SQLDisconnect,
-    unix_SQLDriverConnect,
-    unix_SQLDriverConnectW,
-    unix_SQLDrivers,
-    unix_SQLDriversW,
-    unix_SQLEndTran,
-    unix_SQLError,
-    unix_SQLErrorW,
-    unix_SQLExecDirect,
-    unix_SQLExecDirectW,
-    unix_SQLExecute,
-    unix_SQLExtendedFetch,
-    unix_SQLFetch,
-    unix_SQLFetchScroll,
-    unix_SQLForeignKeys,
-    unix_SQLForeignKeysW,
-    unix_SQLFreeConnect,
-    unix_SQLFreeEnv,
-    unix_SQLFreeHandle,
-    unix_SQLFreeStmt,
-    unix_SQLGetConnectAttr,
-    unix_SQLGetConnectAttrW,
-    unix_SQLGetConnectOption,
-    unix_SQLGetConnectOptionW,
-    unix_SQLGetCursorName,
-    unix_SQLGetCursorNameW,
-    unix_SQLGetData,
-    unix_SQLGetDescField,
-    unix_SQLGetDescFieldW,
-    unix_SQLGetDescRec,
-    unix_SQLGetDescRecW,
-    unix_SQLGetDiagField,
-    unix_SQLGetDiagFieldW,
-    unix_SQLGetDiagRec,
-    unix_SQLGetDiagRecA,
-    unix_SQLGetDiagRecW,
-    unix_SQLGetEnvAttr,
-    unix_SQLGetFunctions,
-    unix_SQLGetInfo,
-    unix_SQLGetInfoW,
-    unix_SQLGetStmtAttr,
-    unix_SQLGetStmtAttrW,
-    unix_SQLGetStmtOption,
-    unix_SQLGetTypeInfo,
-    unix_SQLGetTypeInfoW,
-    unix_SQLMoreResults,
-    unix_SQLNativeSql,
-    unix_SQLNativeSqlW,
-    unix_SQLNumParams,
-    unix_SQLNumResultCols,
-    unix_SQLParamData,
-    unix_SQLParamOptions,
-    unix_SQLPrepare,
-    unix_SQLPrepareW,
-    unix_SQLPrimaryKeys,
-    unix_SQLPrimaryKeysW,
-    unix_SQLProcedureColumns,
-    unix_SQLProcedureColumnsW,
-    unix_SQLProcedures,
-    unix_SQLProceduresW,
-    unix_SQLPutData,
-    unix_SQLRowCount,
-    unix_SQLSetConnectAttr,
-    unix_SQLSetConnectAttrW,
-    unix_SQLSetConnectOption,
-    unix_SQLSetConnectOptionW,
-    unix_SQLSetCursorName,
-    unix_SQLSetCursorNameW,
-    unix_SQLSetDescField,
-    unix_SQLSetDescFieldW,
-    unix_SQLSetDescRec,
-    unix_SQLSetEnvAttr,
-    unix_SQLSetParam,
-    unix_SQLSetPos,
-    unix_SQLSetScrollOptions,
-    unix_SQLSetStmtAttr,
-    unix_SQLSetStmtAttrW,
-    unix_SQLSetStmtOption,
-    unix_SQLSpecialColumns,
-    unix_SQLSpecialColumnsW,
-    unix_SQLStatistics,
-    unix_SQLStatisticsW,
-    unix_SQLTablePrivileges,
-    unix_SQLTablePrivilegesW,
-    unix_SQLTables,
-    unix_SQLTablesW,
-    unix_SQLTransact,
-    NB_ODBC_FUNCS
-};
-
-struct SQLAllocConnect_params { SQLHENV EnvironmentHandle; SQLHDBC *ConnectionHandle; };
-struct SQLAllocEnv_params { SQLHENV *EnvironmentHandle; };
-struct SQLAllocHandle_params { SQLSMALLINT HandleType; SQLHANDLE InputHandle; SQLHANDLE *OutputHandle; };
-struct SQLAllocHandleStd_params { SQLSMALLINT HandleType; SQLHANDLE InputHandle; SQLHANDLE *OutputHandle; };
-struct SQLAllocStmt_params { SQLHDBC ConnectionHandle; SQLHSTMT *StatementHandle; };
-struct SQLBindCol_params { SQLHSTMT StatementHandle; SQLUSMALLINT ColumnNumber; SQLSMALLINT TargetType; SQLPOINTER TargetValue; SQLLEN BufferLength; SQLLEN *StrLen_or_Ind; };
-struct SQLBindParam_params { SQLHSTMT StatementHandle; SQLUSMALLINT ParameterNumber; SQLSMALLINT ValueType; SQLSMALLINT ParameterType; SQLULEN LengthPrecision; SQLSMALLINT ParameterScale; SQLPOINTER ParameterValue; SQLLEN *StrLen_or_Ind; };
-struct SQLBindParameter_params { SQLHSTMT hstmt; SQLUSMALLINT ipar; SQLSMALLINT fParamType; SQLSMALLINT fCType; SQLSMALLINT fSqlType; SQLULEN cbColDef; SQLSMALLINT ibScale; SQLPOINTER rgbValue; SQLLEN cbValueMax; SQLLEN *pcbValue; };
-struct SQLBrowseConnect_params { SQLHDBC hdbc; SQLCHAR *szConnStrIn; SQLSMALLINT cbConnStrIn; SQLCHAR *szConnStrOut; SQLSMALLINT cbConnStrOutMax; SQLSMALLINT *pcbConnStrOut; };
-struct SQLBrowseConnectW_params { SQLHDBC hdbc; SQLWCHAR *szConnStrIn; SQLSMALLINT cbConnStrIn; SQLWCHAR *szConnStrOut; SQLSMALLINT cbConnStrOutMax; SQLSMALLINT *pcbConnStrOut; };
-struct SQLBulkOperations_params { SQLHSTMT StatementHandle; SQLSMALLINT Operation; };
-struct SQLCancel_params { SQLHSTMT StatementHandle; };
-struct SQLCloseCursor_params { SQLHSTMT StatementHandle; };
-struct SQLColAttribute_params { SQLHSTMT StatementHandle; SQLUSMALLINT ColumnNumber; SQLUSMALLINT FieldIdentifier; SQLPOINTER CharacterAttribute; SQLSMALLINT BufferLength; SQLSMALLINT *StringLength; SQLLEN *NumericAttribute; };
-struct SQLColAttributeW_params { SQLHSTMT StatementHandle; SQLUSMALLINT ColumnNumber; SQLUSMALLINT FieldIdentifier; SQLPOINTER CharacterAttribute; SQLSMALLINT BufferLength; SQLSMALLINT *StringLength; SQLLEN *NumericAttribute; };
-struct SQLColAttributes_params { SQLHSTMT hstmt; SQLUSMALLINT icol; SQLUSMALLINT fDescType; SQLPOINTER rgbDesc; SQLSMALLINT cbDescMax; SQLSMALLINT *pcbDesc; SQLLEN *pfDesc; };
-struct SQLColAttributesW_params { SQLHSTMT hstmt; SQLUSMALLINT icol; SQLUSMALLINT fDescType; SQLPOINTER rgbDesc; SQLSMALLINT cbDescMax; SQLSMALLINT *pcbDesc; SQLLEN *pfDesc; };
-struct SQLColumnPrivileges_params { SQLHSTMT hstmt; SQLCHAR *szCatalogName; SQLSMALLINT cbCatalogName; SQLCHAR *szSchemaName; SQLSMALLINT cbSchemaName; SQLCHAR *szTableName; SQLSMALLINT cbTableName; SQLCHAR *szColumnName; SQLSMALLINT cbColumnName; };
-struct SQLColumnPrivilegesW_params { SQLHSTMT hstmt; SQLWCHAR *szCatalogName; SQLSMALLINT cbCatalogName; SQLWCHAR *szSchemaName; SQLSMALLINT cbSchemaName; SQLWCHAR *szTableName; SQLSMALLINT cbTableName; SQLWCHAR *szColumnName; SQLSMALLINT cbColumnName; };
-struct SQLColumns_params { SQLHSTMT StatementHandle; SQLCHAR *CatalogName; SQLSMALLINT NameLength1; SQLCHAR *SchemaName; SQLSMALLINT NameLength2; SQLCHAR *TableName; SQLSMALLINT NameLength3; SQLCHAR *ColumnName; SQLSMALLINT NameLength4; };
-struct SQLColumnsW_params { SQLHSTMT StatementHandle; WCHAR *CatalogName; SQLSMALLINT NameLength1; WCHAR *SchemaName; SQLSMALLINT NameLength2; WCHAR *TableName; SQLSMALLINT NameLength3; WCHAR *ColumnName; SQLSMALLINT NameLength4; };
-struct SQLConnect_params { SQLHDBC ConnectionHandle; SQLCHAR *ServerName; SQLSMALLINT NameLength1; SQLCHAR *UserName; SQLSMALLINT NameLength2; SQLCHAR *Authentication; SQLSMALLINT NameLength3; };
-struct SQLConnectW_params { SQLHDBC ConnectionHandle; WCHAR *ServerName; SQLSMALLINT NameLength1; WCHAR *UserName; SQLSMALLINT NameLength2; WCHAR *Authentication; SQLSMALLINT NameLength3; };
-struct SQLCopyDesc_params { SQLHDESC SourceDescHandle; SQLHDESC TargetDescHandle; };
-struct SQLDataSources_params { SQLHENV EnvironmentHandle; SQLUSMALLINT Direction; SQLCHAR *ServerName; SQLSMALLINT BufferLength1; SQLSMALLINT *NameLength1; SQLCHAR *Description; SQLSMALLINT BufferLength2; SQLSMALLINT *NameLength2; };
-struct SQLDataSourcesA_params { SQLHENV EnvironmentHandle; SQLUSMALLINT Direction; SQLCHAR *ServerName; SQLSMALLINT BufferLength1; SQLSMALLINT *NameLength1; SQLCHAR *Description; SQLSMALLINT BufferLength2; SQLSMALLINT *NameLength2; };
-struct SQLDataSourcesW_params { SQLHENV EnvironmentHandle; SQLUSMALLINT Direction; WCHAR *ServerName; SQLSMALLINT BufferLength1; SQLSMALLINT *NameLength1; WCHAR *Description; SQLSMALLINT BufferLength2; SQLSMALLINT *NameLength2; };
-struct SQLDescribeCol_params { SQLHSTMT StatementHandle; SQLUSMALLINT ColumnNumber; SQLCHAR *ColumnName; SQLSMALLINT BufferLength; SQLSMALLINT *NameLength; SQLSMALLINT *DataType; SQLULEN *ColumnSize; SQLSMALLINT *DecimalDigits; SQLSMALLINT *Nullable; };
-struct SQLDescribeColW_params { SQLHSTMT StatementHandle; SQLUSMALLINT ColumnNumber; WCHAR *ColumnName; SQLSMALLINT BufferLength; SQLSMALLINT *NameLength; SQLSMALLINT *DataType; SQLULEN *ColumnSize; SQLSMALLINT *DecimalDigits; SQLSMALLINT *Nullable; };
-struct SQLDescribeParam_params { SQLHSTMT hstmt; SQLUSMALLINT ipar; SQLSMALLINT *pfSqlType; SQLULEN *pcbParamDef; SQLSMALLINT *pibScale; SQLSMALLINT *pfNullable; };
-struct SQLDisconnect_params { SQLHDBC ConnectionHandle; };
-struct SQLDriverConnect_params { SQLHDBC hdbc; SQLHWND hwnd; SQLCHAR *ConnectionString; SQLSMALLINT Length; SQLCHAR *conn_str_out; SQLSMALLINT conn_str_out_max; SQLSMALLINT *ptr_conn_str_out; SQLUSMALLINT driver_completion; };
-struct SQLDriverConnectW_params { SQLHDBC ConnectionHandle; SQLHWND WindowHandle; WCHAR *InConnectionString; SQLSMALLINT Length; WCHAR *OutConnectionString; SQLSMALLINT BufferLength; SQLSMALLINT *Length2; SQLUSMALLINT DriverCompletion; };
-struct SQLDrivers_params { SQLHENV EnvironmentHandle; SQLUSMALLINT fDirection; SQLCHAR *szDriverDesc; SQLSMALLINT cbDriverDescMax; SQLSMALLINT *pcbDriverDesc; SQLCHAR *szDriverAttributes; SQLSMALLINT cbDriverAttrMax; SQLSMALLINT *pcbDriverAttr; };
-struct SQLDriversW_params { SQLHENV EnvironmentHandle; SQLUSMALLINT fDirection; SQLWCHAR *szDriverDesc; SQLSMALLINT cbDriverDescMax; SQLSMALLINT *pcbDriverDesc; SQLWCHAR *szDriverAttributes; SQLSMALLINT cbDriverAttrMax; SQLSMALLINT *pcbDriverAttr; };
-struct SQLEndTran_params { SQLSMALLINT HandleType; SQLHANDLE Handle; SQLSMALLINT CompletionType; };
-struct SQLError_params { SQLHENV EnvironmentHandle; SQLHDBC ConnectionHandle; SQLHSTMT StatementHandle; SQLCHAR *Sqlstate; SQLINTEGER *NativeError; SQLCHAR *MessageText; SQLSMALLINT BufferLength; SQLSMALLINT *TextLength; };
-struct SQLErrorW_params { SQLHENV EnvironmentHandle; SQLHDBC ConnectionHandle; SQLHSTMT StatementHandle; WCHAR *Sqlstate; SQLINTEGER *NativeError; WCHAR *MessageText; SQLSMALLINT BufferLength; SQLSMALLINT *TextLength; };
-struct SQLExecDirect_params { SQLHSTMT StatementHandle; SQLCHAR *StatementText; SQLINTEGER TextLength; };
-struct SQLExecDirectW_params { SQLHSTMT StatementHandle; WCHAR *StatementText; SQLINTEGER TextLength; };
-struct SQLExecute_params { SQLHSTMT StatementHandle; };
-struct SQLExtendedFetch_params { SQLHSTMT hstmt; SQLUSMALLINT fFetchType; SQLLEN irow; SQLULEN *pcrow; SQLUSMALLINT *rgfRowStatus; };
-struct SQLFetch_params { SQLHSTMT StatementHandle; };
-struct SQLFetchScroll_params { SQLHSTMT StatementHandle; SQLSMALLINT FetchOrientation; SQLLEN FetchOffset; };
-struct SQLForeignKeys_params { SQLHSTMT hstmt; SQLCHAR *szPkCatalogName; SQLSMALLINT cbPkCatalogName; SQLCHAR *szPkSchemaName; SQLSMALLINT cbPkSchemaName; SQLCHAR *szPkTableName; SQLSMALLINT cbPkTableName; SQLCHAR *szFkCatalogName; SQLSMALLINT cbFkCatalogName; SQLCHAR *szFkSchemaName; SQLSMALLINT cbFkSchemaName; SQLCHAR *szFkTableName; SQLSMALLINT cbFkTableName; };
-struct SQLForeignKeysW_params { SQLHSTMT hstmt; SQLWCHAR *szPkCatalogName; SQLSMALLINT cbPkCatalogName; SQLWCHAR *szPkSchemaName; SQLSMALLINT cbPkSchemaName; SQLWCHAR *szPkTableName; SQLSMALLINT cbPkTableName; SQLWCHAR *szFkCatalogName; SQLSMALLINT cbFkCatalogName; SQLWCHAR *szFkSchemaName; SQLSMALLINT cbFkSchemaName; SQLWCHAR *szFkTableName; SQLSMALLINT cbFkTableName; };
-struct SQLFreeConnect_params { SQLHDBC ConnectionHandle; };
-struct SQLFreeEnv_params { SQLHENV EnvironmentHandle; };
-struct SQLFreeHandle_params { SQLSMALLINT HandleType; SQLHANDLE Handle; };
-struct SQLFreeStmt_params { SQLHSTMT StatementHandle; SQLUSMALLINT Option; };
-struct SQLGetConnectAttr_params { SQLHDBC ConnectionHandle; SQLINTEGER Attribute; SQLPOINTER Value; SQLINTEGER BufferLength; SQLINTEGER *StringLength; };
-struct SQLGetConnectAttrW_params { SQLHDBC ConnectionHandle; SQLINTEGER Attribute; SQLPOINTER Value; SQLINTEGER BufferLength; SQLINTEGER *StringLength; };
-struct SQLGetConnectOption_params { SQLHDBC ConnectionHandle; SQLUSMALLINT Option; SQLPOINTER Value; };
-struct SQLGetConnectOptionW_params { SQLHDBC ConnectionHandle; SQLUSMALLINT Option; SQLPOINTER Value; };
-struct SQLGetCursorName_params { SQLHSTMT StatementHandle; SQLCHAR *CursorName; SQLSMALLINT BufferLength; SQLSMALLINT *NameLength; };
-struct SQLGetCursorNameW_params { SQLHSTMT StatementHandle; WCHAR *CursorName; SQLSMALLINT BufferLength; SQLSMALLINT *NameLength; };
-struct SQLGetData_params { SQLHSTMT StatementHandle; SQLUSMALLINT ColumnNumber; SQLSMALLINT TargetType; SQLPOINTER TargetValue; SQLLEN BufferLength; SQLLEN *StrLen_or_Ind; };
-struct SQLGetDescField_params { SQLHDESC DescriptorHandle; SQLSMALLINT RecNumber; SQLSMALLINT FieldIdentifier; SQLPOINTER Value; SQLINTEGER BufferLength; SQLINTEGER *StringLength; };
-struct SQLGetDescFieldW_params { SQLHDESC DescriptorHandle; SQLSMALLINT RecNumber; SQLSMALLINT FieldIdentifier; SQLPOINTER Value; SQLINTEGER BufferLength; SQLINTEGER *StringLength; };
-struct SQLGetDescRec_params { SQLHDESC DescriptorHandle; SQLSMALLINT RecNumber; SQLCHAR *Name; SQLSMALLINT BufferLength; SQLSMALLINT *StringLength; SQLSMALLINT *Type; SQLSMALLINT *SubType; SQLLEN *Length; SQLSMALLINT *Precision; SQLSMALLINT *Scale; SQLSMALLINT *Nullable; };
-struct SQLGetDescRecW_params { SQLHDESC DescriptorHandle; SQLSMALLINT RecNumber; WCHAR *Name; SQLSMALLINT BufferLength; SQLSMALLINT *StringLength; SQLSMALLINT *Type; SQLSMALLINT *SubType; SQLLEN *Length; SQLSMALLINT *Precision; SQLSMALLINT *Scale; SQLSMALLINT *Nullable; };
-struct SQLGetDiagField_params { SQLSMALLINT HandleType; SQLHANDLE Handle; SQLSMALLINT RecNumber; SQLSMALLINT DiagIdentifier; SQLPOINTER DiagInfo; SQLSMALLINT BufferLength; SQLSMALLINT *StringLength; };
-struct SQLGetDiagFieldW_params { SQLSMALLINT HandleType; SQLHANDLE Handle; SQLSMALLINT RecNumber; SQLSMALLINT DiagIdentifier; SQLPOINTER DiagInfo; SQLSMALLINT BufferLength; SQLSMALLINT *StringLength; };
-struct SQLGetDiagRec_params { SQLSMALLINT HandleType; SQLHANDLE Handle; SQLSMALLINT RecNumber; SQLCHAR *Sqlstate; SQLINTEGER *NativeError; SQLCHAR *MessageText; SQLSMALLINT BufferLength; SQLSMALLINT *TextLength; };
-struct SQLGetDiagRecA_params { SQLSMALLINT HandleType; SQLHANDLE Handle; SQLSMALLINT RecNumber; SQLCHAR *Sqlstate; SQLINTEGER *NativeError; SQLCHAR *MessageText; SQLSMALLINT BufferLength; SQLSMALLINT *TextLength; };
-struct SQLGetDiagRecW_params { SQLSMALLINT HandleType; SQLHANDLE Handle; SQLSMALLINT RecNumber; WCHAR *Sqlstate; SQLINTEGER *NativeError; WCHAR *MessageText; SQLSMALLINT BufferLength; SQLSMALLINT *TextLength; };
-struct SQLGetEnvAttr_params { SQLHENV EnvironmentHandle; SQLINTEGER Attribute; SQLPOINTER Value; SQLINTEGER BufferLength; SQLINTEGER *StringLength; };
-struct SQLGetFunctions_params { SQLHDBC ConnectionHandle; SQLUSMALLINT FunctionId; SQLUSMALLINT *Supported; };
-struct SQLGetInfo_params { SQLHDBC ConnectionHandle; SQLUSMALLINT InfoType; SQLPOINTER InfoValue; SQLSMALLINT BufferLength; SQLSMALLINT *StringLength; };
-struct SQLGetInfoW_params { SQLHDBC ConnectionHandle; SQLUSMALLINT InfoType; SQLPOINTER InfoValue; SQLSMALLINT BufferLength; SQLSMALLINT *StringLength; };
-struct SQLGetStmtAttr_params { SQLHSTMT StatementHandle; SQLINTEGER Attribute; SQLPOINTER Value; SQLINTEGER BufferLength; SQLINTEGER *StringLength; };
-struct SQLGetStmtAttrW_params { SQLHSTMT StatementHandle; SQLINTEGER Attribute; SQLPOINTER Value; SQLINTEGER BufferLength; SQLINTEGER *StringLength; };
-struct SQLGetStmtOption_params { SQLHSTMT StatementHandle; SQLUSMALLINT Option; SQLPOINTER Value; };
-struct SQLGetTypeInfo_params { SQLHSTMT StatementHandle; SQLSMALLINT DataType; };
-struct SQLGetTypeInfoW_params { SQLHSTMT StatementHandle; SQLSMALLINT DataType; };
-struct SQLMoreResults_params { SQLHSTMT StatementHandle; };
-struct SQLNativeSql_params { SQLHDBC hdbc; SQLCHAR *szSqlStrIn; SQLINTEGER cbSqlStrIn; SQLCHAR *szSqlStr; SQLINTEGER cbSqlStrMax; SQLINTEGER *pcbSqlStr; };
-struct SQLNativeSqlW_params { SQLHDBC hdbc; SQLWCHAR *szSqlStrIn; SQLINTEGER cbSqlStrIn; SQLWCHAR *szSqlStr; SQLINTEGER cbSqlStrMax; SQLINTEGER *pcbSqlStr; };
-struct SQLNumParams_params { SQLHSTMT hstmt; SQLSMALLINT *pcpar; };
-struct SQLNumResultCols_params { SQLHSTMT StatementHandle; SQLSMALLINT *ColumnCount; };
-struct SQLParamData_params { SQLHSTMT StatementHandle; SQLPOINTER *Value; };
-struct SQLParamOptions_params { SQLHSTMT hstmt; SQLULEN crow; SQLULEN *pirow; };
-struct SQLPrepare_params { SQLHSTMT StatementHandle; SQLCHAR *StatementText; SQLINTEGER TextLength; };
-struct SQLPrepareW_params { SQLHSTMT StatementHandle; WCHAR *StatementText; SQLINTEGER TextLength; };
-struct SQLPrimaryKeys_params { SQLHSTMT hstmt; SQLCHAR *szCatalogName; SQLSMALLINT cbCatalogName; SQLCHAR *szSchemaName; SQLSMALLINT cbSchemaName; SQLCHAR *szTableName; SQLSMALLINT cbTableName; };
-struct SQLPrimaryKeysW_params { SQLHSTMT hstmt; SQLWCHAR *szCatalogName; SQLSMALLINT cbCatalogName; SQLWCHAR *szSchemaName; SQLSMALLINT cbSchemaName; SQLWCHAR *szTableName; SQLSMALLINT cbTableName; };
-struct SQLProcedureColumns_params { SQLHSTMT hstmt; SQLCHAR *szCatalogName; SQLSMALLINT cbCatalogName; SQLCHAR *szSchemaName; SQLSMALLINT cbSchemaName; SQLCHAR *szProcName; SQLSMALLINT cbProcName; SQLCHAR *szColumnName; SQLSMALLINT cbColumnName; };
-struct SQLProcedureColumnsW_params { SQLHSTMT hstmt; SQLWCHAR *szCatalogName; SQLSMALLINT cbCatalogName; SQLWCHAR *szSchemaName; SQLSMALLINT cbSchemaName; SQLWCHAR *szProcName; SQLSMALLINT cbProcName; SQLWCHAR *szColumnName; SQLSMALLINT cbColumnName; };
-struct SQLProcedures_params { SQLHSTMT hstmt; SQLCHAR *szCatalogName; SQLSMALLINT cbCatalogName; SQLCHAR *szSchemaName; SQLSMALLINT cbSchemaName; SQLCHAR *szProcName; SQLSMALLINT cbProcName; };
-struct SQLProceduresW_params { SQLHSTMT hstmt; SQLWCHAR *szCatalogName; SQLSMALLINT cbCatalogName; SQLWCHAR *szSchemaName; SQLSMALLINT cbSchemaName; SQLWCHAR *szProcName; SQLSMALLINT cbProcName; };
-struct SQLPutData_params { SQLHSTMT StatementHandle; SQLPOINTER Data; SQLLEN StrLen_or_Ind; };
-struct SQLRowCount_params { SQLHSTMT StatementHandle; SQLLEN *RowCount; };
-struct SQLSetConnectAttr_params { SQLHDBC ConnectionHandle; SQLINTEGER Attribute; SQLPOINTER Value; SQLINTEGER StringLength; };
-struct SQLSetConnectAttrW_params { SQLHDBC ConnectionHandle; SQLINTEGER Attribute; SQLPOINTER Value; SQLINTEGER StringLength; };
-struct SQLSetConnectOption_params { SQLHDBC ConnectionHandle; SQLUSMALLINT Option; SQLULEN Value; };
-struct SQLSetConnectOptionW_params { SQLHDBC ConnectionHandle; SQLUSMALLINT Option; SQLULEN Value; };
-struct SQLSetCursorName_params { SQLHSTMT StatementHandle; SQLCHAR *CursorName; SQLSMALLINT NameLength; };
-struct SQLSetCursorNameW_params { SQLHSTMT StatementHandle; WCHAR *CursorName; SQLSMALLINT NameLength; };
-struct SQLSetDescField_params { SQLHDESC DescriptorHandle; SQLSMALLINT RecNumber; SQLSMALLINT FieldIdentifier; SQLPOINTER Value; SQLINTEGER BufferLength; };
-struct SQLSetDescFieldW_params { SQLHDESC DescriptorHandle; SQLSMALLINT RecNumber; SQLSMALLINT FieldIdentifier; SQLPOINTER Value; SQLINTEGER BufferLength; };
-struct SQLSetDescRec_params { SQLHDESC DescriptorHandle; SQLSMALLINT RecNumber; SQLSMALLINT Type; SQLSMALLINT SubType; SQLLEN Length; SQLSMALLINT Precision; SQLSMALLINT Scale; SQLPOINTER Data; SQLLEN *StringLength; SQLLEN *Indicator; };
-struct SQLSetEnvAttr_params { SQLHENV EnvironmentHandle; SQLINTEGER Attribute; SQLPOINTER Value; SQLINTEGER StringLength; };
-struct SQLSetParam_params { SQLHSTMT StatementHandle; SQLUSMALLINT ParameterNumber; SQLSMALLINT ValueType; SQLSMALLINT ParameterType; SQLULEN LengthPrecision; SQLSMALLINT ParameterScale; SQLPOINTER ParameterValue; SQLLEN *StrLen_or_Ind; };
-struct SQLSetPos_params { SQLHSTMT hstmt; SQLSETPOSIROW irow; SQLUSMALLINT fOption; SQLUSMALLINT fLock; };
-struct SQLSetScrollOptions_params { SQLHSTMT statement_handle; SQLUSMALLINT f_concurrency; SQLLEN crow_keyset; SQLUSMALLINT crow_rowset; };
-struct SQLSetStmtAttr_params { SQLHSTMT StatementHandle; SQLINTEGER Attribute; SQLPOINTER Value; SQLINTEGER StringLength; };
-struct SQLSetStmtAttrW_params { SQLHSTMT StatementHandle; SQLINTEGER Attribute; SQLPOINTER Value; SQLINTEGER StringLength; };
-struct SQLSetStmtOption_params { SQLHSTMT StatementHandle; SQLUSMALLINT Option; SQLULEN Value; };
-struct SQLSpecialColumns_params { SQLHSTMT StatementHandle; SQLUSMALLINT IdentifierType; SQLCHAR *CatalogName; SQLSMALLINT NameLength1; SQLCHAR *SchemaName; SQLSMALLINT NameLength2; SQLCHAR *TableName; SQLSMALLINT NameLength3; SQLUSMALLINT Scope; SQLUSMALLINT Nullable; };
-struct SQLSpecialColumnsW_params { SQLHSTMT StatementHandle; SQLUSMALLINT IdentifierType; SQLWCHAR *CatalogName; SQLSMALLINT NameLength1; SQLWCHAR *SchemaName; SQLSMALLINT NameLength2; SQLWCHAR *TableName; SQLSMALLINT NameLength3; SQLUSMALLINT Scope; SQLUSMALLINT Nullable; };
-struct SQLStatistics_params { SQLHSTMT StatementHandle; SQLCHAR *CatalogName; SQLSMALLINT NameLength1; SQLCHAR *SchemaName; SQLSMALLINT NameLength2; SQLCHAR *TableName; SQLSMALLINT NameLength3; SQLUSMALLINT Unique; SQLUSMALLINT Reserved; };
-struct SQLStatisticsW_params { SQLHSTMT StatementHandle; SQLWCHAR *CatalogName; SQLSMALLINT NameLength1; SQLWCHAR *SchemaName; SQLSMALLINT NameLength2; SQLWCHAR *TableName; SQLSMALLINT NameLength3; SQLUSMALLINT Unique; SQLUSMALLINT Reserved; };
-struct SQLTablePrivileges_params { SQLHSTMT hstmt; SQLCHAR *szCatalogName; SQLSMALLINT cbCatalogName; SQLCHAR *szSchemaName; SQLSMALLINT cbSchemaName; SQLCHAR *szTableName; SQLSMALLINT cbTableName; };
-struct SQLTablePrivilegesW_params { SQLHSTMT hstmt; SQLWCHAR *szCatalogName; SQLSMALLINT cbCatalogName; SQLWCHAR *szSchemaName; SQLSMALLINT cbSchemaName; SQLWCHAR *szTableName; SQLSMALLINT cbTableName; };
-struct SQLTables_params { SQLHSTMT StatementHandle; SQLCHAR *CatalogName; SQLSMALLINT NameLength1; SQLCHAR *SchemaName; SQLSMALLINT NameLength2; SQLCHAR *TableName; SQLSMALLINT NameLength3; SQLCHAR *TableType; SQLSMALLINT NameLength4; };
-struct SQLTablesW_params { SQLHSTMT StatementHandle; SQLWCHAR *CatalogName; SQLSMALLINT NameLength1; SQLWCHAR *SchemaName; SQLSMALLINT NameLength2; SQLWCHAR *TableName; SQLSMALLINT NameLength3; SQLWCHAR *TableType; SQLSMALLINT NameLength4; };
-struct SQLTransact_params { SQLHENV EnvironmentHandle; SQLHDBC ConnectionHandle; SQLUSMALLINT CompletionType; };
diff --git a/include/config.h.in b/include/config.h.in
index 933197b6f7d..617e2856255 100644
--- a/include/config.h.in
+++ b/include/config.h.in
@@ -795,9 +795,6 @@
 /* Define to the soname of the libnetapi library. */
 #undef SONAME_LIBNETAPI
 
-/* Define to the soname of the libodbc library. */
-#undef SONAME_LIBODBC
-
 /* Define to the soname of the libOSMesa library. */
 #undef SONAME_LIBOSMESA
 
-- 
2.39.1

