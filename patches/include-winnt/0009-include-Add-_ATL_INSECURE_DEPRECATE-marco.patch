From e1ffc51c41627d1add5a2d6f094d7ea352dfc0c4 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Thu, 9 May 2024 07:00:00 +1000
Subject: include: Add _ATL_INSECURE_DEPRECATE marco


diff --git a/include/atldef.h b/include/atldef.h
index 700aded1137..86ef8405d20 100644
--- a/include/atldef.h
+++ b/include/atldef.h
@@ -56,10 +56,60 @@
 #define ATLAPI HRESULT __stdcall
 #define ATLAPI_(x) x __stdcall
 #define ATLINLINE inline
+#define ATL_NO_VTABLE
+#define _ATL_NEW		new
 
 /* Belongs elsewhere */
 #define ATLTRACE(...)
 
+#if defined(__GNUC__) || defined(__clang__)
+#define ATL_DEPRECATED(X) __attribute__((deprecated))
+#elif defined(_MSC_VER)
+#define ATL_DEPRECATED(X) __declspec(deprecated)
+#endif
+
+#ifndef _ATL_INSECURE_DEPRECATE
+#define _ATL_INSECURE_DEPRECATE(_Message)
+#endif
+
+#define ATLTRYALLOC(x) try { x; } catch(CException* e) { e->Delete(); }
+#define ATLTRY(x) ATLTRYALLOC(x)
+
+#ifndef _ATLTRY
+#define _ATLTRY try
+# ifdef _AFX
+#  define _ATLCATCH( e ) catch( CException* e )
+# else
+#  define _ATLCATCH( e ) catch( CAtlException e )
+#endif
+#endif
+
+#ifndef ATLENSURE_THROW
+#define ATLENSURE_THROW(expr, hr) \
+do { \
+    int condition=!!(expr); \
+    ATLASSUME(condition); \
+    if(!(condition)) AtlThrow(hr); \
+} while (0)
+#endif
+
+#ifndef ATLENSURE
+#define ATLENSURE(expr) ATLENSURE_THROW(expr, E_FAIL)
+#endif
+
+#ifndef ATLENSURE_RETURN_VAL
+#define ATLENSURE_RETURN_VAL(expr, val) \
+do {                                           \
+        bool istrue = !!(expr);                \
+        ATLASSERT(istrue);                  \
+        if(!(istrue)) return val;           \
+} while (0)
+#endif
+
+#define ATLENSURE_RETURN_HR(expr, hr) ATLENSURE_RETURN_VAL(expr, hr)
+#define ATLENSURE_RETURN(expr) ATLENSURE_RETURN_HR(expr, E_FAIL)
+
+
 #define ATL_MAKEINTRESOURCEA(i) ((LPSTR)((ULONG_PTR)((WORD)(i))))
 #define ATL_MAKEINTRESOURCEW(i) ((LPWSTR)((ULONG_PTR)((WORD)(i))))
 #ifndef RC_INVOKED
@@ -101,8 +151,19 @@
 #endif
 #endif
 
+ATLAPI AtlSetErrorInfo(
+        _In_ const CLSID& clsid,
+        _In_z_ LPCOLESTR lpszDesc,
+        _In_ DWORD dwHelpID,
+        _In_opt_z_ LPCOLESTR lpszHelpFile,
+        _In_ const IID& iid,
+        _In_ HRESULT hRes,
+        _In_opt_ HINSTANCE hInst);
+
 #ifdef __cplusplus
 
+#define _ATLCATCHALL() catch( ... )
+
 template < typename T >
 inline T* SAL_Assume_bytecap_for_opt_(T* buf, size_t dwLen)
 {
