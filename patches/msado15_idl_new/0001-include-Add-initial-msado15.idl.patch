From 35add7340203992a87268d01ae06a878c875ad3a Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Sat, 12 Apr 2025 12:42:32 +1000
Subject: [PATCH] include: Add initial msado15.idl

---
 dlls/msado15/connection.c |    3 +-
 include/Makefile.in       |    1 +
 include/msado15.idl       | 1096 +++++++++++++++++++++++++++++++++++++
 3 files changed, 1099 insertions(+), 1 deletion(-)
 create mode 100644 include/msado15.idl

diff --git a/dlls/msado15/connection.c b/dlls/msado15/connection.c
index d6ca0c2df39..4e3dc952ef5 100644
--- a/dlls/msado15/connection.c
+++ b/dlls/msado15/connection.c
@@ -26,7 +26,8 @@
 #include "objbase.h"
 #include "msdasc.h"
 #include "olectl.h"
-#include "msado15_backcompat.h"
+//#include "msado15_backcompat.h"
+#include "msado15.h"
 
 #include "wine/debug.h"
 
diff --git a/include/Makefile.in b/include/Makefile.in
index f877340419a..9f6ab12d4fb 100644
--- a/include/Makefile.in
+++ b/include/Makefile.in
@@ -485,6 +485,7 @@ SOURCES = \
 	msacm.h \
 	msacmdlg.h \
 	msacmdrv.h \
+	msado15.idl \
 	msado15_backcompat.idl \
 	msasn1.h \
 	mscat.h \
diff --git a/include/msado15.idl b/include/msado15.idl
new file mode 100644
index 00000000000..41e04f1d16d
--- /dev/null
+++ b/include/msado15.idl
@@ -0,0 +1,1096 @@
+/*
+ * Copyright 2019 Hans Leidekker for CodeWeavers
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+import "oaidl.idl";
+
+interface _ADO;
+interface _Collection;
+interface _Command;
+interface _Connection;
+interface _DynaCollection;
+interface _Parameter;
+interface _Record;
+interface _Recordset;
+interface _Stream;
+interface ADODebugging;
+interface ADOConnectionConstruction;
+interface ADOCommandConstruction;
+interface ADORecordsetConstruction;
+interface Command15;
+interface Command25;
+interface Error;
+interface Errors;
+interface Field;
+interface Field15;
+interface Field20;
+interface Fields;
+interface Fields15;
+interface Fields20;
+interface Parameters;
+interface Properties;
+interface Property;
+interface Recordset15;
+interface Recordset20;
+interface Recordset21;
+interface ConnectionEventsVt;
+dispinterface ConnectionEvents;
+dispinterface RecordsetEvents;
+
+typedef [uuid(54D8B4B9-663B-4a9c-95F6-0E749ABD70F1)] LONG_PTR ADO_LONGPTR;
+
+typedef [uuid(0000052A-0000-0010-8000-00AA006D2EA4)] enum ErrorValueEnum
+{
+    adErrInvalidArgument            = 3001,
+    adErrOpeningFile                = 3002,
+    adErrReadFile                   = 3003,
+    adErrWriteFile                  = 3004,
+    adErrNoCurrentRecord            = 3021,
+    adErrIllegalOperation           = 3219,
+    adErrCantChangeProvider         = 3220,
+    adErrInTransaction              = 3246,
+    adErrFeatureNotAvailable        = 3251,
+    adErrItemNotFound               = 3265,
+    adErrObjectInCollection         = 3367,
+    adErrObjectNotSet               = 3420,
+    adErrDataConversion             = 3421,
+    adErrObjectClosed               = 3704,
+    adErrObjectOpen                 = 3705,
+    adErrProviderNotFound           = 3706,
+    adErrBoundToCommand             = 3707,
+    adErrInvalidParamInfo           = 3708,
+    adErrInvalidConnection          = 3709,
+    adErrNotReentrant               = 3710,
+    adErrStillExecuting             = 3711,
+    adErrOperationCancelled         = 3712,
+    adErrStillConnecting            = 3713,
+    adErrInvalidTransaction         = 3714,
+    adErrNotExecuting               = 3715,
+    adErrUnsafeOperation            = 3716,
+    adWrnSecurityDialog             = 3717,
+    adWrnSecurityDialogHeader       = 3718,
+    adErrIntegrityViolation         = 3719,
+    adErrPermissionDenied           = 3720,
+    adErrDataOverflow               = 3721,
+    adErrSchemaViolation            = 3722,
+    adErrSignMismatch               = 3723,
+    adErrCantConvertvalue           = 3724,
+    adErrCantCreate                 = 3725,
+    adErrColumnNotOnThisRow         = 3726,
+    adErrURLDoesNotExist            = 3727,
+    adErrTreePermissionDenied       = 3728,
+    adErrInvalidURL                 = 3729,
+    adErrResourceLocked             = 3730,
+    adErrResourceExists             = 3731,
+    adErrCannotComplete             = 3732,
+    adErrVolumeNotFound             = 3733,
+    adErrOutOfSpace                 = 3734,
+    adErrResourceOutOfScope         = 3735,
+    adErrUnavailable                = 3736,
+    adErrURLNamedRowDoesNotExist    = 3737,
+    adErrDelResOutOfScope           = 3738,
+    adErrPropInvalidColumn          = 3739,
+    adErrPropInvalidOption          = 3740,
+    adErrPropInvalidValue           = 3741,
+    adErrPropConflicting            = 3742,
+    adErrPropNotAllSettable         = 3743,
+    adErrPropNotSet                 = 3744,
+    adErrPropNotSettable            = 3745,
+    adErrPropNotSupported           = 3746,
+    adErrCatalogNotSet              = 3747,
+    adErrCantChangeConnection       = 3748,
+    adErrFieldsUpdateFailed         = 3749,
+    adErrDenyNotSupported           = 3750,
+    adErrDenyTypeNotSupported       = 3751,
+    adErrProviderNotSpecified       = 3753,
+    adErrConnectionStringTooLong    = 3754
+} ErrorValueEnum;
+
+typedef [uuid(00000528-0000-0010-8000-00aa006d2ea4)] enum PositionEnum
+{
+    adPosUnknown = -1,
+    adPosBOF = -2,
+    adPosEOF = -3
+} PositionEnum;
+
+typedef [uuid(a56187c5-d690-4037-ae32-a00edc376ac3), public] ADO_LONGPTR PositionEnum_Param;
+
+typedef [uuid(0000051f-0000-0010-8000-00aa006d2ea4)] enum DataTypeEnum
+{
+    adEmpty = 0,
+    adTinyInt = 16,
+    adSmallInt = 2,
+    adInteger = 3,
+    adBigInt = 20,
+    adUnsignedTinyInt = 17,
+    adUnsignedSmallInt = 18,
+    adUnsignedInt = 19,
+    adUnsignedBigInt = 21,
+    adSingle = 4,
+    adDouble = 5,
+    adCurrency = 6,
+    adDecimal = 14,
+    adNumeric = 131,
+    adBoolean = 11,
+    adError = 10,
+    adUserDefined = 132,
+    adVariant = 12,
+    adIDispatch = 9,
+    adIUnknown = 13,
+    adGUID = 72,
+    adDate = 7,
+    adDBDate = 133,
+    adDBTime = 134,
+    adDBTimeStamp = 135,
+    adBSTR = 8,
+    adChar = 129,
+    adVarChar = 200,
+    adLongVarChar = 201,
+    adWChar = 130,
+    adVarWChar = 202,
+    adLongVarWChar = 203,
+    adBinary = 128,
+    adVarBinary = 204,
+    adLongVarBinary = 205,
+    adChapter = 136,
+    adFileTime = 64,
+    adPropVariant = 138,
+    adVarNumeric = 139,
+    adArray = 0x2000
+} DataTypeEnum;
+
+typedef [uuid(00000548-0000-0010-8000-00aa006d2ea4)] enum PersistFormatEnum
+{
+    adPersistADTG = 0,
+    adPersistXML = 1
+} PersistFormatEnum;
+
+typedef [uuid(00000552-0000-0010-8000-00aa006d2ea4)] enum SeekEnum
+{
+    adSeekFirstEQ = 1,
+    adSeekLastEQ = 2,
+    adSeekAfterEQ = 4,
+    adSeekAfter = 8,
+    adSeekBeforeEQ = 16,
+    adSeekBefore = 32
+} SeekEnum;
+
+typedef [uuid(0000051b-0000-0010-8000-00aa006d2ea4)] enum CursorTypeEnum
+{
+    adOpenUnspecified = -1,
+    adOpenForwardOnly = 0,
+    adOpenKeyset = 1,
+    adOpenDynamic = 2,
+    adOpenStatic = 3
+} CursorTypeEnum;
+
+typedef [uuid(00000525-0000-0010-8000-00aa006d2ea4)] enum FieldAttributeEnum
+{
+    adFldUnspecified = -1,
+    adFldMayDefer = 0x00000002,
+    adFldUpdatable = 0x00000004,
+    adFldUnknownUpdatable = 0x00000008,
+    adFldFixed = 0x00000010,
+    adFldIsNullable = 0x00000020,
+    adFldMayBeNull = 0x00000040,
+    adFldLong = 0x00000080,
+    adFldRowID = 0x00000100,
+    adFldRowVersion = 0x00000200,
+    adFldCacheDeferred = 0x00001000,
+    adFldIsChapter = 0x00002000,
+    adFldNegativeScale = 0x00004000,
+    adFldKeyColumn = 0x00008000,
+    adFldIsRowURL = 0x00010000,
+    adFldIsDefaultStream = 0x00020000,
+    adFldIsCollection = 0x00040000
+} FieldAttributeEnum;
+
+typedef [uuid(00000544-0000-0010-8000-00aa006d2ea4)] enum ResyncEnum
+{
+    adResyncUnderlyingValues = 1,
+    adResyncAllValues = 2
+} ResyncEnum;
+
+typedef [uuid(0000051d-0000-0010-8000-00aa006d2ea4)] enum LockTypeEnum
+{
+    adLockUnspecified = -1,
+    adLockReadOnly = 1,
+    adLockPessimistic = 2,
+    adLockOptimistic = 3,
+    adLockBatchOptimistic = 4
+} LockTypeEnum;
+
+typedef [uuid(00000543-0000-0010-8000-00aa006d2ea4)] enum AffectEnum
+{
+    adAffectCurrent = 1,
+    adAffectGroup = 2,
+    adAffectAll = 3,
+    adAffectAllChapters = 4
+} AffectEnum;
+
+typedef [uuid(00000526-0000-0010-8000-00aa006d2ea4)] enum EditModeEnum
+{
+    adEditNone = 0,
+    adEditInProgress = 1,
+    adEditAdd = 2,
+    adEditDelete = 4
+} EditModeEnum;
+
+typedef [uuid(0000052f-0000-0010-8000-00aa006d2ea4)] enum CursorLocationEnum
+{
+    adUseNone = 1,
+    adUseServer = 2,
+    adUseClient = 3,
+    adUseClientBatch = 3
+} CursorLocationEnum;
+
+typedef [uuid(0000051c-0000-0010-8000-00aa006d2ea4)] enum CursorOptionEnum
+{
+    adHoldRecords = 256,
+    adMovePrevious = 512,
+    adBookmark = 8192,
+    adApproxPosition = 16384,
+    adUpdateBatch = 65536,
+    adResync = 131072,
+    adNotify = 262144,
+    adFind = 524288,
+    adSeek = 4194304,
+    adIndex = 8388608,
+    adAddNew = 16778240,
+    adDelete = 16779264,
+    adUpdate = 16809984
+} CursorOptionEnum;
+
+typedef [uuid(00000540-0000-0010-8000-00aa006d2ea4)] enum MarshalOptionsEnum
+{
+    adMarshalAll = 0,
+    adMarshalModifiedOnly = 1
+} MarshalOptionsEnum;
+
+typedef [uuid(00000547-0000-0010-8000-00aa006d2ea4)] enum SearchDirectionEnum
+{
+    adSearchForward = 1,
+    adSearchBackward = -1
+} SearchDirectionEnum;
+
+typedef [uuid(00000549-0000-0010-8000-00aa006d2ea4)] enum StringFormatEnum
+{
+    adClipString = 2
+} StringFormatEnum;
+
+typedef [uuid(00000545-0000-0010-8000-00aa006d2ea4)] enum CompareEnum
+{
+    adCompareLessThan = 0,
+    adCompareEqual = 1,
+    adCompareGreaterThan = 2,
+    adCompareNotEqual = 3,
+    adCompareNotComparable = 4
+} CompareEnum;
+
+typedef [uuid(00000523-0000-0010-8000-00aa006d2ea4)] enum IsolationLevelEnum
+{
+    adXactUnspecified = -1,
+    adXactChaos = 16,
+    adXactReadUncommitted = 256,
+    adXactBrowse = 256,
+    adXactCursorStability = 4096,
+    adXactReadCommitted = 4096,
+    adXactRepeatableRead = 65536,
+    adXactSerializable = 1048576,
+    adXactIsolated = 1048576
+} IsolationLevelEnum;
+
+typedef [uuid(00000521-0000-0010-8000-00aa006d2ea4)] enum ConnectModeEnum
+{
+    adModeUnknown = 0,
+    adModeRead = 1,
+    adModeWrite = 2,
+    adModeReadWrite = 3,
+    adModeShareDenyRead = 4,
+    adModeShareDenyWrite = 8,
+    adModeShareExclusive = 12,
+    adModeShareDenyNone = 16,
+    adModeRecursive = 4194304
+} ConnectModeEnum;
+
+typedef [uuid(00000533-0000-0010-8000-00aa006d2ea4)] enum SchemaEnum
+{
+    adSchemaProviderSpecific = -1,
+    adSchemaAsserts = 0,
+    adSchemaCatalogs = 1,
+    adSchemaCharacterSets = 2,
+    adSchemaCollations = 3,
+    adSchemaColumns = 4,
+    adSchemaCheckConstraints = 5,
+    adSchemaConstraintColumnUsage = 6,
+    adSchemaConstraintTableUsage = 7,
+    adSchemaKeyColumnUsage = 8,
+    adSchemaReferentialContraints = 9,
+    adSchemaReferentialConstraints = 9,
+    adSchemaTableConstraints = 10,
+    adSchemaColumnsDomainUsage = 11,
+    adSchemaIndexes = 12,
+    adSchemaColumnPrivileges = 13,
+    adSchemaTablePrivileges = 14,
+    adSchemaUsagePrivileges = 15,
+    adSchemaProcedures = 16,
+    adSchemaSchemata = 17,
+    adSchemaSQLLanguages = 18,
+    adSchemaStatistics = 19,
+    adSchemaTables = 20,
+    adSchemaTranslations = 21,
+    adSchemaProviderTypes = 22,
+    adSchemaViews = 23,
+    adSchemaViewColumnUsage = 24,
+    adSchemaViewTableUsage = 25,
+    adSchemaProcedureParameters = 26,
+    adSchemaForeignKeys = 27,
+    adSchemaPrimaryKeys = 28,
+    adSchemaProcedureColumns = 29,
+    adSchemaDBInfoKeywords = 30,
+    adSchemaDBInfoLiterals = 31,
+    adSchemaCubes = 32,
+    adSchemaDimensions = 33,
+    adSchemaHierarchies = 34,
+    adSchemaLevels = 35,
+    adSchemaMeasures = 36,
+    adSchemaProperties = 37,
+    adSchemaMembers = 38,
+    adSchemaTrustees = 39,
+    adSchemaFunctions = 40,
+    adSchemaActions = 41,
+    adSchemaCommands = 42,
+    adSchemaSets = 43
+} SchemaEnum;
+
+typedef [uuid(00000530-0000-0010-8000-00aa006d2ea4)] enum EventStatusEnum
+{
+    adStatusOK = 1,
+    adStatusErrorsOccurred = 2,
+    adStatusCantDeny = 3,
+    adStatusCancel = 4,
+    adStatusUnwantedEvent = 5
+} EventStatusEnum;
+
+typedef [uuid(0000052c-0000-0010-8000-00aa006d2ea4)] enum ParameterDirectionEnum
+{
+    adParamUnknown = 0,
+    adParamInput = 1,
+    adParamOutput = 2,
+    adParamInputOutput = 3,
+    adParamReturnValue = 4
+} ParameterDirectionEnum;
+
+typedef [uuid(0000052e-0000-0010-8000-00aa006d2ea4)] enum CommandTypeEnum
+{
+    adCmdUnspecified = -1,
+    adCmdUnknown = 8,
+    adCmdText = 1,
+    adCmdTable = 2,
+    adCmdStoredProc = 4,
+    adCmdFile = 256,
+    adCmdTableDirect = 512
+} CommandTypeEnum;
+
+typedef [uuid(00000532-0000-0010-8000-00aa006d2ea4)] enum ObjectStateEnum
+{
+    adStateClosed = 0,
+    adStateOpen = 1,
+    adStateConnecting = 2,
+    adStateExecuting = 4,
+    adStateFetching = 8
+} ObjectStateEnum;
+
+typedef [uuid(00000573-0000-0010-8000-00aa006d2ea4)] enum MoveRecordOptionsEnum
+{
+    adMoveUnspecified = -1,
+    adMoveOverWrite = 1,
+    adMoveDontUpdateLinks = 2,
+    adMoveAllowEmulation = 4
+} MoveRecordOptionsEnum;
+
+typedef [uuid(00000574-0000-0010-8000-00aa006d2ea4)] enum CopyRecordOptionsEnum
+{
+    adCopyUnspecified = -1,
+    adCopyOverWrite = 1,
+    adCopyAllowEmulation = 4,
+    adCopyNonRecursive = 2
+} CopyRecordOptionsEnum;
+
+typedef [uuid(00000570-0000-0010-8000-00aa006d2ea4)] enum RecordCreateOptionsEnum
+{
+    adCreateCollection = (int) 0x00002000,
+    adCreateStructDoc = (int) 0x80000000,
+    adCreateNonCollection = (int) 0x00000000,
+    adOpenIfExists = (int) 0x02000000,
+    adCreateOverwrite = (int) 0x04000000,
+    adFailIfNotExists = (int) -1
+} RecordCreateOptionsEnum;
+
+typedef [uuid(00000571-0000-0010-8000-00aa006d2ea4)] enum RecordOpenOptionsEnum
+{
+    adOpenRecordUnspecified = -1,
+    adOpenOutput = 0x00800000,
+    adOpenAsync = 0x00001000,
+    adDelayFetchStream = 0x00004000,
+    adDelayFetchFields = 0x00008000,
+    adOpenExecuteCommand = 0x00010000
+} RecordOpenOptionsEnum;
+
+typedef [uuid(0000057d-0000-0010-8000-00aa006d2ea4)] enum RecordTypeEnum
+{
+    adSimpleRecord = 0,
+    adCollectionRecord = 1,
+    adStructDoc = 2
+} RecordTypeEnum;
+
+typedef [uuid(00000576-0000-0010-8000-00aa006d2ea4)] enum StreamTypeEnum
+{
+    adTypeBinary = 1,
+    adTypeText = 2
+} StreamTypeEnum;
+
+typedef [uuid(00000577-0000-0010-8000-00aa006d2ea4)] enum LineSeparatorEnum
+{
+    adLF = 10,
+    adCR = 13,
+    adCRLF = -1
+} LineSeparatorEnum;
+
+typedef enum
+{
+    adReadAll = -1,
+    adReadLine = -2
+} StreamReadEnum;
+
+typedef [uuid(0000057c-0000-0010-8000-00aa006d2ea4)] enum SaveOptionsEnum
+{
+    adSaveCreateNotExist = 1,
+    adSaveCreateOverWrite = 2
+} SaveOptionsEnum;
+
+typedef [uuid(0000057a-0000-0010-8000-00aa006d2ea4)] enum StreamOpenOptionsEnum
+{
+    adOpenStreamUnspecified = -1,
+    adOpenStreamAsync = 1,
+    adOpenStreamFromRecord = 4
+} StreamOpenOptionsEnum;
+
+typedef [uuid(0000057b-0000-0010-8000-00aa006d2ea4)] enum StreamWriteEnum
+{
+    adWriteChar = 0,
+    adWriteLine = 1
+} StreamWriteEnum;
+
+typedef [uuid(00000531-0000-0010-8000-00aa006d2ea4)] enum EventReasonEnum
+{
+    adRsnAddNew = 1,
+    adRsnDelete = 2,
+    adRsnUpdate = 3,
+    adRsnUndoUpdate = 4,
+    adRsnUndoAddNew = 5,
+    adRsnUndoDelete = 6,
+    adRsnRequery = 7,
+    adRsnResynch = 8,
+    adRsnClose = 9,
+    adRsnMove = 10,
+    adRsnFirstChange = 11,
+    adRsnMoveFirst = 12,
+    adRsnMoveNext = 13,
+    adRsnMovePrevious = 14,
+    adRsnMoveLast = 15
+} EventReasonEnum;
+
+typedef [uuid(0000051e-0000-0010-8000-00aa006d2ea4)] enum ExecuteOptionEnum
+{
+    adOptionUnspecified      =   -1,
+    adAsyncExecute           =   16,
+    adAsyncFetch             =   32,
+    adAsyncFetchNonBlocking  =   64,
+    adExecuteNoRecords       =  128,
+    adExecuteStream          = 1024,
+    [hidden] adExecuteRecord = 2048
+} ExecuteOptionEnum;
+
+typedef [uuid(00000541-0000-0010-8000-00aa006d2ea4)] enum ConnectOptionEnum
+{
+    adConnectUnspecified = -1,
+    adAsyncConnect = 0x10
+} ConnectOptionEnum;
+
+[
+    odl,
+    uuid(00000534-0000-0010-8000-00aa006d2ea4),
+    dual,
+    nonextensible,
+    oleautomation
+]
+interface _ADO : IDispatch
+{
+    [id(0x000001f4), propget]
+    HRESULT _stdcall Properties([out, retval] Properties** ppvObject);
+};
+
+[
+    odl,
+    uuid(00001508-0000-0010-8000-00aa006d2ea4),
+    hidden,
+    dual,
+    nonextensible,
+    oleautomation
+]
+interface Command15 : _ADO
+{
+    [id(0x00000001), propget]
+    HRESULT _stdcall ActiveConnection([out, retval] _Connection** ppvObject);
+    [id(0x00000001), propputref]
+    HRESULT _stdcall ActiveConnection([in] _Connection* ppvObject);
+    [id(0x00000001), propput]
+    HRESULT _stdcall ActiveConnection([in] VARIANT ppvObject);
+    [id(0x00000002), propget]
+    HRESULT _stdcall CommandText([out, retval] BSTR* pbstr);
+    [id(0x00000002), propput]
+    HRESULT _stdcall CommandText([in] BSTR pbstr);
+    [id(0x00000003), propget]
+    HRESULT _stdcall CommandTimeout([out, retval] long* pl);
+    [id(0x00000003), propput]
+    HRESULT _stdcall CommandTimeout([in] long pl);
+    [id(0x00000004), propget]
+    HRESULT _stdcall Prepared([out, retval] VARIANT_BOOL* pfPrepared);
+    [id(0x00000004), propput]
+    HRESULT _stdcall Prepared([in] VARIANT_BOOL pfPrepared);
+    [id(0x00000005)]
+    HRESULT _stdcall Execute(
+                    [out, optional] VARIANT* RecordsAffected,
+                    [in, optional] VARIANT* Parameters,
+                    [in, defaultvalue(-1)] long Options,
+                    [out, retval] _Recordset** ppiRs);
+    [id(0x00000006)]
+    HRESULT _stdcall CreateParameter(
+                    [in, defaultvalue("")] BSTR Name,
+                    [in, defaultvalue(adEmpty)] DataTypeEnum Type,
+                    [in, defaultvalue(adParamInput)] ParameterDirectionEnum Direction,
+                    [in, defaultvalue(0)] long Size,
+                    [in, optional] VARIANT Value,
+                    [out, retval] _Parameter** ppiprm);
+    [id(00000000), propget]
+    HRESULT _stdcall Parameters([out, retval] Parameters** ppvObject);
+    [id(0x00000007), propput]
+    HRESULT _stdcall CommandType([in] CommandTypeEnum plCmdType);
+    [id(0x00000007), propget]
+    HRESULT _stdcall CommandType([out, retval] CommandTypeEnum* plCmdType);
+    [id(0x00000008), propget]
+    HRESULT _stdcall Name([out, retval] BSTR* pbstrName);
+    [id(0x00000008), propput]
+    HRESULT _stdcall Name([in] BSTR pbstrName);
+};
+
+[
+    odl,
+    uuid(00001515-0000-0010-8000-00aa006d2ea4),
+    hidden,
+    dual,
+    oleautomation
+]
+interface Connection15 : _ADO
+{
+    [id(00000000), propget]
+    HRESULT _stdcall ConnectionString([out, retval] BSTR* pbstr);
+    [id(00000000), propput]
+    HRESULT _stdcall ConnectionString([in] BSTR pbstr);
+    [id(0x00000002), propget]
+    HRESULT _stdcall CommandTimeout([out, retval] long* plTimeout);
+    [id(0x00000002), propput]
+    HRESULT _stdcall CommandTimeout([in] long plTimeout);
+    [id(0x00000003), propget]
+    HRESULT _stdcall ConnectionTimeout([out, retval] long* plTimeout);
+    [id(0x00000003), propput]
+    HRESULT _stdcall ConnectionTimeout([in] long plTimeout);
+    [id(0x00000004), propget]
+    HRESULT _stdcall Version([out, retval] BSTR* pbstr);
+    [id(0x00000005)]
+    HRESULT _stdcall Close();
+    [id(0x00000006)]
+    HRESULT _stdcall Execute(
+                    [in] BSTR CommandText,
+                    [out, optional] VARIANT* RecordsAffected,
+                    [in, defaultvalue(-1)] long Options,
+                    [out, retval] _Recordset** ppiRset);
+    [id(0x00000007)]
+    HRESULT _stdcall BeginTrans([out, retval] long* TransactionLevel);
+    [id(0x00000008)]
+    HRESULT _stdcall CommitTrans();
+    [id(0x00000009)]
+    HRESULT _stdcall RollbackTrans();
+    [id(0x0000000a)]
+    HRESULT _stdcall Open(
+                    [in, defaultvalue("")] BSTR ConnectionString,
+                    [in, defaultvalue("")] BSTR UserID,
+                    [in, defaultvalue("")] BSTR Password,
+                    [in, defaultvalue(-1)] long Options);
+    [id(0x0000000b), propget]
+    HRESULT _stdcall Errors([out, retval] Errors** ppvObject);
+    [id(0x0000000c), propget]
+    HRESULT _stdcall DefaultDatabase([out, retval] BSTR* pbstr);
+    [id(0x0000000c), propput]
+    HRESULT _stdcall DefaultDatabase([in] BSTR pbstr);
+    [id(0x0000000d), propget]
+    HRESULT _stdcall IsolationLevel([out, retval] IsolationLevelEnum* Level);
+    [id(0x0000000d), propput]
+    HRESULT _stdcall IsolationLevel([in] IsolationLevelEnum Level);
+    [id(0x0000000e), propget]
+    HRESULT _stdcall Attributes([out, retval] long* plAttr);
+    [id(0x0000000e), propput]
+    HRESULT _stdcall Attributes([in] long plAttr);
+    [id(0x0000000f), propget]
+    HRESULT _stdcall CursorLocation([out, retval] CursorLocationEnum* plCursorLoc);
+    [id(0x0000000f), propput]
+    HRESULT _stdcall CursorLocation([in] CursorLocationEnum plCursorLoc);
+    [id(0x00000010), propget]
+    HRESULT _stdcall Mode([out, retval] ConnectModeEnum* plMode);
+    [id(0x00000010), propput]
+    HRESULT _stdcall Mode([in] ConnectModeEnum plMode);
+    [id(0x00000011), propget]
+    HRESULT _stdcall Provider([out, retval] BSTR* pbstr);
+    [id(0x00000011), propput]
+    HRESULT _stdcall Provider([in] BSTR pbstr);
+    [id(0x00000012), propget]
+    HRESULT _stdcall State([out, retval] long* plObjState);
+    [id(0x00000013)]
+    HRESULT _stdcall OpenSchema(
+                    [in] SchemaEnum Schema,
+                    [in, optional] VARIANT Restrictions,
+                    [in, optional] VARIANT SchemaID,
+                    [out, retval] _Recordset** pprset);
+};
+
+[
+    odl,
+    uuid(00001550-0000-0010-8000-00aa006d2ea4),
+    dual,
+    oleautomation
+]
+interface _Connection : Connection15
+{
+    [id(0x00000015)]
+    HRESULT _stdcall Cancel();
+};
+
+[
+  odl,
+  uuid(0000150E-0000-0010-8000-00AA006D2EA4),
+  hidden,
+  dual,
+  nonextensible,
+  oleautomation
+]
+interface Recordset15 : _ADO {
+    [id(0x000003e8), propget]
+    HRESULT _stdcall AbsolutePosition([out, retval] PositionEnum* pl);
+    [id(0x000003e8), propput]
+    HRESULT _stdcall AbsolutePosition([in] PositionEnum pl);
+    [id(0x000003e9), propputref]
+    HRESULT _stdcall ActiveConnection([in] IDispatch* pvar);
+    [id(0x000003e9), propput]
+    HRESULT _stdcall ActiveConnection([in] VARIANT pvar);
+    [id(0x000003e9), propget]
+    HRESULT _stdcall ActiveConnection([out, retval] VARIANT* pvar);
+    [id(0x000003ea), propget]
+    HRESULT _stdcall BOF([out, retval] VARIANT_BOOL* pb);
+    [id(0x000003eb), propget]
+    HRESULT _stdcall Bookmark([out, retval] VARIANT* pvBookmark);
+    [id(0x000003eb), propput]
+    HRESULT _stdcall Bookmark([in] VARIANT pvBookmark);
+    [id(0x000003ec), propget]
+    HRESULT _stdcall CacheSize([out, retval] long* pl);
+    [id(0x000003ec), propput]
+    HRESULT _stdcall CacheSize([in] long pl);
+    [id(0x000003ed), propget]
+    HRESULT _stdcall CursorType([out, retval] CursorTypeEnum* plCursorType);
+    [id(0x000003ed), propput]
+    HRESULT _stdcall CursorType([in] CursorTypeEnum plCursorType);
+    [id(0x000003ee), propget]
+    HRESULT _stdcall EOF([out, retval] VARIANT_BOOL* pb);
+    [id(00000000), propget]
+    HRESULT _stdcall Fields([out, retval] Fields** ppvObject);
+    [id(0x000003f0), propget]
+    HRESULT _stdcall LockType([out, retval] LockTypeEnum* plLockType);
+    [id(0x000003f0), propput]
+    HRESULT _stdcall LockType([in] LockTypeEnum plLockType);
+    [id(0x000003f1), propget]
+    HRESULT _stdcall MaxRecords([out, retval] long* plMaxRecords);
+    [id(0x000003f1), propput]
+    HRESULT _stdcall MaxRecords([in] long plMaxRecords);
+    [id(0x000003f2), propget]
+    HRESULT _stdcall RecordCount([out, retval] long* pl);
+    [id(0x000003f3), propputref]
+    HRESULT _stdcall Source([in] IDispatch* pvSource);
+    [id(0x000003f3), propput]
+    HRESULT _stdcall Source([in] BSTR pvSource);
+    [id(0x000003f3), propget]
+    HRESULT _stdcall Source([out, retval] VARIANT* pvSource);
+    [id(0x000003f4)]
+    HRESULT _stdcall AddNew(
+                    [in, optional] VARIANT FieldList,
+                    [in, optional] VARIANT Values);
+    [id(0x000003f5)]
+    HRESULT _stdcall CancelUpdate();
+    [id(0x000003f6)]
+    HRESULT _stdcall Close();
+    [id(0x000003f7)]
+    HRESULT _stdcall Delete([in, defaultvalue(adAffectCurrent)] AffectEnum AffectRecords);
+    [id(0x000003f8)]
+    HRESULT _stdcall GetRows(
+                    [in, defaultvalue(-1)] long Rows,
+                    [in, optional] VARIANT Start,
+                    [in, optional] VARIANT Fields,
+                    [out, retval] VARIANT* pvar);
+    [id(0x000003f9)]
+    HRESULT _stdcall Move(
+                    [in] long NumRecords,
+                    [in, optional] VARIANT Start);
+    [id(0x000003fa)]
+    HRESULT _stdcall MoveNext();
+    [id(0x000003fb)]
+    HRESULT _stdcall MovePrevious();
+    [id(0x000003fc)]
+    HRESULT _stdcall MoveFirst();
+    [id(0x000003fd)]
+    HRESULT _stdcall MoveLast();
+    [id(0x000003fe)]
+    HRESULT _stdcall Open(
+                    [in, optional] VARIANT Source,
+                    [in, optional] VARIANT ActiveConnection,
+                    [in, defaultvalue(adOpenUnspecified)] CursorTypeEnum CursorType,
+                    [in, defaultvalue(adLockUnspecified)] LockTypeEnum LockType,
+                    [in, defaultvalue(-1)] long Options);
+    [id(0x000003ff)]
+    HRESULT _stdcall Requery([in, defaultvalue(-1)] long Options);
+    [id(0x60030022), hidden]
+    HRESULT _stdcall _xResync([in, defaultvalue(adAffectAll)] AffectEnum AffectRecords);
+    [id(0x00000401)]
+    HRESULT _stdcall Update(
+                    [in, optional] VARIANT Fields,
+                    [in, optional] VARIANT Values);
+    [id(0x00000417), propget]
+    HRESULT _stdcall AbsolutePage([out, retval] PositionEnum* pl);
+    [id(0x00000417), propput]
+    HRESULT _stdcall AbsolutePage([in] PositionEnum pl);
+    [id(0x00000402), propget]
+    HRESULT _stdcall EditMode([out, retval] EditModeEnum* pl);
+    [id(0x00000406), propget]
+    HRESULT _stdcall Filter([out, retval] VARIANT* Criteria);
+    [id(0x00000406), propput]
+    HRESULT _stdcall Filter([in] VARIANT Criteria);
+    [id(0x0000041a), propget]
+    HRESULT _stdcall PageCount([out, retval] long* pl);
+    [id(0x00000418), propget]
+    HRESULT _stdcall PageSize([out, retval] long* pl);
+    [id(0x00000418), propput]
+    HRESULT _stdcall PageSize([in] long pl);
+    [id(0x00000407), propget]
+    HRESULT _stdcall Sort([out, retval] BSTR* Criteria);
+    [id(0x00000407), propput]
+    HRESULT _stdcall Sort([in] BSTR Criteria);
+    [id(0x00000405), propget]
+    HRESULT _stdcall Status([out, retval] long* pl);
+    [id(0x0000041e), propget]
+    HRESULT _stdcall State([out, retval] long* plObjState);
+    [id(0x60030030), hidden]
+    HRESULT _stdcall _xClone([out, retval] _Recordset** ppvObject);
+    [id(0x0000040b)]
+    HRESULT _stdcall UpdateBatch([in, defaultvalue(adAffectAll)] AffectEnum AffectRecords);
+    [id(0x00000419)]
+    HRESULT _stdcall CancelBatch([in, defaultvalue(adAffectAll)] AffectEnum AffectRecords);
+    [id(0x0000041b), propget]
+    HRESULT _stdcall CursorLocation([out, retval] CursorLocationEnum* plCursorLoc);
+    [id(0x0000041b), propput]
+    HRESULT _stdcall CursorLocation([in] CursorLocationEnum plCursorLoc);
+    [id(0x0000041c)]
+    HRESULT _stdcall NextRecordset(
+                    [out, optional] VARIANT* RecordsAffected,
+                    [out, retval] _Recordset** ppiRs);
+    [id(0x0000040c)]
+    HRESULT _stdcall Supports(
+                    [in] CursorOptionEnum CursorOptions,
+                    [out, retval] VARIANT_BOOL* pb);
+    [id(0xfffffff8), propget, hidden]
+    HRESULT _stdcall Collect(
+                    [in] VARIANT Index,
+                    [out, retval] VARIANT* pvar);
+    [id(0xfffffff8), propput, hidden]
+    HRESULT _stdcall Collect(
+                    [in] VARIANT Index,
+                    [in] VARIANT pvar);
+    [id(0x0000041d), propget]
+    HRESULT _stdcall MarshalOptions([out, retval] MarshalOptionsEnum* peMarshal);
+    [id(0x0000041d), propput]
+    HRESULT _stdcall MarshalOptions([in] MarshalOptionsEnum peMarshal);
+    [id(0x00000422)]
+    HRESULT _stdcall Find(
+                    [in] BSTR Criteria,
+                    [in, defaultvalue(0)] long SkipRecords,
+                    [in, defaultvalue(adSearchForward)] SearchDirectionEnum SearchDirection,
+                    [in, optional] VARIANT Start);
+};
+
+[
+  odl,
+  uuid(0000154F-0000-0010-8000-00AA006D2EA4),
+  hidden,
+  dual,
+  nonextensible,
+  oleautomation
+]
+interface Recordset20 : Recordset15 {
+    [id(0x0000041f)]
+    HRESULT _stdcall Cancel();
+    [id(0x00000420), propget]
+    HRESULT _stdcall DataSource([out, retval] IUnknown** ppunkDataSource);
+    [id(0x00000420), propputref]
+    HRESULT _stdcall DataSource([in] IUnknown* ppunkDataSource);
+    [id(0x60040003), hidden]
+    HRESULT _stdcall _xSave(
+                    [in, defaultvalue("")] BSTR FileName,
+                    [in, defaultvalue(adPersistADTG)] PersistFormatEnum PersistFormat);
+    [id(0x00000425), propget]
+    HRESULT _stdcall ActiveCommand([out, retval] IDispatch** ppCmd);
+    [id(0x00000427), propput]
+    HRESULT _stdcall StayInSync([in] VARIANT_BOOL pbStayInSync);
+    [id(0x00000427), propget]
+    HRESULT _stdcall StayInSync([out, retval] VARIANT_BOOL* pbStayInSync);
+    [id(0x00000426)]
+    HRESULT _stdcall GetString(
+                    [in, defaultvalue(adClipString)] StringFormatEnum StringFormat,
+                    [in, defaultvalue(-1)] long NumRows,
+                    [in, defaultvalue("")] BSTR ColumnDelimeter,
+                    [in, defaultvalue("")] BSTR RowDelimeter,
+                    [in, defaultvalue("")] BSTR NullExpr,
+                    [out, retval] BSTR* pRetString);
+    [id(0x00000428), propget]
+    HRESULT _stdcall DataMember([out, retval] BSTR* pbstrDataMember);
+    [id(0x00000428), propput]
+    HRESULT _stdcall DataMember([in] BSTR pbstrDataMember);
+    [id(0x00000429)]
+    HRESULT _stdcall CompareBookmarks(
+                    [in] VARIANT Bookmark1,
+                    [in] VARIANT Bookmark2,
+                    [out, retval] CompareEnum* pCompare);
+    [id(0x0000040a)]
+    HRESULT _stdcall Clone(
+                    [in, defaultvalue(adLockUnspecified)] LockTypeEnum LockType,
+                    [out, retval] _Recordset** ppvObject);
+    [id(0x00000400)]
+    HRESULT _stdcall Resync(
+                    [in, defaultvalue(adAffectAll)] AffectEnum AffectRecords,
+                    [in, defaultvalue(adResyncAllValues)] ResyncEnum ResyncValues);
+};
+
+[
+  odl,
+  uuid(00001555-0000-0010-8000-00aa006d2ea4),
+  hidden,
+  dual,
+  nonextensible,
+  oleautomation
+]
+interface Recordset21 : Recordset20 {
+    [id(0x0000042a)]
+    HRESULT _stdcall Seek(
+                    [in] VARIANT KeyValues,
+                    [in, defaultvalue(1)] SeekEnum SeekOption);
+    [id(0x0000042b), propput]
+    HRESULT _stdcall Index([in] BSTR pbstrIndex);
+    [id(0x0000042b), propget]
+    HRESULT _stdcall Index([out, retval] BSTR* pbstrIndex);
+};
+
+[
+    odl,
+    uuid(00001556-0000-0010-8000-00aa006d2ea4),
+    dual,
+    nonextensible,
+    oleautomation
+]
+interface _Recordset : Recordset21 {
+    [id(0x00000421)]
+    HRESULT _stdcall Save(
+                    [in, optional] VARIANT Destination,
+                    [in, defaultvalue(adSeekFirstEQ)] PersistFormatEnum PersistFormat);
+};
+
+
+[
+  odl,
+  uuid(00000516-0000-0010-8000-00AA006D2EA4),
+  restricted
+]
+interface ADOConnectionConstruction15 : IUnknown {
+    [propget]
+    HRESULT _stdcall DSO([out, retval] IUnknown** ppDSO);
+    [propget]
+    HRESULT _stdcall Session([out, retval] IUnknown** ppSession);
+    HRESULT _stdcall WrapDSOandSession(
+                    [in] IUnknown* pDSO,
+                    [in] IUnknown* pSession);
+};
+
+[
+  odl,
+  uuid(00001402-0000-0010-8000-00AA006D2EA4),
+  hidden
+]
+interface ConnectionEventsVt : IUnknown {
+    HRESULT _stdcall InfoMessage(
+                    [in] Error* pError,
+                    [in, out] EventStatusEnum* adStatus,
+                    [in] _Connection* pConnection);
+    HRESULT _stdcall BeginTransComplete(
+                    [in] long TransactionLevel,
+                    [in] Error* pError,
+                    [in, out] EventStatusEnum* adStatus,
+                    [in] _Connection* pConnection);
+    HRESULT _stdcall CommitTransComplete(
+                    [in] Error* pError,
+                    [in, out] EventStatusEnum* adStatus,
+                    [in] _Connection* pConnection);
+    HRESULT _stdcall RollbackTransComplete(
+                    [in] Error* pError,
+                    [in, out] EventStatusEnum* adStatus,
+                    [in] _Connection* pConnection);
+    HRESULT _stdcall WillExecute(
+                    [in, out] BSTR* Source,
+                    [in, out] CursorTypeEnum* CursorType,
+                    [in, out] LockTypeEnum* LockType,
+                    [in, out] long* Options,
+                    [in, out] EventStatusEnum* adStatus,
+                    [in] _Command* pCommand,
+                    [in] _Recordset* pRecordset,
+                    [in] _Connection* pConnection);
+    HRESULT _stdcall ExecuteComplete(
+                    [in] long RecordsAffected,
+                    [in] Error* pError,
+                    [in, out] EventStatusEnum* adStatus,
+                    [in] _Command* pCommand,
+                    [in] _Recordset* pRecordset,
+                    [in] _Connection* pConnection);
+    HRESULT _stdcall WillConnect(
+                    [in, out] BSTR* ConnectionString,
+                    [in, out] BSTR* UserID,
+                    [in, out] BSTR* Password,
+                    [in, out] long* Options,
+                    [in, out] EventStatusEnum* adStatus,
+                    [in] _Connection* pConnection);
+    HRESULT _stdcall ConnectComplete(
+                    [in] Error* pError,
+                    [in, out] EventStatusEnum* adStatus,
+                    [in] _Connection* pConnection);
+    HRESULT _stdcall Disconnect(
+                    [in, out] EventStatusEnum* adStatus,
+                    [in] _Connection* pConnection);
+};
+
+[
+  uuid(00001400-0000-0010-8000-00AA006D2EA4)
+]
+dispinterface ConnectionEvents {
+    properties:
+    methods:
+        [id(00000000)]
+        HRESULT _stdcall InfoMessage(
+                        [in] Error* pError,
+                        [in, out] EventStatusEnum* adStatus,
+                        [in] _Connection* pConnection);
+                                    [id(0x00000001)]
+        HRESULT _stdcall BeginTransComplete(
+                        [in] long TransactionLevel,
+                        [in] Error* pError,
+                        [in, out] EventStatusEnum* adStatus,
+                        [in] _Connection* pConnection);
+        [id(0x00000003)]
+        HRESULT _stdcall CommitTransComplete(
+                        [in] Error* pError,
+                        [in, out] EventStatusEnum* adStatus,
+                        [in] _Connection* pConnection);
+        [id(0x00000002)]
+        HRESULT _stdcall RollbackTransComplete(
+                        [in] Error* pError,
+                        [in, out] EventStatusEnum* adStatus,
+                        [in] _Connection* pConnection);
+        [id(0x00000004)]
+        HRESULT _stdcall WillExecute(
+                        [in, out] BSTR* Source,
+                        [in, out] CursorTypeEnum* CursorType,
+                        [in, out] LockTypeEnum* LockType,
+                        [in, out] long* Options,
+                        [in, out] EventStatusEnum* adStatus,
+                        [in] _Command* pCommand,
+                        [in] _Recordset* pRecordset,
+                        [in] _Connection* pConnection);
+        [id(0x00000005)]
+        HRESULT _stdcall ExecuteComplete(
+                        [in] long RecordsAffected,
+                        [in] Error* pError,
+                        [in, out] EventStatusEnum* adStatus,
+                        [in] _Command* pCommand,
+                        [in] _Recordset* pRecordset,
+                        [in] _Connection* pConnection);
+        [id(0x00000006)]
+        HRESULT _stdcall WillConnect(
+                        [in, out] BSTR* ConnectionString,
+                        [in, out] BSTR* UserID,
+                        [in, out] BSTR* Password,
+                        [in, out] long* Options,
+                        [in, out] EventStatusEnum* adStatus,
+                        [in] _Connection* pConnection);
+        [id(0x00000007)]
+        HRESULT _stdcall ConnectComplete(
+                        [in] Error* pError,
+                        [in, out] EventStatusEnum* adStatus,
+                        [in] _Connection* pConnection);
+        [id(0x00000008)]
+        HRESULT _stdcall Disconnect(
+                        [in, out] EventStatusEnum* adStatus,
+                        [in] _Connection* pConnection);
+};
+
+[
+    uuid(b691e011-1797-432e-907a-4d8c69339129),
+    version(6.1)
+]
+library ADODB
+{
+    importlib("stdole2.tlb");
+
+    [
+        uuid(00000514-0000-0010-8000-00aa006d2ea4)
+    ]
+    coclass Connection
+    {
+        [default] interface _Connection;
+    //    [default, source] dispinterface ConnectionEvents;
+    };
+
+    [
+      uuid(00000535-0000-0010-8000-00AA006D2EA4),
+      licensed
+    ]
+    coclass Recordset {
+        [default] interface _Recordset;
+    //    [default, source] dispinterface RecordsetEvents;
+    };
+};
-- 
2.47.2

