From 7ca327871878f4aa56e608b6436a4200a355392d Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Wed, 22 Jun 2022 10:09:17 +1000
Subject: [PATCH] d3drm: Implement IDirect3DRMViewport Render

This tests should that this shouldn't be background shouldn't be updated
in Render.  Code to show what needs to be done but isn't in the correct
location for now.
---
 dlls/d3drm/Makefile.in     |   2 +-
 dlls/d3drm/d3drm_private.h |   4 ++
 dlls/d3drm/device.c        |   9 +++
 dlls/d3drm/frame.c         |   9 +++
 dlls/d3drm/texture.c       |   9 +++
 dlls/d3drm/viewport.c      | 110 +++++++++++++++++++++++++++++++++++--
 6 files changed, 138 insertions(+), 5 deletions(-)

diff --git a/dlls/d3drm/Makefile.in b/dlls/d3drm/Makefile.in
index e5381b4919c..0ae6c023081 100644
--- a/dlls/d3drm/Makefile.in
+++ b/dlls/d3drm/Makefile.in
@@ -1,6 +1,6 @@
 MODULE    = d3drm.dll
 IMPORTLIB = d3drm
-IMPORTS   = d3dxof ddraw
+IMPORTS   = d3dxof ddraw gdi32
 
 EXTRADLLFLAGS = -Wb,--prefer-native
 
diff --git a/dlls/d3drm/d3drm_private.h b/dlls/d3drm/d3drm_private.h
index 5d060f09493..35320adb882 100644
--- a/dlls/d3drm/d3drm_private.h
+++ b/dlls/d3drm/d3drm_private.h
@@ -287,10 +287,14 @@ HRESULT d3drm_object_set_name(struct d3drm_object *object, const char *name);
 void d3drm_object_cleanup(IDirect3DRMObject *iface, struct d3drm_object *object);
 
 struct d3drm_frame *unsafe_impl_from_IDirect3DRMFrame(IDirect3DRMFrame *iface);
+struct d3drm_frame *unsafe_impl_from_IDirect3DRMFrame2(IDirect3DRMFrame2 *iface);
 struct d3drm_frame *unsafe_impl_from_IDirect3DRMFrame3(IDirect3DRMFrame3 *iface);
 
+struct d3drm_device *unsafe_impl_from_IDirect3DRMDevice(IDirect3DRMDevice *iface);
 struct d3drm_device *unsafe_impl_from_IDirect3DRMDevice3(IDirect3DRMDevice3 *iface);
 
+struct d3drm_texture *unsafe_impl_from_IDirect3DRMTexture(IDirect3DRMTexture *iface);
+
 HRESULT d3drm_texture_create(struct d3drm_texture **texture, IDirect3DRM *d3drm);
 HRESULT d3drm_frame_create(struct d3drm_frame **frame, IUnknown *parent_frame, IDirect3DRM *d3drm);
 HRESULT d3drm_face_create(struct d3drm_face **face);
diff --git a/dlls/d3drm/device.c b/dlls/d3drm/device.c
index fe85784ee63..d89a062456b 100644
--- a/dlls/d3drm/device.c
+++ b/dlls/d3drm/device.c
@@ -1644,6 +1644,15 @@ static const struct IDirect3DRMWinDeviceVtbl d3drm_device_win_vtbl =
     d3drm_device_win_HandleActivate,
 };
 
+struct d3drm_device *unsafe_impl_from_IDirect3DRMDevice(IDirect3DRMDevice *iface)
+{
+    if (!iface)
+        return NULL;
+    assert(iface->lpVtbl == &d3drm_device1_vtbl);
+
+    return impl_from_IDirect3DRMDevice(iface);
+}
+
 struct d3drm_device *unsafe_impl_from_IDirect3DRMDevice3(IDirect3DRMDevice3 *iface)
 {
     if (!iface)
diff --git a/dlls/d3drm/frame.c b/dlls/d3drm/frame.c
index 07044da2aa8..c5d3c2cb55d 100644
--- a/dlls/d3drm/frame.c
+++ b/dlls/d3drm/frame.c
@@ -3159,6 +3159,15 @@ struct d3drm_frame *unsafe_impl_from_IDirect3DRMFrame(IDirect3DRMFrame *iface)
     return impl_from_IDirect3DRMFrame(iface);
 }
 
+struct d3drm_frame *unsafe_impl_from_IDirect3DRMFrame2(IDirect3DRMFrame2 *iface)
+{
+    if (!iface)
+        return NULL;
+    assert(iface->lpVtbl == &d3drm_frame2_vtbl);
+
+    return impl_from_IDirect3DRMFrame2(iface);
+}
+
 HRESULT d3drm_frame_create(struct d3drm_frame **frame, IUnknown *parent_frame, IDirect3DRM *d3drm)
 {
     static const char classname[] = "Frame";
diff --git a/dlls/d3drm/texture.c b/dlls/d3drm/texture.c
index 0922837255c..3bd9b0da6e2 100644
--- a/dlls/d3drm/texture.c
+++ b/dlls/d3drm/texture.c
@@ -1457,6 +1457,15 @@ static const struct IDirect3DRMTexture3Vtbl d3drm_texture3_vtbl =
     d3drm_texture3_SetValidationCallback,
 };
 
+struct d3drm_texture *unsafe_impl_from_IDirect3DRMTexture(IDirect3DRMTexture *iface)
+{
+    if (!iface)
+        return NULL;
+    assert(iface->lpVtbl == &d3drm_texture1_vtbl);
+
+    return impl_from_IDirect3DRMTexture(iface);;
+}
+
 HRESULT d3drm_texture_create(struct d3drm_texture **texture, IDirect3DRM *d3drm)
 {
     static const char classname[] = "Texture";
diff --git a/dlls/d3drm/viewport.c b/dlls/d3drm/viewport.c
index f6d824b6488..64f0dd97b61 100644
--- a/dlls/d3drm/viewport.c
+++ b/dlls/d3drm/viewport.c
@@ -470,18 +470,120 @@ static HRESULT WINAPI d3drm_viewport1_Clear(IDirect3DRMViewport *iface)
     return d3drm_viewport2_Clear(&viewport->IDirect3DRMViewport2_iface, D3DRMCLEAR_ALL);
 }
 
+static HRESULT create_surface_from_image(IDirectDraw *ddraw, D3DRMIMAGE *image, IDirectDrawSurface **out)
+{
+    IDirectDrawSurface *surface;
+    DDSURFACEDESC desc;
+    HRESULT hr;
+    HBITMAP bitmap;
+    HDC hdc, hdcImage;
+
+    memset(&desc, 0, sizeof(desc));
+    desc.dwSize = sizeof(desc);
+    desc.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH | DDSD_PIXELFORMAT;
+    desc.ddsCaps.dwCaps = DDSCAPS_TEXTURE;
+    desc.dwWidth = image->width;
+    desc.dwHeight = image->height;
+    desc.lPitch = 3;
+
+    desc.ddpfPixelFormat.dwSize = sizeof(desc.ddpfPixelFormat);
+    desc.ddpfPixelFormat.dwFlags = DDPF_RGB;
+
+    desc.ddpfPixelFormat.dwRGBBitCount = 16;
+    desc.ddpfPixelFormat.dwRBitMask = 0x00007c00;
+    desc.ddpfPixelFormat.dwGBitMask = 0x000003e0;
+    desc.ddpfPixelFormat.dwBBitMask = 0x0000001f;
+
+    hr = IDirectDraw_CreateSurface(ddraw, &desc, &surface, NULL);
+    if (FAILED(hr))
+        return hr;
+
+    bitmap = CreateBitmap(image->width, image->height, 1, 1, image->buffer1);
+    if(!bitmap)
+    {
+        ERR("Failed to create Bitmap\n");
+        IDirectDrawSurface_Release(surface);
+        return E_FAIL;
+    }
+
+    hdcImage = CreateCompatibleDC(NULL);
+    SelectObject(hdcImage, bitmap);
+
+    IDirectDrawSurface_GetDC(surface, &hdc);
+    BitBlt(hdc, 0, 0, image->width, image->height, hdcImage, 0, 0, SRCCOPY);
+    IDirectDrawSurface_ReleaseDC(surface, hdc);
+    DeleteDC(hdcImage);
+    DeleteObject(hdcImage);
+
+    *out = surface;
+
+    return hr;
+}
+
+static HRESULT viewport_render(struct d3drm_viewport *viewport, struct d3drm_frame *drmframe)
+{
+    HRESULT hr = S_OK;
+
+    if (drmframe->backgroundimage)
+    {
+        IDirect3DRMTexture *drmtexture;
+
+        hr = IUnknown_QueryInterface(drmframe->backgroundimage, &IID_IDirect3DRMTexture, (void**)&drmtexture);
+        if (hr == S_OK)
+        {
+            struct d3drm_texture *texture = unsafe_impl_from_IDirect3DRMTexture(drmtexture);
+            if (!texture)
+            {
+                FIXME("Unsupported IDirect3DRMTexture interface\n");
+                return D3DRM_OK;
+            }
+
+            if (!texture->surface)
+                hr = create_surface_from_image(viewport->device->ddraw, texture->image, &texture->surface);
+
+            hr = IDirectDrawSurface_Blt(viewport->device->render_target, NULL, texture->surface, NULL, DDBLT_WAIT, NULL);
+
+            IDirect3DRMTexture_Release(drmtexture);
+        }
+    }
+
+    return hr;
+}
+
 static HRESULT WINAPI d3drm_viewport2_Render(IDirect3DRMViewport2 *iface, IDirect3DRMFrame3 *frame)
 {
-    FIXME("iface %p, frame %p stub!\n", iface, frame);
+    struct d3drm_viewport *viewport = impl_from_IDirect3DRMViewport2(iface);
+    struct d3drm_frame *drmframe = unsafe_impl_from_IDirect3DRMFrame3(frame);
+    HRESULT hr;
 
-    return D3DRM_OK;
+    TRACE("iface %p, frame %p\n", iface, frame);
+
+    hr = viewport_render(viewport, drmframe);
+
+    return hr;
 }
 
 static HRESULT WINAPI d3drm_viewport1_Render(IDirect3DRMViewport *iface, IDirect3DRMFrame *frame)
 {
-    FIXME("iface %p, frame %p stub!\n", iface, frame);
+    IDirect3DRMFrame2 *frame2;
+    struct d3drm_viewport *viewport = impl_from_IDirect3DRMViewport(iface);
+    struct d3drm_frame *drmframe;
+    HRESULT hr;
 
-    return D3DRM_OK;
+    TRACE("iface %p, frame %p\n", iface, frame);
+
+    hr = IDirect3DRMFrame_QueryInterface(frame, &IID_IDirect3DRMFrame2, (void**)&frame2);
+    if(hr == S_OK)
+    {
+        drmframe = unsafe_impl_from_IDirect3DRMFrame2(frame2);
+        IDirect3DRMFrame2_Release(frame2);
+    }
+    else
+        drmframe = unsafe_impl_from_IDirect3DRMFrame(frame);
+
+    hr = viewport_render(viewport, drmframe);
+
+    return hr;
 }
 
 static HRESULT WINAPI d3drm_viewport2_SetFront(IDirect3DRMViewport2 *iface, D3DVALUE front)
-- 
2.45.2

