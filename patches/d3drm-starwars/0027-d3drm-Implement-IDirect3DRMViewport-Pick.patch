From d60b9debcb236f2023a878ada433f224c6b14eb9 Mon Sep 17 00:00:00 2001
From: Alistair Leslie-Hughes <leslie_alistair@hotmail.com>
Date: Mon, 13 Jun 2022 19:23:43 +1000
Subject: [PATCH] d3drm: Implement IDirect3DRMViewport Pick

---
 dlls/d3drm/viewport.c | 129 +++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 127 insertions(+), 2 deletions(-)

diff --git a/dlls/d3drm/viewport.c b/dlls/d3drm/viewport.c
index 36a80c95675..7261d6458bb 100644
--- a/dlls/d3drm/viewport.c
+++ b/dlls/d3drm/viewport.c
@@ -822,20 +822,145 @@ static HRESULT WINAPI d3drm_viewport1_GetPlane(IDirect3DRMViewport *iface,
     return d3drm_viewport2_GetPlane(&viewport->IDirect3DRMViewport2_iface, left, right, bottom, top);
 }
 
+struct d3drm_picked_array
+{
+    IDirect3DRMPickedArray IDirect3DRMPickedArray_iface;
+    LONG ref;
+    ULONG size;
+};
+
+static inline struct d3drm_picked_array *impl_from_IDirect3DRMPickedArray(IDirect3DRMPickedArray *iface)
+{
+    return CONTAINING_RECORD(iface, struct d3drm_picked_array, IDirect3DRMPickedArray_iface);
+}
+
+static HRESULT WINAPI d3drm_picked_array_QueryInterface(IDirect3DRMPickedArray *iface, REFIID riid, void **out)
+{
+    TRACE("iface %p, riid %s, out %p.\n", iface, debugstr_guid(riid), out);
+
+    if (IsEqualGUID(riid, &IID_IDirect3DRMPickedArray)
+            || IsEqualGUID(riid, &IID_IUnknown))
+    {
+        IDirect3DRMPickedArray_AddRef(iface);
+        *out = iface;
+        return S_OK;
+    }
+
+    WARN("%s not implemented, returning E_NOINTERFACE.\n", debugstr_guid(riid));
+
+    *out = NULL;
+    return E_NOINTERFACE;
+}
+
+static ULONG WINAPI d3drm_picked_array_AddRef(IDirect3DRMPickedArray *iface)
+{
+    struct d3drm_picked_array *array = impl_from_IDirect3DRMPickedArray(iface);
+    ULONG refcount = InterlockedIncrement(&array->ref);
+
+    TRACE("%p increasing refcount to %lu.\n", iface, refcount);
+
+    return refcount;
+}
+
+static ULONG WINAPI d3drm_picked_array_Release(IDirect3DRMPickedArray *iface)
+{
+    struct d3drm_picked_array *array = impl_from_IDirect3DRMPickedArray(iface);
+    ULONG refcount = InterlockedDecrement(&array->ref);
+//    ULONG i;
+
+    TRACE("%p decreasing refcount to %lu.\n", iface, refcount);
+
+    if (!refcount)
+    {
+/*        for (i = 0; i < array->size; ++i)
+        {
+            IDirect3DRMVisual_Release(array->visuals[i]);
+        }*/
+        //free(array->visuals);
+        free(array);
+    }
+
+    return refcount;
+}
+
+static DWORD WINAPI d3drm_picked_array_GetSize(IDirect3DRMPickedArray *iface)
+{
+    struct d3drm_picked_array *array = impl_from_IDirect3DRMPickedArray(iface);
+
+    TRACE("iface %p.\n", iface);
+
+    return array->size;
+}
+
+static HRESULT WINAPI d3drm_picked_array_GetPick(IDirect3DRMPickedArray *iface,
+        DWORD index, IDirect3DRMVisual **visual, IDirect3DRMFrameArray **frame_array,
+        D3DRMPICKDESC *pick_desc)
+{
+    struct d3drm_picked_array *array = impl_from_IDirect3DRMPickedArray(iface);
+
+    TRACE("iface %p, index %lu, visual %p, frame_array %p, pick_desc %p.\n", iface, index,
+          visual, frame_array, pick_desc);
+
+    //if (!visual)
+        return D3DRMERR_BADVALUE;
+
+    /*if (index >= array->size)
+    {
+        *visual = NULL;
+        return D3DRMERR_BADVALUE;
+    }
+
+    IDirect3DRMVisual_AddRef(array->visuals[index]);
+    *visual = array->visuals[index];
+
+    return D3DRM_OK;*/
+}
+
+static const struct IDirect3DRMPickedArrayVtbl d3drm_picked_array_vtbl =
+{
+    d3drm_picked_array_QueryInterface,
+    d3drm_picked_array_AddRef,
+    d3drm_picked_array_Release,
+    d3drm_picked_array_GetSize,
+    d3drm_picked_array_GetPick,
+};
+
 static HRESULT WINAPI d3drm_viewport2_Pick(IDirect3DRMViewport2 *iface,
         LONG x, LONG y, IDirect3DRMPickedArray **visuals)
 {
+    struct d3drm_picked_array *array;
     FIXME("iface %p, x %ld, y %ld, visuals %p stub!\n", iface, x, y, visuals);
 
-    return E_NOTIMPL;
+    if (!(array = calloc(1, sizeof(*array))))
+        return E_OUTOFMEMORY;
+
+    array->IDirect3DRMPickedArray_iface.lpVtbl = &d3drm_picked_array_vtbl;
+    array->ref = 1;
+    array->size = 0;
+
+    *visuals = &array->IDirect3DRMPickedArray_iface;
+
+    return S_OK;
 }
 
 static HRESULT WINAPI d3drm_viewport1_Pick(IDirect3DRMViewport *iface,
         LONG x, LONG y, IDirect3DRMPickedArray **visuals)
 {
+    struct d3drm_picked_array *array;
+//    unsigned int i;
+
     FIXME("iface %p, x %ld, y %ld, visuals %p stub!\n", iface, x, y, visuals);
 
-    return E_NOTIMPL;
+    if (!(array = calloc(1, sizeof(*array))))
+        return E_OUTOFMEMORY;
+
+    array->IDirect3DRMPickedArray_iface.lpVtbl = &d3drm_picked_array_vtbl;
+    array->ref = 1;
+    array->size = 0;
+
+    *visuals = &array->IDirect3DRMPickedArray_iface;
+
+    return S_OK;
 }
 
 static BOOL WINAPI d3drm_viewport2_GetUniformScaling(IDirect3DRMViewport2 *iface)
-- 
2.35.1

